
TempHumidMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004088  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08004148  08004148  00014148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004234  08004234  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004234  08004234  00014234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800423c  0800423c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800423c  0800423c  0001423c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004240  08004240  00014240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  08004250  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08004250  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009733  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000194c  00000000  00000000  00029767  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ab8  00000000  00000000  0002b0b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a00  00000000  00000000  0002bb70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000105fb  00000000  00000000  0002c570  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008e44  00000000  00000000  0003cb6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006962f  00000000  00000000  000459af  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000aefde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002740  00000000  00000000  000af05c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004130 	.word	0x08004130

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004130 	.word	0x08004130

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f830 	bl	80002b4 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	0415      	lsls	r5, r2, #16
 8000268:	0c2d      	lsrs	r5, r5, #16
 800026a:	002e      	movs	r6, r5
 800026c:	b580      	push	{r7, lr}
 800026e:	0407      	lsls	r7, r0, #16
 8000270:	0c14      	lsrs	r4, r2, #16
 8000272:	0c3f      	lsrs	r7, r7, #16
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	437e      	muls	r6, r7
 800027a:	435d      	muls	r5, r3
 800027c:	4367      	muls	r7, r4
 800027e:	4363      	muls	r3, r4
 8000280:	197f      	adds	r7, r7, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	469c      	mov	ip, r3
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	025b      	lsls	r3, r3, #9
 8000290:	4698      	mov	r8, r3
 8000292:	44c4      	add	ip, r8
 8000294:	464b      	mov	r3, r9
 8000296:	4343      	muls	r3, r0
 8000298:	4351      	muls	r1, r2
 800029a:	0c25      	lsrs	r5, r4, #16
 800029c:	0436      	lsls	r6, r6, #16
 800029e:	4465      	add	r5, ip
 80002a0:	0c36      	lsrs	r6, r6, #16
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	19a4      	adds	r4, r4, r6
 80002a6:	195b      	adds	r3, r3, r5
 80002a8:	1859      	adds	r1, r3, r1
 80002aa:	0020      	movs	r0, r4
 80002ac:	bc0c      	pop	{r2, r3}
 80002ae:	4690      	mov	r8, r2
 80002b0:	4699      	mov	r9, r3
 80002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b4 <__udivmoddi4>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	464f      	mov	r7, r9
 80002b8:	4646      	mov	r6, r8
 80002ba:	46d6      	mov	lr, sl
 80002bc:	b5c0      	push	{r6, r7, lr}
 80002be:	0004      	movs	r4, r0
 80002c0:	b082      	sub	sp, #8
 80002c2:	000d      	movs	r5, r1
 80002c4:	4691      	mov	r9, r2
 80002c6:	4698      	mov	r8, r3
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d82f      	bhi.n	800032c <__udivmoddi4+0x78>
 80002cc:	d02c      	beq.n	8000328 <__udivmoddi4+0x74>
 80002ce:	4641      	mov	r1, r8
 80002d0:	4648      	mov	r0, r9
 80002d2:	f001 fa6f 	bl	80017b4 <__clzdi2>
 80002d6:	0029      	movs	r1, r5
 80002d8:	0006      	movs	r6, r0
 80002da:	0020      	movs	r0, r4
 80002dc:	f001 fa6a 	bl	80017b4 <__clzdi2>
 80002e0:	1a33      	subs	r3, r6, r0
 80002e2:	469c      	mov	ip, r3
 80002e4:	3b20      	subs	r3, #32
 80002e6:	469a      	mov	sl, r3
 80002e8:	d500      	bpl.n	80002ec <__udivmoddi4+0x38>
 80002ea:	e076      	b.n	80003da <__udivmoddi4+0x126>
 80002ec:	464b      	mov	r3, r9
 80002ee:	4652      	mov	r2, sl
 80002f0:	4093      	lsls	r3, r2
 80002f2:	001f      	movs	r7, r3
 80002f4:	464b      	mov	r3, r9
 80002f6:	4662      	mov	r2, ip
 80002f8:	4093      	lsls	r3, r2
 80002fa:	001e      	movs	r6, r3
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d828      	bhi.n	8000352 <__udivmoddi4+0x9e>
 8000300:	d025      	beq.n	800034e <__udivmoddi4+0x9a>
 8000302:	4653      	mov	r3, sl
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5a>
 800030c:	e07b      	b.n	8000406 <__udivmoddi4+0x152>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	4652      	mov	r2, sl
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4662      	mov	r2, ip
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e018      	b.n	800035a <__udivmoddi4+0xa6>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9d0      	bls.n	80002ce <__udivmoddi4+0x1a>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8a>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b002      	add	sp, #8
 8000344:	bc1c      	pop	{r2, r3, r4}
 8000346:	4690      	mov	r8, r2
 8000348:	4699      	mov	r9, r3
 800034a:	46a2      	mov	sl, r4
 800034c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034e:	42a3      	cmp	r3, r4
 8000350:	d9d7      	bls.n	8000302 <__udivmoddi4+0x4e>
 8000352:	2200      	movs	r2, #0
 8000354:	2300      	movs	r3, #0
 8000356:	9200      	str	r2, [sp, #0]
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	4663      	mov	r3, ip
 800035c:	2b00      	cmp	r3, #0
 800035e:	d0e9      	beq.n	8000334 <__udivmoddi4+0x80>
 8000360:	07fb      	lsls	r3, r7, #31
 8000362:	4698      	mov	r8, r3
 8000364:	4641      	mov	r1, r8
 8000366:	0872      	lsrs	r2, r6, #1
 8000368:	430a      	orrs	r2, r1
 800036a:	087b      	lsrs	r3, r7, #1
 800036c:	4666      	mov	r6, ip
 800036e:	e00e      	b.n	800038e <__udivmoddi4+0xda>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d101      	bne.n	8000378 <__udivmoddi4+0xc4>
 8000374:	42a2      	cmp	r2, r4
 8000376:	d80c      	bhi.n	8000392 <__udivmoddi4+0xde>
 8000378:	1aa4      	subs	r4, r4, r2
 800037a:	419d      	sbcs	r5, r3
 800037c:	2001      	movs	r0, #1
 800037e:	1924      	adds	r4, r4, r4
 8000380:	416d      	adcs	r5, r5
 8000382:	2100      	movs	r1, #0
 8000384:	3e01      	subs	r6, #1
 8000386:	1824      	adds	r4, r4, r0
 8000388:	414d      	adcs	r5, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d006      	beq.n	800039c <__udivmoddi4+0xe8>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d9ee      	bls.n	8000370 <__udivmoddi4+0xbc>
 8000392:	3e01      	subs	r6, #1
 8000394:	1924      	adds	r4, r4, r4
 8000396:	416d      	adcs	r5, r5
 8000398:	2e00      	cmp	r6, #0
 800039a:	d1f8      	bne.n	800038e <__udivmoddi4+0xda>
 800039c:	9800      	ldr	r0, [sp, #0]
 800039e:	9901      	ldr	r1, [sp, #4]
 80003a0:	4653      	mov	r3, sl
 80003a2:	1900      	adds	r0, r0, r4
 80003a4:	4169      	adcs	r1, r5
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db23      	blt.n	80003f2 <__udivmoddi4+0x13e>
 80003aa:	002b      	movs	r3, r5
 80003ac:	4652      	mov	r2, sl
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	002a      	movs	r2, r5
 80003b2:	4664      	mov	r4, ip
 80003b4:	40e2      	lsrs	r2, r4
 80003b6:	001c      	movs	r4, r3
 80003b8:	4653      	mov	r3, sl
 80003ba:	0015      	movs	r5, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	db2d      	blt.n	800041c <__udivmoddi4+0x168>
 80003c0:	0026      	movs	r6, r4
 80003c2:	4657      	mov	r7, sl
 80003c4:	40be      	lsls	r6, r7
 80003c6:	0033      	movs	r3, r6
 80003c8:	0026      	movs	r6, r4
 80003ca:	4667      	mov	r7, ip
 80003cc:	40be      	lsls	r6, r7
 80003ce:	0032      	movs	r2, r6
 80003d0:	1a80      	subs	r0, r0, r2
 80003d2:	4199      	sbcs	r1, r3
 80003d4:	9000      	str	r0, [sp, #0]
 80003d6:	9101      	str	r1, [sp, #4]
 80003d8:	e7ac      	b.n	8000334 <__udivmoddi4+0x80>
 80003da:	4662      	mov	r2, ip
 80003dc:	2320      	movs	r3, #32
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	464a      	mov	r2, r9
 80003e2:	40da      	lsrs	r2, r3
 80003e4:	4661      	mov	r1, ip
 80003e6:	0013      	movs	r3, r2
 80003e8:	4642      	mov	r2, r8
 80003ea:	408a      	lsls	r2, r1
 80003ec:	0017      	movs	r7, r2
 80003ee:	431f      	orrs	r7, r3
 80003f0:	e780      	b.n	80002f4 <__udivmoddi4+0x40>
 80003f2:	4662      	mov	r2, ip
 80003f4:	2320      	movs	r3, #32
 80003f6:	1a9b      	subs	r3, r3, r2
 80003f8:	002a      	movs	r2, r5
 80003fa:	4666      	mov	r6, ip
 80003fc:	409a      	lsls	r2, r3
 80003fe:	0023      	movs	r3, r4
 8000400:	40f3      	lsrs	r3, r6
 8000402:	4313      	orrs	r3, r2
 8000404:	e7d4      	b.n	80003b0 <__udivmoddi4+0xfc>
 8000406:	4662      	mov	r2, ip
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e780      	b.n	800031e <__udivmoddi4+0x6a>
 800041c:	2320      	movs	r3, #32
 800041e:	4662      	mov	r2, ip
 8000420:	0026      	movs	r6, r4
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	40de      	lsrs	r6, r3
 8000426:	002f      	movs	r7, r5
 8000428:	46b0      	mov	r8, r6
 800042a:	4666      	mov	r6, ip
 800042c:	40b7      	lsls	r7, r6
 800042e:	4646      	mov	r6, r8
 8000430:	003b      	movs	r3, r7
 8000432:	4333      	orrs	r3, r6
 8000434:	e7c8      	b.n	80003c8 <__udivmoddi4+0x114>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_dadd>:
 8000438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800043a:	464f      	mov	r7, r9
 800043c:	4646      	mov	r6, r8
 800043e:	46d6      	mov	lr, sl
 8000440:	000c      	movs	r4, r1
 8000442:	0309      	lsls	r1, r1, #12
 8000444:	b5c0      	push	{r6, r7, lr}
 8000446:	0a49      	lsrs	r1, r1, #9
 8000448:	0f47      	lsrs	r7, r0, #29
 800044a:	005e      	lsls	r6, r3, #1
 800044c:	4339      	orrs	r1, r7
 800044e:	031f      	lsls	r7, r3, #12
 8000450:	0fdb      	lsrs	r3, r3, #31
 8000452:	469c      	mov	ip, r3
 8000454:	0065      	lsls	r5, r4, #1
 8000456:	0a7b      	lsrs	r3, r7, #9
 8000458:	0f57      	lsrs	r7, r2, #29
 800045a:	431f      	orrs	r7, r3
 800045c:	0d6d      	lsrs	r5, r5, #21
 800045e:	0fe4      	lsrs	r4, r4, #31
 8000460:	0d76      	lsrs	r6, r6, #21
 8000462:	46a1      	mov	r9, r4
 8000464:	00c0      	lsls	r0, r0, #3
 8000466:	46b8      	mov	r8, r7
 8000468:	00d2      	lsls	r2, r2, #3
 800046a:	1bab      	subs	r3, r5, r6
 800046c:	4564      	cmp	r4, ip
 800046e:	d07b      	beq.n	8000568 <__aeabi_dadd+0x130>
 8000470:	2b00      	cmp	r3, #0
 8000472:	dd5f      	ble.n	8000534 <__aeabi_dadd+0xfc>
 8000474:	2e00      	cmp	r6, #0
 8000476:	d000      	beq.n	800047a <__aeabi_dadd+0x42>
 8000478:	e0a4      	b.n	80005c4 <__aeabi_dadd+0x18c>
 800047a:	003e      	movs	r6, r7
 800047c:	4316      	orrs	r6, r2
 800047e:	d100      	bne.n	8000482 <__aeabi_dadd+0x4a>
 8000480:	e112      	b.n	80006a8 <__aeabi_dadd+0x270>
 8000482:	1e5e      	subs	r6, r3, #1
 8000484:	2e00      	cmp	r6, #0
 8000486:	d000      	beq.n	800048a <__aeabi_dadd+0x52>
 8000488:	e19e      	b.n	80007c8 <__aeabi_dadd+0x390>
 800048a:	1a87      	subs	r7, r0, r2
 800048c:	4643      	mov	r3, r8
 800048e:	42b8      	cmp	r0, r7
 8000490:	4180      	sbcs	r0, r0
 8000492:	2501      	movs	r5, #1
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	4240      	negs	r0, r0
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	020b      	lsls	r3, r1, #8
 800049c:	d400      	bmi.n	80004a0 <__aeabi_dadd+0x68>
 800049e:	e131      	b.n	8000704 <__aeabi_dadd+0x2cc>
 80004a0:	0249      	lsls	r1, r1, #9
 80004a2:	0a4e      	lsrs	r6, r1, #9
 80004a4:	2e00      	cmp	r6, #0
 80004a6:	d100      	bne.n	80004aa <__aeabi_dadd+0x72>
 80004a8:	e16e      	b.n	8000788 <__aeabi_dadd+0x350>
 80004aa:	0030      	movs	r0, r6
 80004ac:	f001 f964 	bl	8001778 <__clzsi2>
 80004b0:	0003      	movs	r3, r0
 80004b2:	3b08      	subs	r3, #8
 80004b4:	2b1f      	cmp	r3, #31
 80004b6:	dd00      	ble.n	80004ba <__aeabi_dadd+0x82>
 80004b8:	e161      	b.n	800077e <__aeabi_dadd+0x346>
 80004ba:	2220      	movs	r2, #32
 80004bc:	0039      	movs	r1, r7
 80004be:	1ad2      	subs	r2, r2, r3
 80004c0:	409e      	lsls	r6, r3
 80004c2:	40d1      	lsrs	r1, r2
 80004c4:	409f      	lsls	r7, r3
 80004c6:	430e      	orrs	r6, r1
 80004c8:	429d      	cmp	r5, r3
 80004ca:	dd00      	ble.n	80004ce <__aeabi_dadd+0x96>
 80004cc:	e151      	b.n	8000772 <__aeabi_dadd+0x33a>
 80004ce:	1b5d      	subs	r5, r3, r5
 80004d0:	1c6b      	adds	r3, r5, #1
 80004d2:	2b1f      	cmp	r3, #31
 80004d4:	dd00      	ble.n	80004d8 <__aeabi_dadd+0xa0>
 80004d6:	e17c      	b.n	80007d2 <__aeabi_dadd+0x39a>
 80004d8:	2120      	movs	r1, #32
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	003d      	movs	r5, r7
 80004de:	0030      	movs	r0, r6
 80004e0:	408f      	lsls	r7, r1
 80004e2:	4088      	lsls	r0, r1
 80004e4:	40dd      	lsrs	r5, r3
 80004e6:	1e79      	subs	r1, r7, #1
 80004e8:	418f      	sbcs	r7, r1
 80004ea:	0031      	movs	r1, r6
 80004ec:	2207      	movs	r2, #7
 80004ee:	4328      	orrs	r0, r5
 80004f0:	40d9      	lsrs	r1, r3
 80004f2:	2500      	movs	r5, #0
 80004f4:	4307      	orrs	r7, r0
 80004f6:	403a      	ands	r2, r7
 80004f8:	2a00      	cmp	r2, #0
 80004fa:	d009      	beq.n	8000510 <__aeabi_dadd+0xd8>
 80004fc:	230f      	movs	r3, #15
 80004fe:	403b      	ands	r3, r7
 8000500:	2b04      	cmp	r3, #4
 8000502:	d005      	beq.n	8000510 <__aeabi_dadd+0xd8>
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	42bb      	cmp	r3, r7
 8000508:	41bf      	sbcs	r7, r7
 800050a:	427f      	negs	r7, r7
 800050c:	19c9      	adds	r1, r1, r7
 800050e:	001f      	movs	r7, r3
 8000510:	020b      	lsls	r3, r1, #8
 8000512:	d400      	bmi.n	8000516 <__aeabi_dadd+0xde>
 8000514:	e226      	b.n	8000964 <__aeabi_dadd+0x52c>
 8000516:	1c6a      	adds	r2, r5, #1
 8000518:	4bc6      	ldr	r3, [pc, #792]	; (8000834 <__aeabi_dadd+0x3fc>)
 800051a:	0555      	lsls	r5, r2, #21
 800051c:	0d6d      	lsrs	r5, r5, #21
 800051e:	429a      	cmp	r2, r3
 8000520:	d100      	bne.n	8000524 <__aeabi_dadd+0xec>
 8000522:	e106      	b.n	8000732 <__aeabi_dadd+0x2fa>
 8000524:	4ac4      	ldr	r2, [pc, #784]	; (8000838 <__aeabi_dadd+0x400>)
 8000526:	08ff      	lsrs	r7, r7, #3
 8000528:	400a      	ands	r2, r1
 800052a:	0753      	lsls	r3, r2, #29
 800052c:	0252      	lsls	r2, r2, #9
 800052e:	433b      	orrs	r3, r7
 8000530:	0b12      	lsrs	r2, r2, #12
 8000532:	e08e      	b.n	8000652 <__aeabi_dadd+0x21a>
 8000534:	2b00      	cmp	r3, #0
 8000536:	d000      	beq.n	800053a <__aeabi_dadd+0x102>
 8000538:	e0b8      	b.n	80006ac <__aeabi_dadd+0x274>
 800053a:	1c6b      	adds	r3, r5, #1
 800053c:	055b      	lsls	r3, r3, #21
 800053e:	0d5b      	lsrs	r3, r3, #21
 8000540:	2b01      	cmp	r3, #1
 8000542:	dc00      	bgt.n	8000546 <__aeabi_dadd+0x10e>
 8000544:	e130      	b.n	80007a8 <__aeabi_dadd+0x370>
 8000546:	1a87      	subs	r7, r0, r2
 8000548:	4643      	mov	r3, r8
 800054a:	42b8      	cmp	r0, r7
 800054c:	41b6      	sbcs	r6, r6
 800054e:	1acb      	subs	r3, r1, r3
 8000550:	4276      	negs	r6, r6
 8000552:	1b9e      	subs	r6, r3, r6
 8000554:	0233      	lsls	r3, r6, #8
 8000556:	d500      	bpl.n	800055a <__aeabi_dadd+0x122>
 8000558:	e14c      	b.n	80007f4 <__aeabi_dadd+0x3bc>
 800055a:	003b      	movs	r3, r7
 800055c:	4333      	orrs	r3, r6
 800055e:	d1a1      	bne.n	80004a4 <__aeabi_dadd+0x6c>
 8000560:	2200      	movs	r2, #0
 8000562:	2400      	movs	r4, #0
 8000564:	2500      	movs	r5, #0
 8000566:	e070      	b.n	800064a <__aeabi_dadd+0x212>
 8000568:	2b00      	cmp	r3, #0
 800056a:	dc00      	bgt.n	800056e <__aeabi_dadd+0x136>
 800056c:	e0e5      	b.n	800073a <__aeabi_dadd+0x302>
 800056e:	2e00      	cmp	r6, #0
 8000570:	d100      	bne.n	8000574 <__aeabi_dadd+0x13c>
 8000572:	e083      	b.n	800067c <__aeabi_dadd+0x244>
 8000574:	4eaf      	ldr	r6, [pc, #700]	; (8000834 <__aeabi_dadd+0x3fc>)
 8000576:	42b5      	cmp	r5, r6
 8000578:	d060      	beq.n	800063c <__aeabi_dadd+0x204>
 800057a:	2680      	movs	r6, #128	; 0x80
 800057c:	0436      	lsls	r6, r6, #16
 800057e:	4337      	orrs	r7, r6
 8000580:	46b8      	mov	r8, r7
 8000582:	2b38      	cmp	r3, #56	; 0x38
 8000584:	dc00      	bgt.n	8000588 <__aeabi_dadd+0x150>
 8000586:	e13e      	b.n	8000806 <__aeabi_dadd+0x3ce>
 8000588:	4643      	mov	r3, r8
 800058a:	4313      	orrs	r3, r2
 800058c:	001f      	movs	r7, r3
 800058e:	1e7a      	subs	r2, r7, #1
 8000590:	4197      	sbcs	r7, r2
 8000592:	183f      	adds	r7, r7, r0
 8000594:	4287      	cmp	r7, r0
 8000596:	4180      	sbcs	r0, r0
 8000598:	4240      	negs	r0, r0
 800059a:	1809      	adds	r1, r1, r0
 800059c:	020b      	lsls	r3, r1, #8
 800059e:	d400      	bmi.n	80005a2 <__aeabi_dadd+0x16a>
 80005a0:	e0b0      	b.n	8000704 <__aeabi_dadd+0x2cc>
 80005a2:	4ba4      	ldr	r3, [pc, #656]	; (8000834 <__aeabi_dadd+0x3fc>)
 80005a4:	3501      	adds	r5, #1
 80005a6:	429d      	cmp	r5, r3
 80005a8:	d100      	bne.n	80005ac <__aeabi_dadd+0x174>
 80005aa:	e0c3      	b.n	8000734 <__aeabi_dadd+0x2fc>
 80005ac:	4aa2      	ldr	r2, [pc, #648]	; (8000838 <__aeabi_dadd+0x400>)
 80005ae:	087b      	lsrs	r3, r7, #1
 80005b0:	400a      	ands	r2, r1
 80005b2:	2101      	movs	r1, #1
 80005b4:	400f      	ands	r7, r1
 80005b6:	431f      	orrs	r7, r3
 80005b8:	0851      	lsrs	r1, r2, #1
 80005ba:	07d3      	lsls	r3, r2, #31
 80005bc:	2207      	movs	r2, #7
 80005be:	431f      	orrs	r7, r3
 80005c0:	403a      	ands	r2, r7
 80005c2:	e799      	b.n	80004f8 <__aeabi_dadd+0xc0>
 80005c4:	4e9b      	ldr	r6, [pc, #620]	; (8000834 <__aeabi_dadd+0x3fc>)
 80005c6:	42b5      	cmp	r5, r6
 80005c8:	d038      	beq.n	800063c <__aeabi_dadd+0x204>
 80005ca:	2680      	movs	r6, #128	; 0x80
 80005cc:	0436      	lsls	r6, r6, #16
 80005ce:	4337      	orrs	r7, r6
 80005d0:	46b8      	mov	r8, r7
 80005d2:	2b38      	cmp	r3, #56	; 0x38
 80005d4:	dd00      	ble.n	80005d8 <__aeabi_dadd+0x1a0>
 80005d6:	e0dc      	b.n	8000792 <__aeabi_dadd+0x35a>
 80005d8:	2b1f      	cmp	r3, #31
 80005da:	dc00      	bgt.n	80005de <__aeabi_dadd+0x1a6>
 80005dc:	e130      	b.n	8000840 <__aeabi_dadd+0x408>
 80005de:	001e      	movs	r6, r3
 80005e0:	4647      	mov	r7, r8
 80005e2:	3e20      	subs	r6, #32
 80005e4:	40f7      	lsrs	r7, r6
 80005e6:	46bc      	mov	ip, r7
 80005e8:	2b20      	cmp	r3, #32
 80005ea:	d004      	beq.n	80005f6 <__aeabi_dadd+0x1be>
 80005ec:	2640      	movs	r6, #64	; 0x40
 80005ee:	1af3      	subs	r3, r6, r3
 80005f0:	4646      	mov	r6, r8
 80005f2:	409e      	lsls	r6, r3
 80005f4:	4332      	orrs	r2, r6
 80005f6:	0017      	movs	r7, r2
 80005f8:	4663      	mov	r3, ip
 80005fa:	1e7a      	subs	r2, r7, #1
 80005fc:	4197      	sbcs	r7, r2
 80005fe:	431f      	orrs	r7, r3
 8000600:	e0cc      	b.n	800079c <__aeabi_dadd+0x364>
 8000602:	2b00      	cmp	r3, #0
 8000604:	d100      	bne.n	8000608 <__aeabi_dadd+0x1d0>
 8000606:	e204      	b.n	8000a12 <__aeabi_dadd+0x5da>
 8000608:	4643      	mov	r3, r8
 800060a:	4313      	orrs	r3, r2
 800060c:	d100      	bne.n	8000610 <__aeabi_dadd+0x1d8>
 800060e:	e159      	b.n	80008c4 <__aeabi_dadd+0x48c>
 8000610:	074b      	lsls	r3, r1, #29
 8000612:	08c0      	lsrs	r0, r0, #3
 8000614:	4318      	orrs	r0, r3
 8000616:	2380      	movs	r3, #128	; 0x80
 8000618:	08c9      	lsrs	r1, r1, #3
 800061a:	031b      	lsls	r3, r3, #12
 800061c:	4219      	tst	r1, r3
 800061e:	d008      	beq.n	8000632 <__aeabi_dadd+0x1fa>
 8000620:	4645      	mov	r5, r8
 8000622:	08ed      	lsrs	r5, r5, #3
 8000624:	421d      	tst	r5, r3
 8000626:	d104      	bne.n	8000632 <__aeabi_dadd+0x1fa>
 8000628:	4643      	mov	r3, r8
 800062a:	08d0      	lsrs	r0, r2, #3
 800062c:	0759      	lsls	r1, r3, #29
 800062e:	4308      	orrs	r0, r1
 8000630:	0029      	movs	r1, r5
 8000632:	0f42      	lsrs	r2, r0, #29
 8000634:	00c9      	lsls	r1, r1, #3
 8000636:	4d7f      	ldr	r5, [pc, #508]	; (8000834 <__aeabi_dadd+0x3fc>)
 8000638:	4311      	orrs	r1, r2
 800063a:	00c0      	lsls	r0, r0, #3
 800063c:	074b      	lsls	r3, r1, #29
 800063e:	08ca      	lsrs	r2, r1, #3
 8000640:	497c      	ldr	r1, [pc, #496]	; (8000834 <__aeabi_dadd+0x3fc>)
 8000642:	08c0      	lsrs	r0, r0, #3
 8000644:	4303      	orrs	r3, r0
 8000646:	428d      	cmp	r5, r1
 8000648:	d068      	beq.n	800071c <__aeabi_dadd+0x2e4>
 800064a:	0312      	lsls	r2, r2, #12
 800064c:	056d      	lsls	r5, r5, #21
 800064e:	0b12      	lsrs	r2, r2, #12
 8000650:	0d6d      	lsrs	r5, r5, #21
 8000652:	2100      	movs	r1, #0
 8000654:	0312      	lsls	r2, r2, #12
 8000656:	0018      	movs	r0, r3
 8000658:	0b13      	lsrs	r3, r2, #12
 800065a:	0d0a      	lsrs	r2, r1, #20
 800065c:	0512      	lsls	r2, r2, #20
 800065e:	431a      	orrs	r2, r3
 8000660:	4b76      	ldr	r3, [pc, #472]	; (800083c <__aeabi_dadd+0x404>)
 8000662:	052d      	lsls	r5, r5, #20
 8000664:	4013      	ands	r3, r2
 8000666:	432b      	orrs	r3, r5
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	07e4      	lsls	r4, r4, #31
 800066c:	085b      	lsrs	r3, r3, #1
 800066e:	4323      	orrs	r3, r4
 8000670:	0019      	movs	r1, r3
 8000672:	bc1c      	pop	{r2, r3, r4}
 8000674:	4690      	mov	r8, r2
 8000676:	4699      	mov	r9, r3
 8000678:	46a2      	mov	sl, r4
 800067a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800067c:	003e      	movs	r6, r7
 800067e:	4316      	orrs	r6, r2
 8000680:	d012      	beq.n	80006a8 <__aeabi_dadd+0x270>
 8000682:	1e5e      	subs	r6, r3, #1
 8000684:	2e00      	cmp	r6, #0
 8000686:	d000      	beq.n	800068a <__aeabi_dadd+0x252>
 8000688:	e100      	b.n	800088c <__aeabi_dadd+0x454>
 800068a:	1887      	adds	r7, r0, r2
 800068c:	4287      	cmp	r7, r0
 800068e:	4180      	sbcs	r0, r0
 8000690:	4441      	add	r1, r8
 8000692:	4240      	negs	r0, r0
 8000694:	1809      	adds	r1, r1, r0
 8000696:	2501      	movs	r5, #1
 8000698:	020b      	lsls	r3, r1, #8
 800069a:	d533      	bpl.n	8000704 <__aeabi_dadd+0x2cc>
 800069c:	2502      	movs	r5, #2
 800069e:	e785      	b.n	80005ac <__aeabi_dadd+0x174>
 80006a0:	4664      	mov	r4, ip
 80006a2:	0033      	movs	r3, r6
 80006a4:	4641      	mov	r1, r8
 80006a6:	0010      	movs	r0, r2
 80006a8:	001d      	movs	r5, r3
 80006aa:	e7c7      	b.n	800063c <__aeabi_dadd+0x204>
 80006ac:	2d00      	cmp	r5, #0
 80006ae:	d000      	beq.n	80006b2 <__aeabi_dadd+0x27a>
 80006b0:	e0da      	b.n	8000868 <__aeabi_dadd+0x430>
 80006b2:	000c      	movs	r4, r1
 80006b4:	4304      	orrs	r4, r0
 80006b6:	d0f3      	beq.n	80006a0 <__aeabi_dadd+0x268>
 80006b8:	1c5c      	adds	r4, r3, #1
 80006ba:	d100      	bne.n	80006be <__aeabi_dadd+0x286>
 80006bc:	e19f      	b.n	80009fe <__aeabi_dadd+0x5c6>
 80006be:	4c5d      	ldr	r4, [pc, #372]	; (8000834 <__aeabi_dadd+0x3fc>)
 80006c0:	42a6      	cmp	r6, r4
 80006c2:	d100      	bne.n	80006c6 <__aeabi_dadd+0x28e>
 80006c4:	e12f      	b.n	8000926 <__aeabi_dadd+0x4ee>
 80006c6:	43db      	mvns	r3, r3
 80006c8:	2b38      	cmp	r3, #56	; 0x38
 80006ca:	dd00      	ble.n	80006ce <__aeabi_dadd+0x296>
 80006cc:	e166      	b.n	800099c <__aeabi_dadd+0x564>
 80006ce:	2b1f      	cmp	r3, #31
 80006d0:	dd00      	ble.n	80006d4 <__aeabi_dadd+0x29c>
 80006d2:	e183      	b.n	80009dc <__aeabi_dadd+0x5a4>
 80006d4:	2420      	movs	r4, #32
 80006d6:	0005      	movs	r5, r0
 80006d8:	1ae4      	subs	r4, r4, r3
 80006da:	000f      	movs	r7, r1
 80006dc:	40dd      	lsrs	r5, r3
 80006de:	40d9      	lsrs	r1, r3
 80006e0:	40a0      	lsls	r0, r4
 80006e2:	4643      	mov	r3, r8
 80006e4:	40a7      	lsls	r7, r4
 80006e6:	1a5b      	subs	r3, r3, r1
 80006e8:	1e44      	subs	r4, r0, #1
 80006ea:	41a0      	sbcs	r0, r4
 80006ec:	4698      	mov	r8, r3
 80006ee:	432f      	orrs	r7, r5
 80006f0:	4338      	orrs	r0, r7
 80006f2:	1a17      	subs	r7, r2, r0
 80006f4:	42ba      	cmp	r2, r7
 80006f6:	4192      	sbcs	r2, r2
 80006f8:	4643      	mov	r3, r8
 80006fa:	4252      	negs	r2, r2
 80006fc:	1a99      	subs	r1, r3, r2
 80006fe:	4664      	mov	r4, ip
 8000700:	0035      	movs	r5, r6
 8000702:	e6ca      	b.n	800049a <__aeabi_dadd+0x62>
 8000704:	2207      	movs	r2, #7
 8000706:	403a      	ands	r2, r7
 8000708:	2a00      	cmp	r2, #0
 800070a:	d000      	beq.n	800070e <__aeabi_dadd+0x2d6>
 800070c:	e6f6      	b.n	80004fc <__aeabi_dadd+0xc4>
 800070e:	074b      	lsls	r3, r1, #29
 8000710:	08ca      	lsrs	r2, r1, #3
 8000712:	4948      	ldr	r1, [pc, #288]	; (8000834 <__aeabi_dadd+0x3fc>)
 8000714:	08ff      	lsrs	r7, r7, #3
 8000716:	433b      	orrs	r3, r7
 8000718:	428d      	cmp	r5, r1
 800071a:	d196      	bne.n	800064a <__aeabi_dadd+0x212>
 800071c:	0019      	movs	r1, r3
 800071e:	4311      	orrs	r1, r2
 8000720:	d100      	bne.n	8000724 <__aeabi_dadd+0x2ec>
 8000722:	e19e      	b.n	8000a62 <__aeabi_dadd+0x62a>
 8000724:	2180      	movs	r1, #128	; 0x80
 8000726:	0309      	lsls	r1, r1, #12
 8000728:	430a      	orrs	r2, r1
 800072a:	0312      	lsls	r2, r2, #12
 800072c:	0b12      	lsrs	r2, r2, #12
 800072e:	4d41      	ldr	r5, [pc, #260]	; (8000834 <__aeabi_dadd+0x3fc>)
 8000730:	e78f      	b.n	8000652 <__aeabi_dadd+0x21a>
 8000732:	0015      	movs	r5, r2
 8000734:	2200      	movs	r2, #0
 8000736:	2300      	movs	r3, #0
 8000738:	e78b      	b.n	8000652 <__aeabi_dadd+0x21a>
 800073a:	2b00      	cmp	r3, #0
 800073c:	d000      	beq.n	8000740 <__aeabi_dadd+0x308>
 800073e:	e0c7      	b.n	80008d0 <__aeabi_dadd+0x498>
 8000740:	1c6b      	adds	r3, r5, #1
 8000742:	055f      	lsls	r7, r3, #21
 8000744:	0d7f      	lsrs	r7, r7, #21
 8000746:	2f01      	cmp	r7, #1
 8000748:	dc00      	bgt.n	800074c <__aeabi_dadd+0x314>
 800074a:	e0f1      	b.n	8000930 <__aeabi_dadd+0x4f8>
 800074c:	4d39      	ldr	r5, [pc, #228]	; (8000834 <__aeabi_dadd+0x3fc>)
 800074e:	42ab      	cmp	r3, r5
 8000750:	d100      	bne.n	8000754 <__aeabi_dadd+0x31c>
 8000752:	e0b9      	b.n	80008c8 <__aeabi_dadd+0x490>
 8000754:	1885      	adds	r5, r0, r2
 8000756:	000a      	movs	r2, r1
 8000758:	4285      	cmp	r5, r0
 800075a:	4189      	sbcs	r1, r1
 800075c:	4442      	add	r2, r8
 800075e:	4249      	negs	r1, r1
 8000760:	1851      	adds	r1, r2, r1
 8000762:	2207      	movs	r2, #7
 8000764:	07cf      	lsls	r7, r1, #31
 8000766:	086d      	lsrs	r5, r5, #1
 8000768:	432f      	orrs	r7, r5
 800076a:	0849      	lsrs	r1, r1, #1
 800076c:	403a      	ands	r2, r7
 800076e:	001d      	movs	r5, r3
 8000770:	e6c2      	b.n	80004f8 <__aeabi_dadd+0xc0>
 8000772:	2207      	movs	r2, #7
 8000774:	4930      	ldr	r1, [pc, #192]	; (8000838 <__aeabi_dadd+0x400>)
 8000776:	1aed      	subs	r5, r5, r3
 8000778:	4031      	ands	r1, r6
 800077a:	403a      	ands	r2, r7
 800077c:	e6bc      	b.n	80004f8 <__aeabi_dadd+0xc0>
 800077e:	003e      	movs	r6, r7
 8000780:	3828      	subs	r0, #40	; 0x28
 8000782:	4086      	lsls	r6, r0
 8000784:	2700      	movs	r7, #0
 8000786:	e69f      	b.n	80004c8 <__aeabi_dadd+0x90>
 8000788:	0038      	movs	r0, r7
 800078a:	f000 fff5 	bl	8001778 <__clzsi2>
 800078e:	3020      	adds	r0, #32
 8000790:	e68e      	b.n	80004b0 <__aeabi_dadd+0x78>
 8000792:	4643      	mov	r3, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	001f      	movs	r7, r3
 8000798:	1e7a      	subs	r2, r7, #1
 800079a:	4197      	sbcs	r7, r2
 800079c:	1bc7      	subs	r7, r0, r7
 800079e:	42b8      	cmp	r0, r7
 80007a0:	4180      	sbcs	r0, r0
 80007a2:	4240      	negs	r0, r0
 80007a4:	1a09      	subs	r1, r1, r0
 80007a6:	e678      	b.n	800049a <__aeabi_dadd+0x62>
 80007a8:	000e      	movs	r6, r1
 80007aa:	003b      	movs	r3, r7
 80007ac:	4306      	orrs	r6, r0
 80007ae:	4313      	orrs	r3, r2
 80007b0:	2d00      	cmp	r5, #0
 80007b2:	d161      	bne.n	8000878 <__aeabi_dadd+0x440>
 80007b4:	2e00      	cmp	r6, #0
 80007b6:	d000      	beq.n	80007ba <__aeabi_dadd+0x382>
 80007b8:	e0f4      	b.n	80009a4 <__aeabi_dadd+0x56c>
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d100      	bne.n	80007c0 <__aeabi_dadd+0x388>
 80007be:	e11b      	b.n	80009f8 <__aeabi_dadd+0x5c0>
 80007c0:	4664      	mov	r4, ip
 80007c2:	0039      	movs	r1, r7
 80007c4:	0010      	movs	r0, r2
 80007c6:	e739      	b.n	800063c <__aeabi_dadd+0x204>
 80007c8:	4f1a      	ldr	r7, [pc, #104]	; (8000834 <__aeabi_dadd+0x3fc>)
 80007ca:	42bb      	cmp	r3, r7
 80007cc:	d07a      	beq.n	80008c4 <__aeabi_dadd+0x48c>
 80007ce:	0033      	movs	r3, r6
 80007d0:	e6ff      	b.n	80005d2 <__aeabi_dadd+0x19a>
 80007d2:	0030      	movs	r0, r6
 80007d4:	3d1f      	subs	r5, #31
 80007d6:	40e8      	lsrs	r0, r5
 80007d8:	2b20      	cmp	r3, #32
 80007da:	d003      	beq.n	80007e4 <__aeabi_dadd+0x3ac>
 80007dc:	2140      	movs	r1, #64	; 0x40
 80007de:	1acb      	subs	r3, r1, r3
 80007e0:	409e      	lsls	r6, r3
 80007e2:	4337      	orrs	r7, r6
 80007e4:	1e7b      	subs	r3, r7, #1
 80007e6:	419f      	sbcs	r7, r3
 80007e8:	2207      	movs	r2, #7
 80007ea:	4307      	orrs	r7, r0
 80007ec:	403a      	ands	r2, r7
 80007ee:	2100      	movs	r1, #0
 80007f0:	2500      	movs	r5, #0
 80007f2:	e789      	b.n	8000708 <__aeabi_dadd+0x2d0>
 80007f4:	1a17      	subs	r7, r2, r0
 80007f6:	4643      	mov	r3, r8
 80007f8:	42ba      	cmp	r2, r7
 80007fa:	41b6      	sbcs	r6, r6
 80007fc:	1a59      	subs	r1, r3, r1
 80007fe:	4276      	negs	r6, r6
 8000800:	1b8e      	subs	r6, r1, r6
 8000802:	4664      	mov	r4, ip
 8000804:	e64e      	b.n	80004a4 <__aeabi_dadd+0x6c>
 8000806:	2b1f      	cmp	r3, #31
 8000808:	dd00      	ble.n	800080c <__aeabi_dadd+0x3d4>
 800080a:	e0ad      	b.n	8000968 <__aeabi_dadd+0x530>
 800080c:	2620      	movs	r6, #32
 800080e:	4647      	mov	r7, r8
 8000810:	1af6      	subs	r6, r6, r3
 8000812:	40b7      	lsls	r7, r6
 8000814:	46b9      	mov	r9, r7
 8000816:	0017      	movs	r7, r2
 8000818:	46b2      	mov	sl, r6
 800081a:	40df      	lsrs	r7, r3
 800081c:	464e      	mov	r6, r9
 800081e:	433e      	orrs	r6, r7
 8000820:	0037      	movs	r7, r6
 8000822:	4656      	mov	r6, sl
 8000824:	40b2      	lsls	r2, r6
 8000826:	1e56      	subs	r6, r2, #1
 8000828:	41b2      	sbcs	r2, r6
 800082a:	4317      	orrs	r7, r2
 800082c:	4642      	mov	r2, r8
 800082e:	40da      	lsrs	r2, r3
 8000830:	1889      	adds	r1, r1, r2
 8000832:	e6ae      	b.n	8000592 <__aeabi_dadd+0x15a>
 8000834:	000007ff 	.word	0x000007ff
 8000838:	ff7fffff 	.word	0xff7fffff
 800083c:	800fffff 	.word	0x800fffff
 8000840:	2620      	movs	r6, #32
 8000842:	4647      	mov	r7, r8
 8000844:	1af6      	subs	r6, r6, r3
 8000846:	40b7      	lsls	r7, r6
 8000848:	46b9      	mov	r9, r7
 800084a:	0017      	movs	r7, r2
 800084c:	46b2      	mov	sl, r6
 800084e:	40df      	lsrs	r7, r3
 8000850:	464e      	mov	r6, r9
 8000852:	433e      	orrs	r6, r7
 8000854:	0037      	movs	r7, r6
 8000856:	4656      	mov	r6, sl
 8000858:	40b2      	lsls	r2, r6
 800085a:	1e56      	subs	r6, r2, #1
 800085c:	41b2      	sbcs	r2, r6
 800085e:	4317      	orrs	r7, r2
 8000860:	4642      	mov	r2, r8
 8000862:	40da      	lsrs	r2, r3
 8000864:	1a89      	subs	r1, r1, r2
 8000866:	e799      	b.n	800079c <__aeabi_dadd+0x364>
 8000868:	4c7f      	ldr	r4, [pc, #508]	; (8000a68 <__aeabi_dadd+0x630>)
 800086a:	42a6      	cmp	r6, r4
 800086c:	d05b      	beq.n	8000926 <__aeabi_dadd+0x4ee>
 800086e:	2480      	movs	r4, #128	; 0x80
 8000870:	0424      	lsls	r4, r4, #16
 8000872:	425b      	negs	r3, r3
 8000874:	4321      	orrs	r1, r4
 8000876:	e727      	b.n	80006c8 <__aeabi_dadd+0x290>
 8000878:	2e00      	cmp	r6, #0
 800087a:	d10c      	bne.n	8000896 <__aeabi_dadd+0x45e>
 800087c:	2b00      	cmp	r3, #0
 800087e:	d100      	bne.n	8000882 <__aeabi_dadd+0x44a>
 8000880:	e0cb      	b.n	8000a1a <__aeabi_dadd+0x5e2>
 8000882:	4664      	mov	r4, ip
 8000884:	0039      	movs	r1, r7
 8000886:	0010      	movs	r0, r2
 8000888:	4d77      	ldr	r5, [pc, #476]	; (8000a68 <__aeabi_dadd+0x630>)
 800088a:	e6d7      	b.n	800063c <__aeabi_dadd+0x204>
 800088c:	4f76      	ldr	r7, [pc, #472]	; (8000a68 <__aeabi_dadd+0x630>)
 800088e:	42bb      	cmp	r3, r7
 8000890:	d018      	beq.n	80008c4 <__aeabi_dadd+0x48c>
 8000892:	0033      	movs	r3, r6
 8000894:	e675      	b.n	8000582 <__aeabi_dadd+0x14a>
 8000896:	2b00      	cmp	r3, #0
 8000898:	d014      	beq.n	80008c4 <__aeabi_dadd+0x48c>
 800089a:	074b      	lsls	r3, r1, #29
 800089c:	08c0      	lsrs	r0, r0, #3
 800089e:	4318      	orrs	r0, r3
 80008a0:	2380      	movs	r3, #128	; 0x80
 80008a2:	08c9      	lsrs	r1, r1, #3
 80008a4:	031b      	lsls	r3, r3, #12
 80008a6:	4219      	tst	r1, r3
 80008a8:	d007      	beq.n	80008ba <__aeabi_dadd+0x482>
 80008aa:	08fc      	lsrs	r4, r7, #3
 80008ac:	421c      	tst	r4, r3
 80008ae:	d104      	bne.n	80008ba <__aeabi_dadd+0x482>
 80008b0:	0779      	lsls	r1, r7, #29
 80008b2:	08d0      	lsrs	r0, r2, #3
 80008b4:	4308      	orrs	r0, r1
 80008b6:	46e1      	mov	r9, ip
 80008b8:	0021      	movs	r1, r4
 80008ba:	464c      	mov	r4, r9
 80008bc:	0f42      	lsrs	r2, r0, #29
 80008be:	00c9      	lsls	r1, r1, #3
 80008c0:	4311      	orrs	r1, r2
 80008c2:	00c0      	lsls	r0, r0, #3
 80008c4:	4d68      	ldr	r5, [pc, #416]	; (8000a68 <__aeabi_dadd+0x630>)
 80008c6:	e6b9      	b.n	800063c <__aeabi_dadd+0x204>
 80008c8:	001d      	movs	r5, r3
 80008ca:	2200      	movs	r2, #0
 80008cc:	2300      	movs	r3, #0
 80008ce:	e6c0      	b.n	8000652 <__aeabi_dadd+0x21a>
 80008d0:	2d00      	cmp	r5, #0
 80008d2:	d15b      	bne.n	800098c <__aeabi_dadd+0x554>
 80008d4:	000d      	movs	r5, r1
 80008d6:	4305      	orrs	r5, r0
 80008d8:	d100      	bne.n	80008dc <__aeabi_dadd+0x4a4>
 80008da:	e6e2      	b.n	80006a2 <__aeabi_dadd+0x26a>
 80008dc:	1c5d      	adds	r5, r3, #1
 80008de:	d100      	bne.n	80008e2 <__aeabi_dadd+0x4aa>
 80008e0:	e0b0      	b.n	8000a44 <__aeabi_dadd+0x60c>
 80008e2:	4d61      	ldr	r5, [pc, #388]	; (8000a68 <__aeabi_dadd+0x630>)
 80008e4:	42ae      	cmp	r6, r5
 80008e6:	d01f      	beq.n	8000928 <__aeabi_dadd+0x4f0>
 80008e8:	43db      	mvns	r3, r3
 80008ea:	2b38      	cmp	r3, #56	; 0x38
 80008ec:	dc71      	bgt.n	80009d2 <__aeabi_dadd+0x59a>
 80008ee:	2b1f      	cmp	r3, #31
 80008f0:	dd00      	ble.n	80008f4 <__aeabi_dadd+0x4bc>
 80008f2:	e096      	b.n	8000a22 <__aeabi_dadd+0x5ea>
 80008f4:	2520      	movs	r5, #32
 80008f6:	000f      	movs	r7, r1
 80008f8:	1aed      	subs	r5, r5, r3
 80008fa:	40af      	lsls	r7, r5
 80008fc:	46b9      	mov	r9, r7
 80008fe:	0007      	movs	r7, r0
 8000900:	46aa      	mov	sl, r5
 8000902:	40df      	lsrs	r7, r3
 8000904:	464d      	mov	r5, r9
 8000906:	433d      	orrs	r5, r7
 8000908:	002f      	movs	r7, r5
 800090a:	4655      	mov	r5, sl
 800090c:	40a8      	lsls	r0, r5
 800090e:	40d9      	lsrs	r1, r3
 8000910:	1e45      	subs	r5, r0, #1
 8000912:	41a8      	sbcs	r0, r5
 8000914:	4488      	add	r8, r1
 8000916:	4307      	orrs	r7, r0
 8000918:	18bf      	adds	r7, r7, r2
 800091a:	4297      	cmp	r7, r2
 800091c:	4192      	sbcs	r2, r2
 800091e:	4251      	negs	r1, r2
 8000920:	4441      	add	r1, r8
 8000922:	0035      	movs	r5, r6
 8000924:	e63a      	b.n	800059c <__aeabi_dadd+0x164>
 8000926:	4664      	mov	r4, ip
 8000928:	0035      	movs	r5, r6
 800092a:	4641      	mov	r1, r8
 800092c:	0010      	movs	r0, r2
 800092e:	e685      	b.n	800063c <__aeabi_dadd+0x204>
 8000930:	000b      	movs	r3, r1
 8000932:	4303      	orrs	r3, r0
 8000934:	2d00      	cmp	r5, #0
 8000936:	d000      	beq.n	800093a <__aeabi_dadd+0x502>
 8000938:	e663      	b.n	8000602 <__aeabi_dadd+0x1ca>
 800093a:	2b00      	cmp	r3, #0
 800093c:	d0f5      	beq.n	800092a <__aeabi_dadd+0x4f2>
 800093e:	4643      	mov	r3, r8
 8000940:	4313      	orrs	r3, r2
 8000942:	d100      	bne.n	8000946 <__aeabi_dadd+0x50e>
 8000944:	e67a      	b.n	800063c <__aeabi_dadd+0x204>
 8000946:	1887      	adds	r7, r0, r2
 8000948:	4287      	cmp	r7, r0
 800094a:	4180      	sbcs	r0, r0
 800094c:	2207      	movs	r2, #7
 800094e:	4441      	add	r1, r8
 8000950:	4240      	negs	r0, r0
 8000952:	1809      	adds	r1, r1, r0
 8000954:	403a      	ands	r2, r7
 8000956:	020b      	lsls	r3, r1, #8
 8000958:	d400      	bmi.n	800095c <__aeabi_dadd+0x524>
 800095a:	e6d5      	b.n	8000708 <__aeabi_dadd+0x2d0>
 800095c:	4b43      	ldr	r3, [pc, #268]	; (8000a6c <__aeabi_dadd+0x634>)
 800095e:	3501      	adds	r5, #1
 8000960:	4019      	ands	r1, r3
 8000962:	e5c9      	b.n	80004f8 <__aeabi_dadd+0xc0>
 8000964:	0038      	movs	r0, r7
 8000966:	e669      	b.n	800063c <__aeabi_dadd+0x204>
 8000968:	001e      	movs	r6, r3
 800096a:	4647      	mov	r7, r8
 800096c:	3e20      	subs	r6, #32
 800096e:	40f7      	lsrs	r7, r6
 8000970:	46bc      	mov	ip, r7
 8000972:	2b20      	cmp	r3, #32
 8000974:	d004      	beq.n	8000980 <__aeabi_dadd+0x548>
 8000976:	2640      	movs	r6, #64	; 0x40
 8000978:	1af3      	subs	r3, r6, r3
 800097a:	4646      	mov	r6, r8
 800097c:	409e      	lsls	r6, r3
 800097e:	4332      	orrs	r2, r6
 8000980:	0017      	movs	r7, r2
 8000982:	4663      	mov	r3, ip
 8000984:	1e7a      	subs	r2, r7, #1
 8000986:	4197      	sbcs	r7, r2
 8000988:	431f      	orrs	r7, r3
 800098a:	e602      	b.n	8000592 <__aeabi_dadd+0x15a>
 800098c:	4d36      	ldr	r5, [pc, #216]	; (8000a68 <__aeabi_dadd+0x630>)
 800098e:	42ae      	cmp	r6, r5
 8000990:	d0ca      	beq.n	8000928 <__aeabi_dadd+0x4f0>
 8000992:	2580      	movs	r5, #128	; 0x80
 8000994:	042d      	lsls	r5, r5, #16
 8000996:	425b      	negs	r3, r3
 8000998:	4329      	orrs	r1, r5
 800099a:	e7a6      	b.n	80008ea <__aeabi_dadd+0x4b2>
 800099c:	4308      	orrs	r0, r1
 800099e:	1e41      	subs	r1, r0, #1
 80009a0:	4188      	sbcs	r0, r1
 80009a2:	e6a6      	b.n	80006f2 <__aeabi_dadd+0x2ba>
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d100      	bne.n	80009aa <__aeabi_dadd+0x572>
 80009a8:	e648      	b.n	800063c <__aeabi_dadd+0x204>
 80009aa:	1a87      	subs	r7, r0, r2
 80009ac:	4643      	mov	r3, r8
 80009ae:	42b8      	cmp	r0, r7
 80009b0:	41b6      	sbcs	r6, r6
 80009b2:	1acb      	subs	r3, r1, r3
 80009b4:	4276      	negs	r6, r6
 80009b6:	1b9e      	subs	r6, r3, r6
 80009b8:	0233      	lsls	r3, r6, #8
 80009ba:	d54b      	bpl.n	8000a54 <__aeabi_dadd+0x61c>
 80009bc:	1a17      	subs	r7, r2, r0
 80009be:	4643      	mov	r3, r8
 80009c0:	42ba      	cmp	r2, r7
 80009c2:	4192      	sbcs	r2, r2
 80009c4:	1a59      	subs	r1, r3, r1
 80009c6:	4252      	negs	r2, r2
 80009c8:	1a89      	subs	r1, r1, r2
 80009ca:	2207      	movs	r2, #7
 80009cc:	4664      	mov	r4, ip
 80009ce:	403a      	ands	r2, r7
 80009d0:	e592      	b.n	80004f8 <__aeabi_dadd+0xc0>
 80009d2:	4301      	orrs	r1, r0
 80009d4:	000f      	movs	r7, r1
 80009d6:	1e79      	subs	r1, r7, #1
 80009d8:	418f      	sbcs	r7, r1
 80009da:	e79d      	b.n	8000918 <__aeabi_dadd+0x4e0>
 80009dc:	001c      	movs	r4, r3
 80009de:	000f      	movs	r7, r1
 80009e0:	3c20      	subs	r4, #32
 80009e2:	40e7      	lsrs	r7, r4
 80009e4:	2b20      	cmp	r3, #32
 80009e6:	d003      	beq.n	80009f0 <__aeabi_dadd+0x5b8>
 80009e8:	2440      	movs	r4, #64	; 0x40
 80009ea:	1ae3      	subs	r3, r4, r3
 80009ec:	4099      	lsls	r1, r3
 80009ee:	4308      	orrs	r0, r1
 80009f0:	1e41      	subs	r1, r0, #1
 80009f2:	4188      	sbcs	r0, r1
 80009f4:	4338      	orrs	r0, r7
 80009f6:	e67c      	b.n	80006f2 <__aeabi_dadd+0x2ba>
 80009f8:	2200      	movs	r2, #0
 80009fa:	2400      	movs	r4, #0
 80009fc:	e625      	b.n	800064a <__aeabi_dadd+0x212>
 80009fe:	1a17      	subs	r7, r2, r0
 8000a00:	4643      	mov	r3, r8
 8000a02:	42ba      	cmp	r2, r7
 8000a04:	4192      	sbcs	r2, r2
 8000a06:	1a59      	subs	r1, r3, r1
 8000a08:	4252      	negs	r2, r2
 8000a0a:	1a89      	subs	r1, r1, r2
 8000a0c:	4664      	mov	r4, ip
 8000a0e:	0035      	movs	r5, r6
 8000a10:	e543      	b.n	800049a <__aeabi_dadd+0x62>
 8000a12:	4641      	mov	r1, r8
 8000a14:	0010      	movs	r0, r2
 8000a16:	4d14      	ldr	r5, [pc, #80]	; (8000a68 <__aeabi_dadd+0x630>)
 8000a18:	e610      	b.n	800063c <__aeabi_dadd+0x204>
 8000a1a:	2280      	movs	r2, #128	; 0x80
 8000a1c:	2400      	movs	r4, #0
 8000a1e:	0312      	lsls	r2, r2, #12
 8000a20:	e680      	b.n	8000724 <__aeabi_dadd+0x2ec>
 8000a22:	001d      	movs	r5, r3
 8000a24:	000f      	movs	r7, r1
 8000a26:	3d20      	subs	r5, #32
 8000a28:	40ef      	lsrs	r7, r5
 8000a2a:	46bc      	mov	ip, r7
 8000a2c:	2b20      	cmp	r3, #32
 8000a2e:	d003      	beq.n	8000a38 <__aeabi_dadd+0x600>
 8000a30:	2540      	movs	r5, #64	; 0x40
 8000a32:	1aeb      	subs	r3, r5, r3
 8000a34:	4099      	lsls	r1, r3
 8000a36:	4308      	orrs	r0, r1
 8000a38:	0007      	movs	r7, r0
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	1e78      	subs	r0, r7, #1
 8000a3e:	4187      	sbcs	r7, r0
 8000a40:	431f      	orrs	r7, r3
 8000a42:	e769      	b.n	8000918 <__aeabi_dadd+0x4e0>
 8000a44:	1887      	adds	r7, r0, r2
 8000a46:	4297      	cmp	r7, r2
 8000a48:	419b      	sbcs	r3, r3
 8000a4a:	4441      	add	r1, r8
 8000a4c:	425b      	negs	r3, r3
 8000a4e:	18c9      	adds	r1, r1, r3
 8000a50:	0035      	movs	r5, r6
 8000a52:	e5a3      	b.n	800059c <__aeabi_dadd+0x164>
 8000a54:	003b      	movs	r3, r7
 8000a56:	4333      	orrs	r3, r6
 8000a58:	d0ce      	beq.n	80009f8 <__aeabi_dadd+0x5c0>
 8000a5a:	2207      	movs	r2, #7
 8000a5c:	0031      	movs	r1, r6
 8000a5e:	403a      	ands	r2, r7
 8000a60:	e652      	b.n	8000708 <__aeabi_dadd+0x2d0>
 8000a62:	2300      	movs	r3, #0
 8000a64:	001a      	movs	r2, r3
 8000a66:	e5f4      	b.n	8000652 <__aeabi_dadd+0x21a>
 8000a68:	000007ff 	.word	0x000007ff
 8000a6c:	ff7fffff 	.word	0xff7fffff

08000a70 <__aeabi_ddiv>:
 8000a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a72:	4657      	mov	r7, sl
 8000a74:	46de      	mov	lr, fp
 8000a76:	464e      	mov	r6, r9
 8000a78:	4645      	mov	r5, r8
 8000a7a:	b5e0      	push	{r5, r6, r7, lr}
 8000a7c:	4683      	mov	fp, r0
 8000a7e:	0007      	movs	r7, r0
 8000a80:	030e      	lsls	r6, r1, #12
 8000a82:	0048      	lsls	r0, r1, #1
 8000a84:	b085      	sub	sp, #20
 8000a86:	4692      	mov	sl, r2
 8000a88:	001c      	movs	r4, r3
 8000a8a:	0b36      	lsrs	r6, r6, #12
 8000a8c:	0d40      	lsrs	r0, r0, #21
 8000a8e:	0fcd      	lsrs	r5, r1, #31
 8000a90:	2800      	cmp	r0, #0
 8000a92:	d100      	bne.n	8000a96 <__aeabi_ddiv+0x26>
 8000a94:	e09d      	b.n	8000bd2 <__aeabi_ddiv+0x162>
 8000a96:	4b95      	ldr	r3, [pc, #596]	; (8000cec <__aeabi_ddiv+0x27c>)
 8000a98:	4298      	cmp	r0, r3
 8000a9a:	d039      	beq.n	8000b10 <__aeabi_ddiv+0xa0>
 8000a9c:	2380      	movs	r3, #128	; 0x80
 8000a9e:	00f6      	lsls	r6, r6, #3
 8000aa0:	041b      	lsls	r3, r3, #16
 8000aa2:	431e      	orrs	r6, r3
 8000aa4:	4a92      	ldr	r2, [pc, #584]	; (8000cf0 <__aeabi_ddiv+0x280>)
 8000aa6:	0f7b      	lsrs	r3, r7, #29
 8000aa8:	4333      	orrs	r3, r6
 8000aaa:	4699      	mov	r9, r3
 8000aac:	4694      	mov	ip, r2
 8000aae:	0003      	movs	r3, r0
 8000ab0:	4463      	add	r3, ip
 8000ab2:	9300      	str	r3, [sp, #0]
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	2600      	movs	r6, #0
 8000ab8:	00ff      	lsls	r7, r7, #3
 8000aba:	9302      	str	r3, [sp, #8]
 8000abc:	0323      	lsls	r3, r4, #12
 8000abe:	0b1b      	lsrs	r3, r3, #12
 8000ac0:	4698      	mov	r8, r3
 8000ac2:	0063      	lsls	r3, r4, #1
 8000ac4:	0fe4      	lsrs	r4, r4, #31
 8000ac6:	4652      	mov	r2, sl
 8000ac8:	0d5b      	lsrs	r3, r3, #21
 8000aca:	9401      	str	r4, [sp, #4]
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_ddiv+0x60>
 8000ace:	e0b3      	b.n	8000c38 <__aeabi_ddiv+0x1c8>
 8000ad0:	4986      	ldr	r1, [pc, #536]	; (8000cec <__aeabi_ddiv+0x27c>)
 8000ad2:	428b      	cmp	r3, r1
 8000ad4:	d100      	bne.n	8000ad8 <__aeabi_ddiv+0x68>
 8000ad6:	e09e      	b.n	8000c16 <__aeabi_ddiv+0x1a6>
 8000ad8:	4642      	mov	r2, r8
 8000ada:	00d1      	lsls	r1, r2, #3
 8000adc:	2280      	movs	r2, #128	; 0x80
 8000ade:	0412      	lsls	r2, r2, #16
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	4651      	mov	r1, sl
 8000ae4:	0f49      	lsrs	r1, r1, #29
 8000ae6:	4311      	orrs	r1, r2
 8000ae8:	468b      	mov	fp, r1
 8000aea:	4981      	ldr	r1, [pc, #516]	; (8000cf0 <__aeabi_ddiv+0x280>)
 8000aec:	4652      	mov	r2, sl
 8000aee:	468c      	mov	ip, r1
 8000af0:	9900      	ldr	r1, [sp, #0]
 8000af2:	4463      	add	r3, ip
 8000af4:	1acb      	subs	r3, r1, r3
 8000af6:	2100      	movs	r1, #0
 8000af8:	00d2      	lsls	r2, r2, #3
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	002b      	movs	r3, r5
 8000afe:	4063      	eors	r3, r4
 8000b00:	469a      	mov	sl, r3
 8000b02:	2e0f      	cmp	r6, #15
 8000b04:	d900      	bls.n	8000b08 <__aeabi_ddiv+0x98>
 8000b06:	e105      	b.n	8000d14 <__aeabi_ddiv+0x2a4>
 8000b08:	4b7a      	ldr	r3, [pc, #488]	; (8000cf4 <__aeabi_ddiv+0x284>)
 8000b0a:	00b6      	lsls	r6, r6, #2
 8000b0c:	599b      	ldr	r3, [r3, r6]
 8000b0e:	469f      	mov	pc, r3
 8000b10:	465b      	mov	r3, fp
 8000b12:	4333      	orrs	r3, r6
 8000b14:	4699      	mov	r9, r3
 8000b16:	d000      	beq.n	8000b1a <__aeabi_ddiv+0xaa>
 8000b18:	e0b8      	b.n	8000c8c <__aeabi_ddiv+0x21c>
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	2608      	movs	r6, #8
 8000b1e:	2700      	movs	r7, #0
 8000b20:	9000      	str	r0, [sp, #0]
 8000b22:	9302      	str	r3, [sp, #8]
 8000b24:	e7ca      	b.n	8000abc <__aeabi_ddiv+0x4c>
 8000b26:	46cb      	mov	fp, r9
 8000b28:	003a      	movs	r2, r7
 8000b2a:	9902      	ldr	r1, [sp, #8]
 8000b2c:	9501      	str	r5, [sp, #4]
 8000b2e:	9b01      	ldr	r3, [sp, #4]
 8000b30:	469a      	mov	sl, r3
 8000b32:	2902      	cmp	r1, #2
 8000b34:	d027      	beq.n	8000b86 <__aeabi_ddiv+0x116>
 8000b36:	2903      	cmp	r1, #3
 8000b38:	d100      	bne.n	8000b3c <__aeabi_ddiv+0xcc>
 8000b3a:	e280      	b.n	800103e <__aeabi_ddiv+0x5ce>
 8000b3c:	2901      	cmp	r1, #1
 8000b3e:	d044      	beq.n	8000bca <__aeabi_ddiv+0x15a>
 8000b40:	496d      	ldr	r1, [pc, #436]	; (8000cf8 <__aeabi_ddiv+0x288>)
 8000b42:	9b00      	ldr	r3, [sp, #0]
 8000b44:	468c      	mov	ip, r1
 8000b46:	4463      	add	r3, ip
 8000b48:	001c      	movs	r4, r3
 8000b4a:	2c00      	cmp	r4, #0
 8000b4c:	dd38      	ble.n	8000bc0 <__aeabi_ddiv+0x150>
 8000b4e:	0753      	lsls	r3, r2, #29
 8000b50:	d000      	beq.n	8000b54 <__aeabi_ddiv+0xe4>
 8000b52:	e213      	b.n	8000f7c <__aeabi_ddiv+0x50c>
 8000b54:	08d2      	lsrs	r2, r2, #3
 8000b56:	465b      	mov	r3, fp
 8000b58:	01db      	lsls	r3, r3, #7
 8000b5a:	d509      	bpl.n	8000b70 <__aeabi_ddiv+0x100>
 8000b5c:	4659      	mov	r1, fp
 8000b5e:	4b67      	ldr	r3, [pc, #412]	; (8000cfc <__aeabi_ddiv+0x28c>)
 8000b60:	4019      	ands	r1, r3
 8000b62:	468b      	mov	fp, r1
 8000b64:	2180      	movs	r1, #128	; 0x80
 8000b66:	00c9      	lsls	r1, r1, #3
 8000b68:	468c      	mov	ip, r1
 8000b6a:	9b00      	ldr	r3, [sp, #0]
 8000b6c:	4463      	add	r3, ip
 8000b6e:	001c      	movs	r4, r3
 8000b70:	4b63      	ldr	r3, [pc, #396]	; (8000d00 <__aeabi_ddiv+0x290>)
 8000b72:	429c      	cmp	r4, r3
 8000b74:	dc07      	bgt.n	8000b86 <__aeabi_ddiv+0x116>
 8000b76:	465b      	mov	r3, fp
 8000b78:	0564      	lsls	r4, r4, #21
 8000b7a:	075f      	lsls	r7, r3, #29
 8000b7c:	025b      	lsls	r3, r3, #9
 8000b7e:	4317      	orrs	r7, r2
 8000b80:	0b1b      	lsrs	r3, r3, #12
 8000b82:	0d62      	lsrs	r2, r4, #21
 8000b84:	e002      	b.n	8000b8c <__aeabi_ddiv+0x11c>
 8000b86:	2300      	movs	r3, #0
 8000b88:	2700      	movs	r7, #0
 8000b8a:	4a58      	ldr	r2, [pc, #352]	; (8000cec <__aeabi_ddiv+0x27c>)
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	031b      	lsls	r3, r3, #12
 8000b90:	0b1c      	lsrs	r4, r3, #12
 8000b92:	0d0b      	lsrs	r3, r1, #20
 8000b94:	051b      	lsls	r3, r3, #20
 8000b96:	4323      	orrs	r3, r4
 8000b98:	0514      	lsls	r4, r2, #20
 8000b9a:	4a5a      	ldr	r2, [pc, #360]	; (8000d04 <__aeabi_ddiv+0x294>)
 8000b9c:	0038      	movs	r0, r7
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	431c      	orrs	r4, r3
 8000ba2:	4653      	mov	r3, sl
 8000ba4:	0064      	lsls	r4, r4, #1
 8000ba6:	07db      	lsls	r3, r3, #31
 8000ba8:	0864      	lsrs	r4, r4, #1
 8000baa:	431c      	orrs	r4, r3
 8000bac:	0021      	movs	r1, r4
 8000bae:	b005      	add	sp, #20
 8000bb0:	bc3c      	pop	{r2, r3, r4, r5}
 8000bb2:	4690      	mov	r8, r2
 8000bb4:	4699      	mov	r9, r3
 8000bb6:	46a2      	mov	sl, r4
 8000bb8:	46ab      	mov	fp, r5
 8000bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	4252      	negs	r2, r2
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	1b1b      	subs	r3, r3, r4
 8000bc4:	2b38      	cmp	r3, #56	; 0x38
 8000bc6:	dc00      	bgt.n	8000bca <__aeabi_ddiv+0x15a>
 8000bc8:	e1ad      	b.n	8000f26 <__aeabi_ddiv+0x4b6>
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2300      	movs	r3, #0
 8000bce:	2700      	movs	r7, #0
 8000bd0:	e7dc      	b.n	8000b8c <__aeabi_ddiv+0x11c>
 8000bd2:	465b      	mov	r3, fp
 8000bd4:	4333      	orrs	r3, r6
 8000bd6:	4699      	mov	r9, r3
 8000bd8:	d05e      	beq.n	8000c98 <__aeabi_ddiv+0x228>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_ddiv+0x170>
 8000bde:	e18a      	b.n	8000ef6 <__aeabi_ddiv+0x486>
 8000be0:	0030      	movs	r0, r6
 8000be2:	f000 fdc9 	bl	8001778 <__clzsi2>
 8000be6:	0003      	movs	r3, r0
 8000be8:	3b0b      	subs	r3, #11
 8000bea:	2b1c      	cmp	r3, #28
 8000bec:	dd00      	ble.n	8000bf0 <__aeabi_ddiv+0x180>
 8000bee:	e17b      	b.n	8000ee8 <__aeabi_ddiv+0x478>
 8000bf0:	221d      	movs	r2, #29
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	465a      	mov	r2, fp
 8000bf6:	0001      	movs	r1, r0
 8000bf8:	40da      	lsrs	r2, r3
 8000bfa:	3908      	subs	r1, #8
 8000bfc:	408e      	lsls	r6, r1
 8000bfe:	0013      	movs	r3, r2
 8000c00:	465f      	mov	r7, fp
 8000c02:	4333      	orrs	r3, r6
 8000c04:	4699      	mov	r9, r3
 8000c06:	408f      	lsls	r7, r1
 8000c08:	4b3f      	ldr	r3, [pc, #252]	; (8000d08 <__aeabi_ddiv+0x298>)
 8000c0a:	2600      	movs	r6, #0
 8000c0c:	1a1b      	subs	r3, r3, r0
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	2300      	movs	r3, #0
 8000c12:	9302      	str	r3, [sp, #8]
 8000c14:	e752      	b.n	8000abc <__aeabi_ddiv+0x4c>
 8000c16:	4641      	mov	r1, r8
 8000c18:	4653      	mov	r3, sl
 8000c1a:	430b      	orrs	r3, r1
 8000c1c:	493b      	ldr	r1, [pc, #236]	; (8000d0c <__aeabi_ddiv+0x29c>)
 8000c1e:	469b      	mov	fp, r3
 8000c20:	468c      	mov	ip, r1
 8000c22:	9b00      	ldr	r3, [sp, #0]
 8000c24:	4463      	add	r3, ip
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	465b      	mov	r3, fp
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d13b      	bne.n	8000ca6 <__aeabi_ddiv+0x236>
 8000c2e:	2302      	movs	r3, #2
 8000c30:	2200      	movs	r2, #0
 8000c32:	431e      	orrs	r6, r3
 8000c34:	2102      	movs	r1, #2
 8000c36:	e761      	b.n	8000afc <__aeabi_ddiv+0x8c>
 8000c38:	4643      	mov	r3, r8
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	469b      	mov	fp, r3
 8000c3e:	d037      	beq.n	8000cb0 <__aeabi_ddiv+0x240>
 8000c40:	4643      	mov	r3, r8
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d100      	bne.n	8000c48 <__aeabi_ddiv+0x1d8>
 8000c46:	e162      	b.n	8000f0e <__aeabi_ddiv+0x49e>
 8000c48:	4640      	mov	r0, r8
 8000c4a:	f000 fd95 	bl	8001778 <__clzsi2>
 8000c4e:	0003      	movs	r3, r0
 8000c50:	3b0b      	subs	r3, #11
 8000c52:	2b1c      	cmp	r3, #28
 8000c54:	dd00      	ble.n	8000c58 <__aeabi_ddiv+0x1e8>
 8000c56:	e153      	b.n	8000f00 <__aeabi_ddiv+0x490>
 8000c58:	0002      	movs	r2, r0
 8000c5a:	4641      	mov	r1, r8
 8000c5c:	3a08      	subs	r2, #8
 8000c5e:	4091      	lsls	r1, r2
 8000c60:	4688      	mov	r8, r1
 8000c62:	211d      	movs	r1, #29
 8000c64:	1acb      	subs	r3, r1, r3
 8000c66:	4651      	mov	r1, sl
 8000c68:	40d9      	lsrs	r1, r3
 8000c6a:	000b      	movs	r3, r1
 8000c6c:	4641      	mov	r1, r8
 8000c6e:	430b      	orrs	r3, r1
 8000c70:	469b      	mov	fp, r3
 8000c72:	4653      	mov	r3, sl
 8000c74:	4093      	lsls	r3, r2
 8000c76:	001a      	movs	r2, r3
 8000c78:	9b00      	ldr	r3, [sp, #0]
 8000c7a:	4925      	ldr	r1, [pc, #148]	; (8000d10 <__aeabi_ddiv+0x2a0>)
 8000c7c:	469c      	mov	ip, r3
 8000c7e:	4460      	add	r0, ip
 8000c80:	0003      	movs	r3, r0
 8000c82:	468c      	mov	ip, r1
 8000c84:	4463      	add	r3, ip
 8000c86:	9300      	str	r3, [sp, #0]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e737      	b.n	8000afc <__aeabi_ddiv+0x8c>
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	46b1      	mov	r9, r6
 8000c90:	9000      	str	r0, [sp, #0]
 8000c92:	260c      	movs	r6, #12
 8000c94:	9302      	str	r3, [sp, #8]
 8000c96:	e711      	b.n	8000abc <__aeabi_ddiv+0x4c>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	2604      	movs	r6, #4
 8000ca0:	2700      	movs	r7, #0
 8000ca2:	9302      	str	r3, [sp, #8]
 8000ca4:	e70a      	b.n	8000abc <__aeabi_ddiv+0x4c>
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	46c3      	mov	fp, r8
 8000caa:	431e      	orrs	r6, r3
 8000cac:	2103      	movs	r1, #3
 8000cae:	e725      	b.n	8000afc <__aeabi_ddiv+0x8c>
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	431e      	orrs	r6, r3
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	e720      	b.n	8000afc <__aeabi_ddiv+0x8c>
 8000cba:	2300      	movs	r3, #0
 8000cbc:	469a      	mov	sl, r3
 8000cbe:	2380      	movs	r3, #128	; 0x80
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	031b      	lsls	r3, r3, #12
 8000cc4:	4a09      	ldr	r2, [pc, #36]	; (8000cec <__aeabi_ddiv+0x27c>)
 8000cc6:	e761      	b.n	8000b8c <__aeabi_ddiv+0x11c>
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	4649      	mov	r1, r9
 8000ccc:	031b      	lsls	r3, r3, #12
 8000cce:	4219      	tst	r1, r3
 8000cd0:	d100      	bne.n	8000cd4 <__aeabi_ddiv+0x264>
 8000cd2:	e0e2      	b.n	8000e9a <__aeabi_ddiv+0x42a>
 8000cd4:	4659      	mov	r1, fp
 8000cd6:	4219      	tst	r1, r3
 8000cd8:	d000      	beq.n	8000cdc <__aeabi_ddiv+0x26c>
 8000cda:	e0de      	b.n	8000e9a <__aeabi_ddiv+0x42a>
 8000cdc:	430b      	orrs	r3, r1
 8000cde:	031b      	lsls	r3, r3, #12
 8000ce0:	0017      	movs	r7, r2
 8000ce2:	0b1b      	lsrs	r3, r3, #12
 8000ce4:	46a2      	mov	sl, r4
 8000ce6:	4a01      	ldr	r2, [pc, #4]	; (8000cec <__aeabi_ddiv+0x27c>)
 8000ce8:	e750      	b.n	8000b8c <__aeabi_ddiv+0x11c>
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	000007ff 	.word	0x000007ff
 8000cf0:	fffffc01 	.word	0xfffffc01
 8000cf4:	08004148 	.word	0x08004148
 8000cf8:	000003ff 	.word	0x000003ff
 8000cfc:	feffffff 	.word	0xfeffffff
 8000d00:	000007fe 	.word	0x000007fe
 8000d04:	800fffff 	.word	0x800fffff
 8000d08:	fffffc0d 	.word	0xfffffc0d
 8000d0c:	fffff801 	.word	0xfffff801
 8000d10:	000003f3 	.word	0x000003f3
 8000d14:	45d9      	cmp	r9, fp
 8000d16:	d900      	bls.n	8000d1a <__aeabi_ddiv+0x2aa>
 8000d18:	e0cb      	b.n	8000eb2 <__aeabi_ddiv+0x442>
 8000d1a:	d100      	bne.n	8000d1e <__aeabi_ddiv+0x2ae>
 8000d1c:	e0c6      	b.n	8000eac <__aeabi_ddiv+0x43c>
 8000d1e:	003c      	movs	r4, r7
 8000d20:	4648      	mov	r0, r9
 8000d22:	2700      	movs	r7, #0
 8000d24:	9b00      	ldr	r3, [sp, #0]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	465b      	mov	r3, fp
 8000d2c:	0e16      	lsrs	r6, r2, #24
 8000d2e:	021b      	lsls	r3, r3, #8
 8000d30:	431e      	orrs	r6, r3
 8000d32:	0213      	lsls	r3, r2, #8
 8000d34:	4698      	mov	r8, r3
 8000d36:	0433      	lsls	r3, r6, #16
 8000d38:	0c1b      	lsrs	r3, r3, #16
 8000d3a:	4699      	mov	r9, r3
 8000d3c:	0c31      	lsrs	r1, r6, #16
 8000d3e:	9101      	str	r1, [sp, #4]
 8000d40:	f7ff fa68 	bl	8000214 <__aeabi_uidivmod>
 8000d44:	464a      	mov	r2, r9
 8000d46:	4342      	muls	r2, r0
 8000d48:	040b      	lsls	r3, r1, #16
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	0005      	movs	r5, r0
 8000d4e:	4319      	orrs	r1, r3
 8000d50:	428a      	cmp	r2, r1
 8000d52:	d907      	bls.n	8000d64 <__aeabi_ddiv+0x2f4>
 8000d54:	1989      	adds	r1, r1, r6
 8000d56:	3d01      	subs	r5, #1
 8000d58:	428e      	cmp	r6, r1
 8000d5a:	d803      	bhi.n	8000d64 <__aeabi_ddiv+0x2f4>
 8000d5c:	428a      	cmp	r2, r1
 8000d5e:	d901      	bls.n	8000d64 <__aeabi_ddiv+0x2f4>
 8000d60:	1e85      	subs	r5, r0, #2
 8000d62:	1989      	adds	r1, r1, r6
 8000d64:	1a88      	subs	r0, r1, r2
 8000d66:	9901      	ldr	r1, [sp, #4]
 8000d68:	f7ff fa54 	bl	8000214 <__aeabi_uidivmod>
 8000d6c:	0409      	lsls	r1, r1, #16
 8000d6e:	468c      	mov	ip, r1
 8000d70:	464a      	mov	r2, r9
 8000d72:	0421      	lsls	r1, r4, #16
 8000d74:	4664      	mov	r4, ip
 8000d76:	4342      	muls	r2, r0
 8000d78:	0c09      	lsrs	r1, r1, #16
 8000d7a:	0003      	movs	r3, r0
 8000d7c:	4321      	orrs	r1, r4
 8000d7e:	428a      	cmp	r2, r1
 8000d80:	d904      	bls.n	8000d8c <__aeabi_ddiv+0x31c>
 8000d82:	1989      	adds	r1, r1, r6
 8000d84:	3b01      	subs	r3, #1
 8000d86:	428e      	cmp	r6, r1
 8000d88:	d800      	bhi.n	8000d8c <__aeabi_ddiv+0x31c>
 8000d8a:	e0f1      	b.n	8000f70 <__aeabi_ddiv+0x500>
 8000d8c:	042d      	lsls	r5, r5, #16
 8000d8e:	431d      	orrs	r5, r3
 8000d90:	46ab      	mov	fp, r5
 8000d92:	4643      	mov	r3, r8
 8000d94:	1a89      	subs	r1, r1, r2
 8000d96:	4642      	mov	r2, r8
 8000d98:	0c28      	lsrs	r0, r5, #16
 8000d9a:	0412      	lsls	r2, r2, #16
 8000d9c:	0c1d      	lsrs	r5, r3, #16
 8000d9e:	465b      	mov	r3, fp
 8000da0:	0c14      	lsrs	r4, r2, #16
 8000da2:	0022      	movs	r2, r4
 8000da4:	041b      	lsls	r3, r3, #16
 8000da6:	0c1b      	lsrs	r3, r3, #16
 8000da8:	435a      	muls	r2, r3
 8000daa:	9403      	str	r4, [sp, #12]
 8000dac:	436b      	muls	r3, r5
 8000dae:	4344      	muls	r4, r0
 8000db0:	9502      	str	r5, [sp, #8]
 8000db2:	4368      	muls	r0, r5
 8000db4:	191b      	adds	r3, r3, r4
 8000db6:	0c15      	lsrs	r5, r2, #16
 8000db8:	18eb      	adds	r3, r5, r3
 8000dba:	429c      	cmp	r4, r3
 8000dbc:	d903      	bls.n	8000dc6 <__aeabi_ddiv+0x356>
 8000dbe:	2480      	movs	r4, #128	; 0x80
 8000dc0:	0264      	lsls	r4, r4, #9
 8000dc2:	46a4      	mov	ip, r4
 8000dc4:	4460      	add	r0, ip
 8000dc6:	0c1c      	lsrs	r4, r3, #16
 8000dc8:	0415      	lsls	r5, r2, #16
 8000dca:	041b      	lsls	r3, r3, #16
 8000dcc:	0c2d      	lsrs	r5, r5, #16
 8000dce:	1820      	adds	r0, r4, r0
 8000dd0:	195d      	adds	r5, r3, r5
 8000dd2:	4281      	cmp	r1, r0
 8000dd4:	d377      	bcc.n	8000ec6 <__aeabi_ddiv+0x456>
 8000dd6:	d073      	beq.n	8000ec0 <__aeabi_ddiv+0x450>
 8000dd8:	1a0c      	subs	r4, r1, r0
 8000dda:	4aa2      	ldr	r2, [pc, #648]	; (8001064 <__aeabi_ddiv+0x5f4>)
 8000ddc:	1b7d      	subs	r5, r7, r5
 8000dde:	42af      	cmp	r7, r5
 8000de0:	41bf      	sbcs	r7, r7
 8000de2:	4694      	mov	ip, r2
 8000de4:	9b00      	ldr	r3, [sp, #0]
 8000de6:	427f      	negs	r7, r7
 8000de8:	4463      	add	r3, ip
 8000dea:	1be0      	subs	r0, r4, r7
 8000dec:	001c      	movs	r4, r3
 8000dee:	4286      	cmp	r6, r0
 8000df0:	d100      	bne.n	8000df4 <__aeabi_ddiv+0x384>
 8000df2:	e0db      	b.n	8000fac <__aeabi_ddiv+0x53c>
 8000df4:	9901      	ldr	r1, [sp, #4]
 8000df6:	f7ff fa0d 	bl	8000214 <__aeabi_uidivmod>
 8000dfa:	464a      	mov	r2, r9
 8000dfc:	4342      	muls	r2, r0
 8000dfe:	040b      	lsls	r3, r1, #16
 8000e00:	0c29      	lsrs	r1, r5, #16
 8000e02:	0007      	movs	r7, r0
 8000e04:	4319      	orrs	r1, r3
 8000e06:	428a      	cmp	r2, r1
 8000e08:	d907      	bls.n	8000e1a <__aeabi_ddiv+0x3aa>
 8000e0a:	1989      	adds	r1, r1, r6
 8000e0c:	3f01      	subs	r7, #1
 8000e0e:	428e      	cmp	r6, r1
 8000e10:	d803      	bhi.n	8000e1a <__aeabi_ddiv+0x3aa>
 8000e12:	428a      	cmp	r2, r1
 8000e14:	d901      	bls.n	8000e1a <__aeabi_ddiv+0x3aa>
 8000e16:	1e87      	subs	r7, r0, #2
 8000e18:	1989      	adds	r1, r1, r6
 8000e1a:	1a88      	subs	r0, r1, r2
 8000e1c:	9901      	ldr	r1, [sp, #4]
 8000e1e:	f7ff f9f9 	bl	8000214 <__aeabi_uidivmod>
 8000e22:	0409      	lsls	r1, r1, #16
 8000e24:	464a      	mov	r2, r9
 8000e26:	4689      	mov	r9, r1
 8000e28:	0429      	lsls	r1, r5, #16
 8000e2a:	464d      	mov	r5, r9
 8000e2c:	4342      	muls	r2, r0
 8000e2e:	0c09      	lsrs	r1, r1, #16
 8000e30:	0003      	movs	r3, r0
 8000e32:	4329      	orrs	r1, r5
 8000e34:	428a      	cmp	r2, r1
 8000e36:	d907      	bls.n	8000e48 <__aeabi_ddiv+0x3d8>
 8000e38:	1989      	adds	r1, r1, r6
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	428e      	cmp	r6, r1
 8000e3e:	d803      	bhi.n	8000e48 <__aeabi_ddiv+0x3d8>
 8000e40:	428a      	cmp	r2, r1
 8000e42:	d901      	bls.n	8000e48 <__aeabi_ddiv+0x3d8>
 8000e44:	1e83      	subs	r3, r0, #2
 8000e46:	1989      	adds	r1, r1, r6
 8000e48:	043f      	lsls	r7, r7, #16
 8000e4a:	1a89      	subs	r1, r1, r2
 8000e4c:	003a      	movs	r2, r7
 8000e4e:	9f03      	ldr	r7, [sp, #12]
 8000e50:	431a      	orrs	r2, r3
 8000e52:	0038      	movs	r0, r7
 8000e54:	0413      	lsls	r3, r2, #16
 8000e56:	0c1b      	lsrs	r3, r3, #16
 8000e58:	4358      	muls	r0, r3
 8000e5a:	4681      	mov	r9, r0
 8000e5c:	9802      	ldr	r0, [sp, #8]
 8000e5e:	0c15      	lsrs	r5, r2, #16
 8000e60:	436f      	muls	r7, r5
 8000e62:	4343      	muls	r3, r0
 8000e64:	4345      	muls	r5, r0
 8000e66:	4648      	mov	r0, r9
 8000e68:	0c00      	lsrs	r0, r0, #16
 8000e6a:	4684      	mov	ip, r0
 8000e6c:	19db      	adds	r3, r3, r7
 8000e6e:	4463      	add	r3, ip
 8000e70:	429f      	cmp	r7, r3
 8000e72:	d903      	bls.n	8000e7c <__aeabi_ddiv+0x40c>
 8000e74:	2080      	movs	r0, #128	; 0x80
 8000e76:	0240      	lsls	r0, r0, #9
 8000e78:	4684      	mov	ip, r0
 8000e7a:	4465      	add	r5, ip
 8000e7c:	4648      	mov	r0, r9
 8000e7e:	0c1f      	lsrs	r7, r3, #16
 8000e80:	0400      	lsls	r0, r0, #16
 8000e82:	041b      	lsls	r3, r3, #16
 8000e84:	0c00      	lsrs	r0, r0, #16
 8000e86:	197d      	adds	r5, r7, r5
 8000e88:	1818      	adds	r0, r3, r0
 8000e8a:	42a9      	cmp	r1, r5
 8000e8c:	d200      	bcs.n	8000e90 <__aeabi_ddiv+0x420>
 8000e8e:	e084      	b.n	8000f9a <__aeabi_ddiv+0x52a>
 8000e90:	d100      	bne.n	8000e94 <__aeabi_ddiv+0x424>
 8000e92:	e07f      	b.n	8000f94 <__aeabi_ddiv+0x524>
 8000e94:	2301      	movs	r3, #1
 8000e96:	431a      	orrs	r2, r3
 8000e98:	e657      	b.n	8000b4a <__aeabi_ddiv+0xda>
 8000e9a:	2380      	movs	r3, #128	; 0x80
 8000e9c:	464a      	mov	r2, r9
 8000e9e:	031b      	lsls	r3, r3, #12
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	031b      	lsls	r3, r3, #12
 8000ea4:	0b1b      	lsrs	r3, r3, #12
 8000ea6:	46aa      	mov	sl, r5
 8000ea8:	4a6f      	ldr	r2, [pc, #444]	; (8001068 <__aeabi_ddiv+0x5f8>)
 8000eaa:	e66f      	b.n	8000b8c <__aeabi_ddiv+0x11c>
 8000eac:	42ba      	cmp	r2, r7
 8000eae:	d900      	bls.n	8000eb2 <__aeabi_ddiv+0x442>
 8000eb0:	e735      	b.n	8000d1e <__aeabi_ddiv+0x2ae>
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	07dc      	lsls	r4, r3, #31
 8000eb6:	0858      	lsrs	r0, r3, #1
 8000eb8:	087b      	lsrs	r3, r7, #1
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	07ff      	lsls	r7, r7, #31
 8000ebe:	e734      	b.n	8000d2a <__aeabi_ddiv+0x2ba>
 8000ec0:	2400      	movs	r4, #0
 8000ec2:	42af      	cmp	r7, r5
 8000ec4:	d289      	bcs.n	8000dda <__aeabi_ddiv+0x36a>
 8000ec6:	4447      	add	r7, r8
 8000ec8:	4547      	cmp	r7, r8
 8000eca:	41a4      	sbcs	r4, r4
 8000ecc:	465b      	mov	r3, fp
 8000ece:	4264      	negs	r4, r4
 8000ed0:	19a4      	adds	r4, r4, r6
 8000ed2:	1864      	adds	r4, r4, r1
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	42a6      	cmp	r6, r4
 8000ed8:	d21e      	bcs.n	8000f18 <__aeabi_ddiv+0x4a8>
 8000eda:	42a0      	cmp	r0, r4
 8000edc:	d86d      	bhi.n	8000fba <__aeabi_ddiv+0x54a>
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_ddiv+0x472>
 8000ee0:	e0b6      	b.n	8001050 <__aeabi_ddiv+0x5e0>
 8000ee2:	1a24      	subs	r4, r4, r0
 8000ee4:	469b      	mov	fp, r3
 8000ee6:	e778      	b.n	8000dda <__aeabi_ddiv+0x36a>
 8000ee8:	0003      	movs	r3, r0
 8000eea:	465a      	mov	r2, fp
 8000eec:	3b28      	subs	r3, #40	; 0x28
 8000eee:	409a      	lsls	r2, r3
 8000ef0:	2700      	movs	r7, #0
 8000ef2:	4691      	mov	r9, r2
 8000ef4:	e688      	b.n	8000c08 <__aeabi_ddiv+0x198>
 8000ef6:	4658      	mov	r0, fp
 8000ef8:	f000 fc3e 	bl	8001778 <__clzsi2>
 8000efc:	3020      	adds	r0, #32
 8000efe:	e672      	b.n	8000be6 <__aeabi_ddiv+0x176>
 8000f00:	0003      	movs	r3, r0
 8000f02:	4652      	mov	r2, sl
 8000f04:	3b28      	subs	r3, #40	; 0x28
 8000f06:	409a      	lsls	r2, r3
 8000f08:	4693      	mov	fp, r2
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	e6b4      	b.n	8000c78 <__aeabi_ddiv+0x208>
 8000f0e:	4650      	mov	r0, sl
 8000f10:	f000 fc32 	bl	8001778 <__clzsi2>
 8000f14:	3020      	adds	r0, #32
 8000f16:	e69a      	b.n	8000c4e <__aeabi_ddiv+0x1de>
 8000f18:	42a6      	cmp	r6, r4
 8000f1a:	d1e2      	bne.n	8000ee2 <__aeabi_ddiv+0x472>
 8000f1c:	45b8      	cmp	r8, r7
 8000f1e:	d9dc      	bls.n	8000eda <__aeabi_ddiv+0x46a>
 8000f20:	1a34      	subs	r4, r6, r0
 8000f22:	469b      	mov	fp, r3
 8000f24:	e759      	b.n	8000dda <__aeabi_ddiv+0x36a>
 8000f26:	2b1f      	cmp	r3, #31
 8000f28:	dc65      	bgt.n	8000ff6 <__aeabi_ddiv+0x586>
 8000f2a:	4c50      	ldr	r4, [pc, #320]	; (800106c <__aeabi_ddiv+0x5fc>)
 8000f2c:	9900      	ldr	r1, [sp, #0]
 8000f2e:	46a4      	mov	ip, r4
 8000f30:	465c      	mov	r4, fp
 8000f32:	4461      	add	r1, ip
 8000f34:	0008      	movs	r0, r1
 8000f36:	408c      	lsls	r4, r1
 8000f38:	0011      	movs	r1, r2
 8000f3a:	4082      	lsls	r2, r0
 8000f3c:	40d9      	lsrs	r1, r3
 8000f3e:	1e50      	subs	r0, r2, #1
 8000f40:	4182      	sbcs	r2, r0
 8000f42:	430c      	orrs	r4, r1
 8000f44:	4314      	orrs	r4, r2
 8000f46:	465a      	mov	r2, fp
 8000f48:	40da      	lsrs	r2, r3
 8000f4a:	0013      	movs	r3, r2
 8000f4c:	0762      	lsls	r2, r4, #29
 8000f4e:	d009      	beq.n	8000f64 <__aeabi_ddiv+0x4f4>
 8000f50:	220f      	movs	r2, #15
 8000f52:	4022      	ands	r2, r4
 8000f54:	2a04      	cmp	r2, #4
 8000f56:	d005      	beq.n	8000f64 <__aeabi_ddiv+0x4f4>
 8000f58:	0022      	movs	r2, r4
 8000f5a:	1d14      	adds	r4, r2, #4
 8000f5c:	4294      	cmp	r4, r2
 8000f5e:	4189      	sbcs	r1, r1
 8000f60:	4249      	negs	r1, r1
 8000f62:	185b      	adds	r3, r3, r1
 8000f64:	021a      	lsls	r2, r3, #8
 8000f66:	d562      	bpl.n	800102e <__aeabi_ddiv+0x5be>
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	2700      	movs	r7, #0
 8000f6e:	e60d      	b.n	8000b8c <__aeabi_ddiv+0x11c>
 8000f70:	428a      	cmp	r2, r1
 8000f72:	d800      	bhi.n	8000f76 <__aeabi_ddiv+0x506>
 8000f74:	e70a      	b.n	8000d8c <__aeabi_ddiv+0x31c>
 8000f76:	1e83      	subs	r3, r0, #2
 8000f78:	1989      	adds	r1, r1, r6
 8000f7a:	e707      	b.n	8000d8c <__aeabi_ddiv+0x31c>
 8000f7c:	230f      	movs	r3, #15
 8000f7e:	4013      	ands	r3, r2
 8000f80:	2b04      	cmp	r3, #4
 8000f82:	d100      	bne.n	8000f86 <__aeabi_ddiv+0x516>
 8000f84:	e5e6      	b.n	8000b54 <__aeabi_ddiv+0xe4>
 8000f86:	1d17      	adds	r7, r2, #4
 8000f88:	4297      	cmp	r7, r2
 8000f8a:	4192      	sbcs	r2, r2
 8000f8c:	4253      	negs	r3, r2
 8000f8e:	449b      	add	fp, r3
 8000f90:	08fa      	lsrs	r2, r7, #3
 8000f92:	e5e0      	b.n	8000b56 <__aeabi_ddiv+0xe6>
 8000f94:	2800      	cmp	r0, #0
 8000f96:	d100      	bne.n	8000f9a <__aeabi_ddiv+0x52a>
 8000f98:	e5d7      	b.n	8000b4a <__aeabi_ddiv+0xda>
 8000f9a:	1871      	adds	r1, r6, r1
 8000f9c:	1e53      	subs	r3, r2, #1
 8000f9e:	42b1      	cmp	r1, r6
 8000fa0:	d327      	bcc.n	8000ff2 <__aeabi_ddiv+0x582>
 8000fa2:	42a9      	cmp	r1, r5
 8000fa4:	d315      	bcc.n	8000fd2 <__aeabi_ddiv+0x562>
 8000fa6:	d058      	beq.n	800105a <__aeabi_ddiv+0x5ea>
 8000fa8:	001a      	movs	r2, r3
 8000faa:	e773      	b.n	8000e94 <__aeabi_ddiv+0x424>
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	dc00      	bgt.n	8000fb2 <__aeabi_ddiv+0x542>
 8000fb0:	e604      	b.n	8000bbc <__aeabi_ddiv+0x14c>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	449b      	add	fp, r3
 8000fb8:	e5cd      	b.n	8000b56 <__aeabi_ddiv+0xe6>
 8000fba:	2302      	movs	r3, #2
 8000fbc:	4447      	add	r7, r8
 8000fbe:	4547      	cmp	r7, r8
 8000fc0:	4189      	sbcs	r1, r1
 8000fc2:	425b      	negs	r3, r3
 8000fc4:	469c      	mov	ip, r3
 8000fc6:	4249      	negs	r1, r1
 8000fc8:	1989      	adds	r1, r1, r6
 8000fca:	190c      	adds	r4, r1, r4
 8000fcc:	44e3      	add	fp, ip
 8000fce:	1a24      	subs	r4, r4, r0
 8000fd0:	e703      	b.n	8000dda <__aeabi_ddiv+0x36a>
 8000fd2:	4643      	mov	r3, r8
 8000fd4:	005f      	lsls	r7, r3, #1
 8000fd6:	4547      	cmp	r7, r8
 8000fd8:	419b      	sbcs	r3, r3
 8000fda:	46b8      	mov	r8, r7
 8000fdc:	425b      	negs	r3, r3
 8000fde:	199e      	adds	r6, r3, r6
 8000fe0:	3a02      	subs	r2, #2
 8000fe2:	1989      	adds	r1, r1, r6
 8000fe4:	42a9      	cmp	r1, r5
 8000fe6:	d000      	beq.n	8000fea <__aeabi_ddiv+0x57a>
 8000fe8:	e754      	b.n	8000e94 <__aeabi_ddiv+0x424>
 8000fea:	4540      	cmp	r0, r8
 8000fec:	d000      	beq.n	8000ff0 <__aeabi_ddiv+0x580>
 8000fee:	e751      	b.n	8000e94 <__aeabi_ddiv+0x424>
 8000ff0:	e5ab      	b.n	8000b4a <__aeabi_ddiv+0xda>
 8000ff2:	001a      	movs	r2, r3
 8000ff4:	e7f6      	b.n	8000fe4 <__aeabi_ddiv+0x574>
 8000ff6:	211f      	movs	r1, #31
 8000ff8:	465f      	mov	r7, fp
 8000ffa:	4249      	negs	r1, r1
 8000ffc:	1b0c      	subs	r4, r1, r4
 8000ffe:	40e7      	lsrs	r7, r4
 8001000:	2b20      	cmp	r3, #32
 8001002:	d007      	beq.n	8001014 <__aeabi_ddiv+0x5a4>
 8001004:	491a      	ldr	r1, [pc, #104]	; (8001070 <__aeabi_ddiv+0x600>)
 8001006:	9b00      	ldr	r3, [sp, #0]
 8001008:	468c      	mov	ip, r1
 800100a:	4463      	add	r3, ip
 800100c:	0018      	movs	r0, r3
 800100e:	465b      	mov	r3, fp
 8001010:	4083      	lsls	r3, r0
 8001012:	431a      	orrs	r2, r3
 8001014:	1e50      	subs	r0, r2, #1
 8001016:	4182      	sbcs	r2, r0
 8001018:	433a      	orrs	r2, r7
 800101a:	2707      	movs	r7, #7
 800101c:	2300      	movs	r3, #0
 800101e:	4017      	ands	r7, r2
 8001020:	d009      	beq.n	8001036 <__aeabi_ddiv+0x5c6>
 8001022:	210f      	movs	r1, #15
 8001024:	2300      	movs	r3, #0
 8001026:	4011      	ands	r1, r2
 8001028:	0014      	movs	r4, r2
 800102a:	2904      	cmp	r1, #4
 800102c:	d195      	bne.n	8000f5a <__aeabi_ddiv+0x4ea>
 800102e:	0022      	movs	r2, r4
 8001030:	075f      	lsls	r7, r3, #29
 8001032:	025b      	lsls	r3, r3, #9
 8001034:	0b1b      	lsrs	r3, r3, #12
 8001036:	08d2      	lsrs	r2, r2, #3
 8001038:	4317      	orrs	r7, r2
 800103a:	2200      	movs	r2, #0
 800103c:	e5a6      	b.n	8000b8c <__aeabi_ddiv+0x11c>
 800103e:	2380      	movs	r3, #128	; 0x80
 8001040:	4659      	mov	r1, fp
 8001042:	031b      	lsls	r3, r3, #12
 8001044:	430b      	orrs	r3, r1
 8001046:	031b      	lsls	r3, r3, #12
 8001048:	0017      	movs	r7, r2
 800104a:	0b1b      	lsrs	r3, r3, #12
 800104c:	4a06      	ldr	r2, [pc, #24]	; (8001068 <__aeabi_ddiv+0x5f8>)
 800104e:	e59d      	b.n	8000b8c <__aeabi_ddiv+0x11c>
 8001050:	42bd      	cmp	r5, r7
 8001052:	d8b2      	bhi.n	8000fba <__aeabi_ddiv+0x54a>
 8001054:	469b      	mov	fp, r3
 8001056:	2400      	movs	r4, #0
 8001058:	e6bf      	b.n	8000dda <__aeabi_ddiv+0x36a>
 800105a:	4580      	cmp	r8, r0
 800105c:	d3b9      	bcc.n	8000fd2 <__aeabi_ddiv+0x562>
 800105e:	001a      	movs	r2, r3
 8001060:	e7c3      	b.n	8000fea <__aeabi_ddiv+0x57a>
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	000003ff 	.word	0x000003ff
 8001068:	000007ff 	.word	0x000007ff
 800106c:	0000041e 	.word	0x0000041e
 8001070:	0000043e 	.word	0x0000043e

08001074 <__aeabi_dmul>:
 8001074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001076:	4657      	mov	r7, sl
 8001078:	46de      	mov	lr, fp
 800107a:	464e      	mov	r6, r9
 800107c:	4645      	mov	r5, r8
 800107e:	b5e0      	push	{r5, r6, r7, lr}
 8001080:	4683      	mov	fp, r0
 8001082:	0006      	movs	r6, r0
 8001084:	030f      	lsls	r7, r1, #12
 8001086:	0048      	lsls	r0, r1, #1
 8001088:	b087      	sub	sp, #28
 800108a:	4692      	mov	sl, r2
 800108c:	001d      	movs	r5, r3
 800108e:	0b3f      	lsrs	r7, r7, #12
 8001090:	0d40      	lsrs	r0, r0, #21
 8001092:	0fcc      	lsrs	r4, r1, #31
 8001094:	2800      	cmp	r0, #0
 8001096:	d100      	bne.n	800109a <__aeabi_dmul+0x26>
 8001098:	e06f      	b.n	800117a <__aeabi_dmul+0x106>
 800109a:	4bde      	ldr	r3, [pc, #888]	; (8001414 <__aeabi_dmul+0x3a0>)
 800109c:	4298      	cmp	r0, r3
 800109e:	d038      	beq.n	8001112 <__aeabi_dmul+0x9e>
 80010a0:	2380      	movs	r3, #128	; 0x80
 80010a2:	00ff      	lsls	r7, r7, #3
 80010a4:	041b      	lsls	r3, r3, #16
 80010a6:	431f      	orrs	r7, r3
 80010a8:	0f73      	lsrs	r3, r6, #29
 80010aa:	433b      	orrs	r3, r7
 80010ac:	9301      	str	r3, [sp, #4]
 80010ae:	4bda      	ldr	r3, [pc, #872]	; (8001418 <__aeabi_dmul+0x3a4>)
 80010b0:	2700      	movs	r7, #0
 80010b2:	4699      	mov	r9, r3
 80010b4:	2300      	movs	r3, #0
 80010b6:	469b      	mov	fp, r3
 80010b8:	00f6      	lsls	r6, r6, #3
 80010ba:	4481      	add	r9, r0
 80010bc:	032b      	lsls	r3, r5, #12
 80010be:	0069      	lsls	r1, r5, #1
 80010c0:	0b1b      	lsrs	r3, r3, #12
 80010c2:	4652      	mov	r2, sl
 80010c4:	4698      	mov	r8, r3
 80010c6:	0d49      	lsrs	r1, r1, #21
 80010c8:	0fed      	lsrs	r5, r5, #31
 80010ca:	2900      	cmp	r1, #0
 80010cc:	d100      	bne.n	80010d0 <__aeabi_dmul+0x5c>
 80010ce:	e085      	b.n	80011dc <__aeabi_dmul+0x168>
 80010d0:	4bd0      	ldr	r3, [pc, #832]	; (8001414 <__aeabi_dmul+0x3a0>)
 80010d2:	4299      	cmp	r1, r3
 80010d4:	d100      	bne.n	80010d8 <__aeabi_dmul+0x64>
 80010d6:	e073      	b.n	80011c0 <__aeabi_dmul+0x14c>
 80010d8:	4643      	mov	r3, r8
 80010da:	00da      	lsls	r2, r3, #3
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	041b      	lsls	r3, r3, #16
 80010e0:	4313      	orrs	r3, r2
 80010e2:	4652      	mov	r2, sl
 80010e4:	48cc      	ldr	r0, [pc, #816]	; (8001418 <__aeabi_dmul+0x3a4>)
 80010e6:	0f52      	lsrs	r2, r2, #29
 80010e8:	4684      	mov	ip, r0
 80010ea:	4313      	orrs	r3, r2
 80010ec:	4652      	mov	r2, sl
 80010ee:	2000      	movs	r0, #0
 80010f0:	4461      	add	r1, ip
 80010f2:	00d2      	lsls	r2, r2, #3
 80010f4:	4489      	add	r9, r1
 80010f6:	0021      	movs	r1, r4
 80010f8:	4069      	eors	r1, r5
 80010fa:	9100      	str	r1, [sp, #0]
 80010fc:	468c      	mov	ip, r1
 80010fe:	2101      	movs	r1, #1
 8001100:	4449      	add	r1, r9
 8001102:	468a      	mov	sl, r1
 8001104:	2f0f      	cmp	r7, #15
 8001106:	d900      	bls.n	800110a <__aeabi_dmul+0x96>
 8001108:	e090      	b.n	800122c <__aeabi_dmul+0x1b8>
 800110a:	49c4      	ldr	r1, [pc, #784]	; (800141c <__aeabi_dmul+0x3a8>)
 800110c:	00bf      	lsls	r7, r7, #2
 800110e:	59cf      	ldr	r7, [r1, r7]
 8001110:	46bf      	mov	pc, r7
 8001112:	465b      	mov	r3, fp
 8001114:	433b      	orrs	r3, r7
 8001116:	9301      	str	r3, [sp, #4]
 8001118:	d000      	beq.n	800111c <__aeabi_dmul+0xa8>
 800111a:	e16a      	b.n	80013f2 <__aeabi_dmul+0x37e>
 800111c:	2302      	movs	r3, #2
 800111e:	2708      	movs	r7, #8
 8001120:	2600      	movs	r6, #0
 8001122:	4681      	mov	r9, r0
 8001124:	469b      	mov	fp, r3
 8001126:	e7c9      	b.n	80010bc <__aeabi_dmul+0x48>
 8001128:	0032      	movs	r2, r6
 800112a:	4658      	mov	r0, fp
 800112c:	9b01      	ldr	r3, [sp, #4]
 800112e:	4661      	mov	r1, ip
 8001130:	9100      	str	r1, [sp, #0]
 8001132:	2802      	cmp	r0, #2
 8001134:	d100      	bne.n	8001138 <__aeabi_dmul+0xc4>
 8001136:	e075      	b.n	8001224 <__aeabi_dmul+0x1b0>
 8001138:	2803      	cmp	r0, #3
 800113a:	d100      	bne.n	800113e <__aeabi_dmul+0xca>
 800113c:	e1fe      	b.n	800153c <__aeabi_dmul+0x4c8>
 800113e:	2801      	cmp	r0, #1
 8001140:	d000      	beq.n	8001144 <__aeabi_dmul+0xd0>
 8001142:	e12c      	b.n	800139e <__aeabi_dmul+0x32a>
 8001144:	2300      	movs	r3, #0
 8001146:	2700      	movs	r7, #0
 8001148:	2600      	movs	r6, #0
 800114a:	2500      	movs	r5, #0
 800114c:	033f      	lsls	r7, r7, #12
 800114e:	0d2a      	lsrs	r2, r5, #20
 8001150:	0b3f      	lsrs	r7, r7, #12
 8001152:	48b3      	ldr	r0, [pc, #716]	; (8001420 <__aeabi_dmul+0x3ac>)
 8001154:	0512      	lsls	r2, r2, #20
 8001156:	433a      	orrs	r2, r7
 8001158:	4002      	ands	r2, r0
 800115a:	051b      	lsls	r3, r3, #20
 800115c:	4313      	orrs	r3, r2
 800115e:	9a00      	ldr	r2, [sp, #0]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	07d1      	lsls	r1, r2, #31
 8001164:	085b      	lsrs	r3, r3, #1
 8001166:	430b      	orrs	r3, r1
 8001168:	0030      	movs	r0, r6
 800116a:	0019      	movs	r1, r3
 800116c:	b007      	add	sp, #28
 800116e:	bc3c      	pop	{r2, r3, r4, r5}
 8001170:	4690      	mov	r8, r2
 8001172:	4699      	mov	r9, r3
 8001174:	46a2      	mov	sl, r4
 8001176:	46ab      	mov	fp, r5
 8001178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800117a:	465b      	mov	r3, fp
 800117c:	433b      	orrs	r3, r7
 800117e:	9301      	str	r3, [sp, #4]
 8001180:	d100      	bne.n	8001184 <__aeabi_dmul+0x110>
 8001182:	e12f      	b.n	80013e4 <__aeabi_dmul+0x370>
 8001184:	2f00      	cmp	r7, #0
 8001186:	d100      	bne.n	800118a <__aeabi_dmul+0x116>
 8001188:	e1a5      	b.n	80014d6 <__aeabi_dmul+0x462>
 800118a:	0038      	movs	r0, r7
 800118c:	f000 faf4 	bl	8001778 <__clzsi2>
 8001190:	0003      	movs	r3, r0
 8001192:	3b0b      	subs	r3, #11
 8001194:	2b1c      	cmp	r3, #28
 8001196:	dd00      	ble.n	800119a <__aeabi_dmul+0x126>
 8001198:	e196      	b.n	80014c8 <__aeabi_dmul+0x454>
 800119a:	221d      	movs	r2, #29
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	465a      	mov	r2, fp
 80011a0:	0001      	movs	r1, r0
 80011a2:	40da      	lsrs	r2, r3
 80011a4:	465e      	mov	r6, fp
 80011a6:	3908      	subs	r1, #8
 80011a8:	408f      	lsls	r7, r1
 80011aa:	0013      	movs	r3, r2
 80011ac:	408e      	lsls	r6, r1
 80011ae:	433b      	orrs	r3, r7
 80011b0:	9301      	str	r3, [sp, #4]
 80011b2:	4b9c      	ldr	r3, [pc, #624]	; (8001424 <__aeabi_dmul+0x3b0>)
 80011b4:	2700      	movs	r7, #0
 80011b6:	1a1b      	subs	r3, r3, r0
 80011b8:	4699      	mov	r9, r3
 80011ba:	2300      	movs	r3, #0
 80011bc:	469b      	mov	fp, r3
 80011be:	e77d      	b.n	80010bc <__aeabi_dmul+0x48>
 80011c0:	4641      	mov	r1, r8
 80011c2:	4653      	mov	r3, sl
 80011c4:	430b      	orrs	r3, r1
 80011c6:	4993      	ldr	r1, [pc, #588]	; (8001414 <__aeabi_dmul+0x3a0>)
 80011c8:	468c      	mov	ip, r1
 80011ca:	44e1      	add	r9, ip
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d000      	beq.n	80011d2 <__aeabi_dmul+0x15e>
 80011d0:	e11a      	b.n	8001408 <__aeabi_dmul+0x394>
 80011d2:	2202      	movs	r2, #2
 80011d4:	2002      	movs	r0, #2
 80011d6:	4317      	orrs	r7, r2
 80011d8:	2200      	movs	r2, #0
 80011da:	e78c      	b.n	80010f6 <__aeabi_dmul+0x82>
 80011dc:	4313      	orrs	r3, r2
 80011de:	d100      	bne.n	80011e2 <__aeabi_dmul+0x16e>
 80011e0:	e10d      	b.n	80013fe <__aeabi_dmul+0x38a>
 80011e2:	4643      	mov	r3, r8
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d100      	bne.n	80011ea <__aeabi_dmul+0x176>
 80011e8:	e181      	b.n	80014ee <__aeabi_dmul+0x47a>
 80011ea:	4640      	mov	r0, r8
 80011ec:	f000 fac4 	bl	8001778 <__clzsi2>
 80011f0:	0002      	movs	r2, r0
 80011f2:	3a0b      	subs	r2, #11
 80011f4:	2a1c      	cmp	r2, #28
 80011f6:	dd00      	ble.n	80011fa <__aeabi_dmul+0x186>
 80011f8:	e172      	b.n	80014e0 <__aeabi_dmul+0x46c>
 80011fa:	0001      	movs	r1, r0
 80011fc:	4643      	mov	r3, r8
 80011fe:	3908      	subs	r1, #8
 8001200:	408b      	lsls	r3, r1
 8001202:	4698      	mov	r8, r3
 8001204:	231d      	movs	r3, #29
 8001206:	1a9a      	subs	r2, r3, r2
 8001208:	4653      	mov	r3, sl
 800120a:	40d3      	lsrs	r3, r2
 800120c:	001a      	movs	r2, r3
 800120e:	4643      	mov	r3, r8
 8001210:	4313      	orrs	r3, r2
 8001212:	4652      	mov	r2, sl
 8001214:	408a      	lsls	r2, r1
 8001216:	4649      	mov	r1, r9
 8001218:	1a08      	subs	r0, r1, r0
 800121a:	4982      	ldr	r1, [pc, #520]	; (8001424 <__aeabi_dmul+0x3b0>)
 800121c:	4689      	mov	r9, r1
 800121e:	4481      	add	r9, r0
 8001220:	2000      	movs	r0, #0
 8001222:	e768      	b.n	80010f6 <__aeabi_dmul+0x82>
 8001224:	4b7b      	ldr	r3, [pc, #492]	; (8001414 <__aeabi_dmul+0x3a0>)
 8001226:	2700      	movs	r7, #0
 8001228:	2600      	movs	r6, #0
 800122a:	e78e      	b.n	800114a <__aeabi_dmul+0xd6>
 800122c:	0c14      	lsrs	r4, r2, #16
 800122e:	0412      	lsls	r2, r2, #16
 8001230:	0c12      	lsrs	r2, r2, #16
 8001232:	0011      	movs	r1, r2
 8001234:	0c37      	lsrs	r7, r6, #16
 8001236:	0436      	lsls	r6, r6, #16
 8001238:	0c35      	lsrs	r5, r6, #16
 800123a:	4379      	muls	r1, r7
 800123c:	0028      	movs	r0, r5
 800123e:	468c      	mov	ip, r1
 8001240:	002e      	movs	r6, r5
 8001242:	4360      	muls	r0, r4
 8001244:	4460      	add	r0, ip
 8001246:	4683      	mov	fp, r0
 8001248:	4356      	muls	r6, r2
 800124a:	0021      	movs	r1, r4
 800124c:	0c30      	lsrs	r0, r6, #16
 800124e:	4680      	mov	r8, r0
 8001250:	4658      	mov	r0, fp
 8001252:	4379      	muls	r1, r7
 8001254:	4440      	add	r0, r8
 8001256:	9102      	str	r1, [sp, #8]
 8001258:	4584      	cmp	ip, r0
 800125a:	d906      	bls.n	800126a <__aeabi_dmul+0x1f6>
 800125c:	4688      	mov	r8, r1
 800125e:	2180      	movs	r1, #128	; 0x80
 8001260:	0249      	lsls	r1, r1, #9
 8001262:	468c      	mov	ip, r1
 8001264:	44e0      	add	r8, ip
 8001266:	4641      	mov	r1, r8
 8001268:	9102      	str	r1, [sp, #8]
 800126a:	0436      	lsls	r6, r6, #16
 800126c:	0c01      	lsrs	r1, r0, #16
 800126e:	0c36      	lsrs	r6, r6, #16
 8001270:	0400      	lsls	r0, r0, #16
 8001272:	468b      	mov	fp, r1
 8001274:	1981      	adds	r1, r0, r6
 8001276:	0c1e      	lsrs	r6, r3, #16
 8001278:	041b      	lsls	r3, r3, #16
 800127a:	0c1b      	lsrs	r3, r3, #16
 800127c:	9103      	str	r1, [sp, #12]
 800127e:	0019      	movs	r1, r3
 8001280:	4379      	muls	r1, r7
 8001282:	468c      	mov	ip, r1
 8001284:	0028      	movs	r0, r5
 8001286:	4375      	muls	r5, r6
 8001288:	4465      	add	r5, ip
 800128a:	46a8      	mov	r8, r5
 800128c:	4358      	muls	r0, r3
 800128e:	0c05      	lsrs	r5, r0, #16
 8001290:	4445      	add	r5, r8
 8001292:	4377      	muls	r7, r6
 8001294:	42a9      	cmp	r1, r5
 8001296:	d903      	bls.n	80012a0 <__aeabi_dmul+0x22c>
 8001298:	2180      	movs	r1, #128	; 0x80
 800129a:	0249      	lsls	r1, r1, #9
 800129c:	468c      	mov	ip, r1
 800129e:	4467      	add	r7, ip
 80012a0:	0c29      	lsrs	r1, r5, #16
 80012a2:	468c      	mov	ip, r1
 80012a4:	0039      	movs	r1, r7
 80012a6:	0400      	lsls	r0, r0, #16
 80012a8:	0c00      	lsrs	r0, r0, #16
 80012aa:	042d      	lsls	r5, r5, #16
 80012ac:	182d      	adds	r5, r5, r0
 80012ae:	4461      	add	r1, ip
 80012b0:	44ab      	add	fp, r5
 80012b2:	9105      	str	r1, [sp, #20]
 80012b4:	4659      	mov	r1, fp
 80012b6:	9104      	str	r1, [sp, #16]
 80012b8:	9901      	ldr	r1, [sp, #4]
 80012ba:	040f      	lsls	r7, r1, #16
 80012bc:	0c3f      	lsrs	r7, r7, #16
 80012be:	0c08      	lsrs	r0, r1, #16
 80012c0:	0039      	movs	r1, r7
 80012c2:	4351      	muls	r1, r2
 80012c4:	4342      	muls	r2, r0
 80012c6:	4690      	mov	r8, r2
 80012c8:	0002      	movs	r2, r0
 80012ca:	468c      	mov	ip, r1
 80012cc:	0c09      	lsrs	r1, r1, #16
 80012ce:	468b      	mov	fp, r1
 80012d0:	4362      	muls	r2, r4
 80012d2:	437c      	muls	r4, r7
 80012d4:	4444      	add	r4, r8
 80012d6:	445c      	add	r4, fp
 80012d8:	45a0      	cmp	r8, r4
 80012da:	d903      	bls.n	80012e4 <__aeabi_dmul+0x270>
 80012dc:	2180      	movs	r1, #128	; 0x80
 80012de:	0249      	lsls	r1, r1, #9
 80012e0:	4688      	mov	r8, r1
 80012e2:	4442      	add	r2, r8
 80012e4:	0c21      	lsrs	r1, r4, #16
 80012e6:	4688      	mov	r8, r1
 80012e8:	4661      	mov	r1, ip
 80012ea:	0409      	lsls	r1, r1, #16
 80012ec:	0c09      	lsrs	r1, r1, #16
 80012ee:	468c      	mov	ip, r1
 80012f0:	0039      	movs	r1, r7
 80012f2:	4359      	muls	r1, r3
 80012f4:	4343      	muls	r3, r0
 80012f6:	4370      	muls	r0, r6
 80012f8:	437e      	muls	r6, r7
 80012fa:	0c0f      	lsrs	r7, r1, #16
 80012fc:	18f6      	adds	r6, r6, r3
 80012fe:	0424      	lsls	r4, r4, #16
 8001300:	19be      	adds	r6, r7, r6
 8001302:	4464      	add	r4, ip
 8001304:	4442      	add	r2, r8
 8001306:	468c      	mov	ip, r1
 8001308:	42b3      	cmp	r3, r6
 800130a:	d903      	bls.n	8001314 <__aeabi_dmul+0x2a0>
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	025b      	lsls	r3, r3, #9
 8001310:	4698      	mov	r8, r3
 8001312:	4440      	add	r0, r8
 8001314:	9b02      	ldr	r3, [sp, #8]
 8001316:	4661      	mov	r1, ip
 8001318:	4698      	mov	r8, r3
 800131a:	9b04      	ldr	r3, [sp, #16]
 800131c:	0437      	lsls	r7, r6, #16
 800131e:	4443      	add	r3, r8
 8001320:	469b      	mov	fp, r3
 8001322:	45ab      	cmp	fp, r5
 8001324:	41ad      	sbcs	r5, r5
 8001326:	426b      	negs	r3, r5
 8001328:	040d      	lsls	r5, r1, #16
 800132a:	9905      	ldr	r1, [sp, #20]
 800132c:	0c2d      	lsrs	r5, r5, #16
 800132e:	468c      	mov	ip, r1
 8001330:	197f      	adds	r7, r7, r5
 8001332:	4467      	add	r7, ip
 8001334:	18fd      	adds	r5, r7, r3
 8001336:	46a8      	mov	r8, r5
 8001338:	465d      	mov	r5, fp
 800133a:	192d      	adds	r5, r5, r4
 800133c:	42a5      	cmp	r5, r4
 800133e:	41a4      	sbcs	r4, r4
 8001340:	4693      	mov	fp, r2
 8001342:	4264      	negs	r4, r4
 8001344:	46a4      	mov	ip, r4
 8001346:	44c3      	add	fp, r8
 8001348:	44dc      	add	ip, fp
 800134a:	428f      	cmp	r7, r1
 800134c:	41bf      	sbcs	r7, r7
 800134e:	4598      	cmp	r8, r3
 8001350:	419b      	sbcs	r3, r3
 8001352:	4593      	cmp	fp, r2
 8001354:	4192      	sbcs	r2, r2
 8001356:	45a4      	cmp	ip, r4
 8001358:	41a4      	sbcs	r4, r4
 800135a:	425b      	negs	r3, r3
 800135c:	427f      	negs	r7, r7
 800135e:	431f      	orrs	r7, r3
 8001360:	0c36      	lsrs	r6, r6, #16
 8001362:	4252      	negs	r2, r2
 8001364:	4264      	negs	r4, r4
 8001366:	19bf      	adds	r7, r7, r6
 8001368:	4322      	orrs	r2, r4
 800136a:	18bf      	adds	r7, r7, r2
 800136c:	4662      	mov	r2, ip
 800136e:	1838      	adds	r0, r7, r0
 8001370:	0243      	lsls	r3, r0, #9
 8001372:	0dd2      	lsrs	r2, r2, #23
 8001374:	9903      	ldr	r1, [sp, #12]
 8001376:	4313      	orrs	r3, r2
 8001378:	026a      	lsls	r2, r5, #9
 800137a:	430a      	orrs	r2, r1
 800137c:	1e50      	subs	r0, r2, #1
 800137e:	4182      	sbcs	r2, r0
 8001380:	4661      	mov	r1, ip
 8001382:	0ded      	lsrs	r5, r5, #23
 8001384:	432a      	orrs	r2, r5
 8001386:	024e      	lsls	r6, r1, #9
 8001388:	4332      	orrs	r2, r6
 800138a:	01d9      	lsls	r1, r3, #7
 800138c:	d400      	bmi.n	8001390 <__aeabi_dmul+0x31c>
 800138e:	e0b3      	b.n	80014f8 <__aeabi_dmul+0x484>
 8001390:	2601      	movs	r6, #1
 8001392:	0850      	lsrs	r0, r2, #1
 8001394:	4032      	ands	r2, r6
 8001396:	4302      	orrs	r2, r0
 8001398:	07de      	lsls	r6, r3, #31
 800139a:	4332      	orrs	r2, r6
 800139c:	085b      	lsrs	r3, r3, #1
 800139e:	4c22      	ldr	r4, [pc, #136]	; (8001428 <__aeabi_dmul+0x3b4>)
 80013a0:	4454      	add	r4, sl
 80013a2:	2c00      	cmp	r4, #0
 80013a4:	dd62      	ble.n	800146c <__aeabi_dmul+0x3f8>
 80013a6:	0751      	lsls	r1, r2, #29
 80013a8:	d009      	beq.n	80013be <__aeabi_dmul+0x34a>
 80013aa:	200f      	movs	r0, #15
 80013ac:	4010      	ands	r0, r2
 80013ae:	2804      	cmp	r0, #4
 80013b0:	d005      	beq.n	80013be <__aeabi_dmul+0x34a>
 80013b2:	1d10      	adds	r0, r2, #4
 80013b4:	4290      	cmp	r0, r2
 80013b6:	4192      	sbcs	r2, r2
 80013b8:	4252      	negs	r2, r2
 80013ba:	189b      	adds	r3, r3, r2
 80013bc:	0002      	movs	r2, r0
 80013be:	01d9      	lsls	r1, r3, #7
 80013c0:	d504      	bpl.n	80013cc <__aeabi_dmul+0x358>
 80013c2:	2480      	movs	r4, #128	; 0x80
 80013c4:	4819      	ldr	r0, [pc, #100]	; (800142c <__aeabi_dmul+0x3b8>)
 80013c6:	00e4      	lsls	r4, r4, #3
 80013c8:	4003      	ands	r3, r0
 80013ca:	4454      	add	r4, sl
 80013cc:	4818      	ldr	r0, [pc, #96]	; (8001430 <__aeabi_dmul+0x3bc>)
 80013ce:	4284      	cmp	r4, r0
 80013d0:	dd00      	ble.n	80013d4 <__aeabi_dmul+0x360>
 80013d2:	e727      	b.n	8001224 <__aeabi_dmul+0x1b0>
 80013d4:	075e      	lsls	r6, r3, #29
 80013d6:	025b      	lsls	r3, r3, #9
 80013d8:	08d2      	lsrs	r2, r2, #3
 80013da:	0b1f      	lsrs	r7, r3, #12
 80013dc:	0563      	lsls	r3, r4, #21
 80013de:	4316      	orrs	r6, r2
 80013e0:	0d5b      	lsrs	r3, r3, #21
 80013e2:	e6b2      	b.n	800114a <__aeabi_dmul+0xd6>
 80013e4:	2300      	movs	r3, #0
 80013e6:	4699      	mov	r9, r3
 80013e8:	3301      	adds	r3, #1
 80013ea:	2704      	movs	r7, #4
 80013ec:	2600      	movs	r6, #0
 80013ee:	469b      	mov	fp, r3
 80013f0:	e664      	b.n	80010bc <__aeabi_dmul+0x48>
 80013f2:	2303      	movs	r3, #3
 80013f4:	9701      	str	r7, [sp, #4]
 80013f6:	4681      	mov	r9, r0
 80013f8:	270c      	movs	r7, #12
 80013fa:	469b      	mov	fp, r3
 80013fc:	e65e      	b.n	80010bc <__aeabi_dmul+0x48>
 80013fe:	2201      	movs	r2, #1
 8001400:	2001      	movs	r0, #1
 8001402:	4317      	orrs	r7, r2
 8001404:	2200      	movs	r2, #0
 8001406:	e676      	b.n	80010f6 <__aeabi_dmul+0x82>
 8001408:	2303      	movs	r3, #3
 800140a:	2003      	movs	r0, #3
 800140c:	431f      	orrs	r7, r3
 800140e:	4643      	mov	r3, r8
 8001410:	e671      	b.n	80010f6 <__aeabi_dmul+0x82>
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	000007ff 	.word	0x000007ff
 8001418:	fffffc01 	.word	0xfffffc01
 800141c:	08004188 	.word	0x08004188
 8001420:	800fffff 	.word	0x800fffff
 8001424:	fffffc0d 	.word	0xfffffc0d
 8001428:	000003ff 	.word	0x000003ff
 800142c:	feffffff 	.word	0xfeffffff
 8001430:	000007fe 	.word	0x000007fe
 8001434:	2300      	movs	r3, #0
 8001436:	2780      	movs	r7, #128	; 0x80
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	033f      	lsls	r7, r7, #12
 800143c:	2600      	movs	r6, #0
 800143e:	4b43      	ldr	r3, [pc, #268]	; (800154c <__aeabi_dmul+0x4d8>)
 8001440:	e683      	b.n	800114a <__aeabi_dmul+0xd6>
 8001442:	9b01      	ldr	r3, [sp, #4]
 8001444:	0032      	movs	r2, r6
 8001446:	46a4      	mov	ip, r4
 8001448:	4658      	mov	r0, fp
 800144a:	e670      	b.n	800112e <__aeabi_dmul+0xba>
 800144c:	46ac      	mov	ip, r5
 800144e:	e66e      	b.n	800112e <__aeabi_dmul+0xba>
 8001450:	2780      	movs	r7, #128	; 0x80
 8001452:	9901      	ldr	r1, [sp, #4]
 8001454:	033f      	lsls	r7, r7, #12
 8001456:	4239      	tst	r1, r7
 8001458:	d02d      	beq.n	80014b6 <__aeabi_dmul+0x442>
 800145a:	423b      	tst	r3, r7
 800145c:	d12b      	bne.n	80014b6 <__aeabi_dmul+0x442>
 800145e:	431f      	orrs	r7, r3
 8001460:	033f      	lsls	r7, r7, #12
 8001462:	0b3f      	lsrs	r7, r7, #12
 8001464:	9500      	str	r5, [sp, #0]
 8001466:	0016      	movs	r6, r2
 8001468:	4b38      	ldr	r3, [pc, #224]	; (800154c <__aeabi_dmul+0x4d8>)
 800146a:	e66e      	b.n	800114a <__aeabi_dmul+0xd6>
 800146c:	2501      	movs	r5, #1
 800146e:	1b2d      	subs	r5, r5, r4
 8001470:	2d38      	cmp	r5, #56	; 0x38
 8001472:	dd00      	ble.n	8001476 <__aeabi_dmul+0x402>
 8001474:	e666      	b.n	8001144 <__aeabi_dmul+0xd0>
 8001476:	2d1f      	cmp	r5, #31
 8001478:	dc40      	bgt.n	80014fc <__aeabi_dmul+0x488>
 800147a:	4835      	ldr	r0, [pc, #212]	; (8001550 <__aeabi_dmul+0x4dc>)
 800147c:	001c      	movs	r4, r3
 800147e:	4450      	add	r0, sl
 8001480:	0016      	movs	r6, r2
 8001482:	4082      	lsls	r2, r0
 8001484:	4084      	lsls	r4, r0
 8001486:	40ee      	lsrs	r6, r5
 8001488:	1e50      	subs	r0, r2, #1
 800148a:	4182      	sbcs	r2, r0
 800148c:	4334      	orrs	r4, r6
 800148e:	4314      	orrs	r4, r2
 8001490:	40eb      	lsrs	r3, r5
 8001492:	0762      	lsls	r2, r4, #29
 8001494:	d009      	beq.n	80014aa <__aeabi_dmul+0x436>
 8001496:	220f      	movs	r2, #15
 8001498:	4022      	ands	r2, r4
 800149a:	2a04      	cmp	r2, #4
 800149c:	d005      	beq.n	80014aa <__aeabi_dmul+0x436>
 800149e:	0022      	movs	r2, r4
 80014a0:	1d14      	adds	r4, r2, #4
 80014a2:	4294      	cmp	r4, r2
 80014a4:	4180      	sbcs	r0, r0
 80014a6:	4240      	negs	r0, r0
 80014a8:	181b      	adds	r3, r3, r0
 80014aa:	021a      	lsls	r2, r3, #8
 80014ac:	d53e      	bpl.n	800152c <__aeabi_dmul+0x4b8>
 80014ae:	2301      	movs	r3, #1
 80014b0:	2700      	movs	r7, #0
 80014b2:	2600      	movs	r6, #0
 80014b4:	e649      	b.n	800114a <__aeabi_dmul+0xd6>
 80014b6:	2780      	movs	r7, #128	; 0x80
 80014b8:	9b01      	ldr	r3, [sp, #4]
 80014ba:	033f      	lsls	r7, r7, #12
 80014bc:	431f      	orrs	r7, r3
 80014be:	033f      	lsls	r7, r7, #12
 80014c0:	0b3f      	lsrs	r7, r7, #12
 80014c2:	9400      	str	r4, [sp, #0]
 80014c4:	4b21      	ldr	r3, [pc, #132]	; (800154c <__aeabi_dmul+0x4d8>)
 80014c6:	e640      	b.n	800114a <__aeabi_dmul+0xd6>
 80014c8:	0003      	movs	r3, r0
 80014ca:	465a      	mov	r2, fp
 80014cc:	3b28      	subs	r3, #40	; 0x28
 80014ce:	409a      	lsls	r2, r3
 80014d0:	2600      	movs	r6, #0
 80014d2:	9201      	str	r2, [sp, #4]
 80014d4:	e66d      	b.n	80011b2 <__aeabi_dmul+0x13e>
 80014d6:	4658      	mov	r0, fp
 80014d8:	f000 f94e 	bl	8001778 <__clzsi2>
 80014dc:	3020      	adds	r0, #32
 80014de:	e657      	b.n	8001190 <__aeabi_dmul+0x11c>
 80014e0:	0003      	movs	r3, r0
 80014e2:	4652      	mov	r2, sl
 80014e4:	3b28      	subs	r3, #40	; 0x28
 80014e6:	409a      	lsls	r2, r3
 80014e8:	0013      	movs	r3, r2
 80014ea:	2200      	movs	r2, #0
 80014ec:	e693      	b.n	8001216 <__aeabi_dmul+0x1a2>
 80014ee:	4650      	mov	r0, sl
 80014f0:	f000 f942 	bl	8001778 <__clzsi2>
 80014f4:	3020      	adds	r0, #32
 80014f6:	e67b      	b.n	80011f0 <__aeabi_dmul+0x17c>
 80014f8:	46ca      	mov	sl, r9
 80014fa:	e750      	b.n	800139e <__aeabi_dmul+0x32a>
 80014fc:	201f      	movs	r0, #31
 80014fe:	001e      	movs	r6, r3
 8001500:	4240      	negs	r0, r0
 8001502:	1b04      	subs	r4, r0, r4
 8001504:	40e6      	lsrs	r6, r4
 8001506:	2d20      	cmp	r5, #32
 8001508:	d003      	beq.n	8001512 <__aeabi_dmul+0x49e>
 800150a:	4c12      	ldr	r4, [pc, #72]	; (8001554 <__aeabi_dmul+0x4e0>)
 800150c:	4454      	add	r4, sl
 800150e:	40a3      	lsls	r3, r4
 8001510:	431a      	orrs	r2, r3
 8001512:	1e50      	subs	r0, r2, #1
 8001514:	4182      	sbcs	r2, r0
 8001516:	4332      	orrs	r2, r6
 8001518:	2607      	movs	r6, #7
 800151a:	2700      	movs	r7, #0
 800151c:	4016      	ands	r6, r2
 800151e:	d009      	beq.n	8001534 <__aeabi_dmul+0x4c0>
 8001520:	200f      	movs	r0, #15
 8001522:	2300      	movs	r3, #0
 8001524:	4010      	ands	r0, r2
 8001526:	0014      	movs	r4, r2
 8001528:	2804      	cmp	r0, #4
 800152a:	d1b9      	bne.n	80014a0 <__aeabi_dmul+0x42c>
 800152c:	0022      	movs	r2, r4
 800152e:	075e      	lsls	r6, r3, #29
 8001530:	025b      	lsls	r3, r3, #9
 8001532:	0b1f      	lsrs	r7, r3, #12
 8001534:	08d2      	lsrs	r2, r2, #3
 8001536:	4316      	orrs	r6, r2
 8001538:	2300      	movs	r3, #0
 800153a:	e606      	b.n	800114a <__aeabi_dmul+0xd6>
 800153c:	2780      	movs	r7, #128	; 0x80
 800153e:	033f      	lsls	r7, r7, #12
 8001540:	431f      	orrs	r7, r3
 8001542:	033f      	lsls	r7, r7, #12
 8001544:	0b3f      	lsrs	r7, r7, #12
 8001546:	0016      	movs	r6, r2
 8001548:	4b00      	ldr	r3, [pc, #0]	; (800154c <__aeabi_dmul+0x4d8>)
 800154a:	e5fe      	b.n	800114a <__aeabi_dmul+0xd6>
 800154c:	000007ff 	.word	0x000007ff
 8001550:	0000041e 	.word	0x0000041e
 8001554:	0000043e 	.word	0x0000043e

08001558 <__aeabi_i2d>:
 8001558:	b570      	push	{r4, r5, r6, lr}
 800155a:	2800      	cmp	r0, #0
 800155c:	d02d      	beq.n	80015ba <__aeabi_i2d+0x62>
 800155e:	17c3      	asrs	r3, r0, #31
 8001560:	18c5      	adds	r5, r0, r3
 8001562:	405d      	eors	r5, r3
 8001564:	0fc4      	lsrs	r4, r0, #31
 8001566:	0028      	movs	r0, r5
 8001568:	f000 f906 	bl	8001778 <__clzsi2>
 800156c:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <__aeabi_i2d+0x6c>)
 800156e:	1a1b      	subs	r3, r3, r0
 8001570:	055b      	lsls	r3, r3, #21
 8001572:	0d5b      	lsrs	r3, r3, #21
 8001574:	280a      	cmp	r0, #10
 8001576:	dd15      	ble.n	80015a4 <__aeabi_i2d+0x4c>
 8001578:	380b      	subs	r0, #11
 800157a:	4085      	lsls	r5, r0
 800157c:	2200      	movs	r2, #0
 800157e:	032d      	lsls	r5, r5, #12
 8001580:	0b2d      	lsrs	r5, r5, #12
 8001582:	2100      	movs	r1, #0
 8001584:	0010      	movs	r0, r2
 8001586:	032d      	lsls	r5, r5, #12
 8001588:	0d0a      	lsrs	r2, r1, #20
 800158a:	0b2d      	lsrs	r5, r5, #12
 800158c:	0512      	lsls	r2, r2, #20
 800158e:	432a      	orrs	r2, r5
 8001590:	4d0d      	ldr	r5, [pc, #52]	; (80015c8 <__aeabi_i2d+0x70>)
 8001592:	051b      	lsls	r3, r3, #20
 8001594:	402a      	ands	r2, r5
 8001596:	4313      	orrs	r3, r2
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	07e4      	lsls	r4, r4, #31
 800159c:	085b      	lsrs	r3, r3, #1
 800159e:	4323      	orrs	r3, r4
 80015a0:	0019      	movs	r1, r3
 80015a2:	bd70      	pop	{r4, r5, r6, pc}
 80015a4:	0002      	movs	r2, r0
 80015a6:	0029      	movs	r1, r5
 80015a8:	3215      	adds	r2, #21
 80015aa:	4091      	lsls	r1, r2
 80015ac:	000a      	movs	r2, r1
 80015ae:	210b      	movs	r1, #11
 80015b0:	1a08      	subs	r0, r1, r0
 80015b2:	40c5      	lsrs	r5, r0
 80015b4:	032d      	lsls	r5, r5, #12
 80015b6:	0b2d      	lsrs	r5, r5, #12
 80015b8:	e7e3      	b.n	8001582 <__aeabi_i2d+0x2a>
 80015ba:	2400      	movs	r4, #0
 80015bc:	2300      	movs	r3, #0
 80015be:	2500      	movs	r5, #0
 80015c0:	2200      	movs	r2, #0
 80015c2:	e7de      	b.n	8001582 <__aeabi_i2d+0x2a>
 80015c4:	0000041e 	.word	0x0000041e
 80015c8:	800fffff 	.word	0x800fffff

080015cc <__aeabi_f2d>:
 80015cc:	0041      	lsls	r1, r0, #1
 80015ce:	0e09      	lsrs	r1, r1, #24
 80015d0:	1c4b      	adds	r3, r1, #1
 80015d2:	b570      	push	{r4, r5, r6, lr}
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	0246      	lsls	r6, r0, #9
 80015d8:	0a75      	lsrs	r5, r6, #9
 80015da:	0fc4      	lsrs	r4, r0, #31
 80015dc:	2b01      	cmp	r3, #1
 80015de:	dd14      	ble.n	800160a <__aeabi_f2d+0x3e>
 80015e0:	23e0      	movs	r3, #224	; 0xe0
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	076d      	lsls	r5, r5, #29
 80015e6:	0b36      	lsrs	r6, r6, #12
 80015e8:	18cb      	adds	r3, r1, r3
 80015ea:	2100      	movs	r1, #0
 80015ec:	0d0a      	lsrs	r2, r1, #20
 80015ee:	0028      	movs	r0, r5
 80015f0:	0512      	lsls	r2, r2, #20
 80015f2:	4d1c      	ldr	r5, [pc, #112]	; (8001664 <__aeabi_f2d+0x98>)
 80015f4:	4332      	orrs	r2, r6
 80015f6:	055b      	lsls	r3, r3, #21
 80015f8:	402a      	ands	r2, r5
 80015fa:	085b      	lsrs	r3, r3, #1
 80015fc:	4313      	orrs	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	07e4      	lsls	r4, r4, #31
 8001602:	085b      	lsrs	r3, r3, #1
 8001604:	4323      	orrs	r3, r4
 8001606:	0019      	movs	r1, r3
 8001608:	bd70      	pop	{r4, r5, r6, pc}
 800160a:	2900      	cmp	r1, #0
 800160c:	d114      	bne.n	8001638 <__aeabi_f2d+0x6c>
 800160e:	2d00      	cmp	r5, #0
 8001610:	d01e      	beq.n	8001650 <__aeabi_f2d+0x84>
 8001612:	0028      	movs	r0, r5
 8001614:	f000 f8b0 	bl	8001778 <__clzsi2>
 8001618:	280a      	cmp	r0, #10
 800161a:	dc1c      	bgt.n	8001656 <__aeabi_f2d+0x8a>
 800161c:	230b      	movs	r3, #11
 800161e:	002a      	movs	r2, r5
 8001620:	1a1b      	subs	r3, r3, r0
 8001622:	40da      	lsrs	r2, r3
 8001624:	0003      	movs	r3, r0
 8001626:	3315      	adds	r3, #21
 8001628:	409d      	lsls	r5, r3
 800162a:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <__aeabi_f2d+0x9c>)
 800162c:	0312      	lsls	r2, r2, #12
 800162e:	1a1b      	subs	r3, r3, r0
 8001630:	055b      	lsls	r3, r3, #21
 8001632:	0b16      	lsrs	r6, r2, #12
 8001634:	0d5b      	lsrs	r3, r3, #21
 8001636:	e7d8      	b.n	80015ea <__aeabi_f2d+0x1e>
 8001638:	2d00      	cmp	r5, #0
 800163a:	d006      	beq.n	800164a <__aeabi_f2d+0x7e>
 800163c:	0b32      	lsrs	r2, r6, #12
 800163e:	2680      	movs	r6, #128	; 0x80
 8001640:	0336      	lsls	r6, r6, #12
 8001642:	076d      	lsls	r5, r5, #29
 8001644:	4316      	orrs	r6, r2
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <__aeabi_f2d+0xa0>)
 8001648:	e7cf      	b.n	80015ea <__aeabi_f2d+0x1e>
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <__aeabi_f2d+0xa0>)
 800164c:	2600      	movs	r6, #0
 800164e:	e7cc      	b.n	80015ea <__aeabi_f2d+0x1e>
 8001650:	2300      	movs	r3, #0
 8001652:	2600      	movs	r6, #0
 8001654:	e7c9      	b.n	80015ea <__aeabi_f2d+0x1e>
 8001656:	0003      	movs	r3, r0
 8001658:	002a      	movs	r2, r5
 800165a:	3b0b      	subs	r3, #11
 800165c:	409a      	lsls	r2, r3
 800165e:	2500      	movs	r5, #0
 8001660:	e7e3      	b.n	800162a <__aeabi_f2d+0x5e>
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	800fffff 	.word	0x800fffff
 8001668:	00000389 	.word	0x00000389
 800166c:	000007ff 	.word	0x000007ff

08001670 <__aeabi_d2f>:
 8001670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001672:	004c      	lsls	r4, r1, #1
 8001674:	0d64      	lsrs	r4, r4, #21
 8001676:	030b      	lsls	r3, r1, #12
 8001678:	1c62      	adds	r2, r4, #1
 800167a:	0a5b      	lsrs	r3, r3, #9
 800167c:	0f46      	lsrs	r6, r0, #29
 800167e:	0552      	lsls	r2, r2, #21
 8001680:	0fc9      	lsrs	r1, r1, #31
 8001682:	431e      	orrs	r6, r3
 8001684:	00c5      	lsls	r5, r0, #3
 8001686:	0d52      	lsrs	r2, r2, #21
 8001688:	2a01      	cmp	r2, #1
 800168a:	dd29      	ble.n	80016e0 <__aeabi_d2f+0x70>
 800168c:	4b37      	ldr	r3, [pc, #220]	; (800176c <__aeabi_d2f+0xfc>)
 800168e:	18e7      	adds	r7, r4, r3
 8001690:	2ffe      	cmp	r7, #254	; 0xfe
 8001692:	dc1c      	bgt.n	80016ce <__aeabi_d2f+0x5e>
 8001694:	2f00      	cmp	r7, #0
 8001696:	dd3b      	ble.n	8001710 <__aeabi_d2f+0xa0>
 8001698:	0180      	lsls	r0, r0, #6
 800169a:	1e43      	subs	r3, r0, #1
 800169c:	4198      	sbcs	r0, r3
 800169e:	2207      	movs	r2, #7
 80016a0:	00f3      	lsls	r3, r6, #3
 80016a2:	0f6d      	lsrs	r5, r5, #29
 80016a4:	4303      	orrs	r3, r0
 80016a6:	432b      	orrs	r3, r5
 80016a8:	401a      	ands	r2, r3
 80016aa:	2a00      	cmp	r2, #0
 80016ac:	d004      	beq.n	80016b8 <__aeabi_d2f+0x48>
 80016ae:	220f      	movs	r2, #15
 80016b0:	401a      	ands	r2, r3
 80016b2:	2a04      	cmp	r2, #4
 80016b4:	d000      	beq.n	80016b8 <__aeabi_d2f+0x48>
 80016b6:	3304      	adds	r3, #4
 80016b8:	2280      	movs	r2, #128	; 0x80
 80016ba:	04d2      	lsls	r2, r2, #19
 80016bc:	401a      	ands	r2, r3
 80016be:	d024      	beq.n	800170a <__aeabi_d2f+0x9a>
 80016c0:	3701      	adds	r7, #1
 80016c2:	b2fa      	uxtb	r2, r7
 80016c4:	2fff      	cmp	r7, #255	; 0xff
 80016c6:	d002      	beq.n	80016ce <__aeabi_d2f+0x5e>
 80016c8:	019b      	lsls	r3, r3, #6
 80016ca:	0a58      	lsrs	r0, r3, #9
 80016cc:	e001      	b.n	80016d2 <__aeabi_d2f+0x62>
 80016ce:	22ff      	movs	r2, #255	; 0xff
 80016d0:	2000      	movs	r0, #0
 80016d2:	0240      	lsls	r0, r0, #9
 80016d4:	05d2      	lsls	r2, r2, #23
 80016d6:	0a40      	lsrs	r0, r0, #9
 80016d8:	07c9      	lsls	r1, r1, #31
 80016da:	4310      	orrs	r0, r2
 80016dc:	4308      	orrs	r0, r1
 80016de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016e0:	4335      	orrs	r5, r6
 80016e2:	2c00      	cmp	r4, #0
 80016e4:	d104      	bne.n	80016f0 <__aeabi_d2f+0x80>
 80016e6:	2d00      	cmp	r5, #0
 80016e8:	d10a      	bne.n	8001700 <__aeabi_d2f+0x90>
 80016ea:	2200      	movs	r2, #0
 80016ec:	2000      	movs	r0, #0
 80016ee:	e7f0      	b.n	80016d2 <__aeabi_d2f+0x62>
 80016f0:	2d00      	cmp	r5, #0
 80016f2:	d0ec      	beq.n	80016ce <__aeabi_d2f+0x5e>
 80016f4:	2080      	movs	r0, #128	; 0x80
 80016f6:	03c0      	lsls	r0, r0, #15
 80016f8:	4330      	orrs	r0, r6
 80016fa:	22ff      	movs	r2, #255	; 0xff
 80016fc:	e7e9      	b.n	80016d2 <__aeabi_d2f+0x62>
 80016fe:	2400      	movs	r4, #0
 8001700:	2300      	movs	r3, #0
 8001702:	025b      	lsls	r3, r3, #9
 8001704:	0a58      	lsrs	r0, r3, #9
 8001706:	b2e2      	uxtb	r2, r4
 8001708:	e7e3      	b.n	80016d2 <__aeabi_d2f+0x62>
 800170a:	08db      	lsrs	r3, r3, #3
 800170c:	003c      	movs	r4, r7
 800170e:	e7f8      	b.n	8001702 <__aeabi_d2f+0x92>
 8001710:	003b      	movs	r3, r7
 8001712:	3317      	adds	r3, #23
 8001714:	dbf3      	blt.n	80016fe <__aeabi_d2f+0x8e>
 8001716:	2380      	movs	r3, #128	; 0x80
 8001718:	041b      	lsls	r3, r3, #16
 800171a:	4333      	orrs	r3, r6
 800171c:	261e      	movs	r6, #30
 800171e:	1bf6      	subs	r6, r6, r7
 8001720:	2e1f      	cmp	r6, #31
 8001722:	dd14      	ble.n	800174e <__aeabi_d2f+0xde>
 8001724:	2202      	movs	r2, #2
 8001726:	4252      	negs	r2, r2
 8001728:	1bd7      	subs	r7, r2, r7
 800172a:	001a      	movs	r2, r3
 800172c:	40fa      	lsrs	r2, r7
 800172e:	0017      	movs	r7, r2
 8001730:	2e20      	cmp	r6, #32
 8001732:	d004      	beq.n	800173e <__aeabi_d2f+0xce>
 8001734:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <__aeabi_d2f+0x100>)
 8001736:	4694      	mov	ip, r2
 8001738:	4464      	add	r4, ip
 800173a:	40a3      	lsls	r3, r4
 800173c:	431d      	orrs	r5, r3
 800173e:	002b      	movs	r3, r5
 8001740:	1e5d      	subs	r5, r3, #1
 8001742:	41ab      	sbcs	r3, r5
 8001744:	2207      	movs	r2, #7
 8001746:	433b      	orrs	r3, r7
 8001748:	401a      	ands	r2, r3
 800174a:	2700      	movs	r7, #0
 800174c:	e7ad      	b.n	80016aa <__aeabi_d2f+0x3a>
 800174e:	4a09      	ldr	r2, [pc, #36]	; (8001774 <__aeabi_d2f+0x104>)
 8001750:	0028      	movs	r0, r5
 8001752:	18a2      	adds	r2, r4, r2
 8001754:	4095      	lsls	r5, r2
 8001756:	4093      	lsls	r3, r2
 8001758:	1e6c      	subs	r4, r5, #1
 800175a:	41a5      	sbcs	r5, r4
 800175c:	40f0      	lsrs	r0, r6
 800175e:	2207      	movs	r2, #7
 8001760:	432b      	orrs	r3, r5
 8001762:	4303      	orrs	r3, r0
 8001764:	401a      	ands	r2, r3
 8001766:	2700      	movs	r7, #0
 8001768:	e79f      	b.n	80016aa <__aeabi_d2f+0x3a>
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	fffffc80 	.word	0xfffffc80
 8001770:	fffffca2 	.word	0xfffffca2
 8001774:	fffffc82 	.word	0xfffffc82

08001778 <__clzsi2>:
 8001778:	211c      	movs	r1, #28
 800177a:	2301      	movs	r3, #1
 800177c:	041b      	lsls	r3, r3, #16
 800177e:	4298      	cmp	r0, r3
 8001780:	d301      	bcc.n	8001786 <__clzsi2+0xe>
 8001782:	0c00      	lsrs	r0, r0, #16
 8001784:	3910      	subs	r1, #16
 8001786:	0a1b      	lsrs	r3, r3, #8
 8001788:	4298      	cmp	r0, r3
 800178a:	d301      	bcc.n	8001790 <__clzsi2+0x18>
 800178c:	0a00      	lsrs	r0, r0, #8
 800178e:	3908      	subs	r1, #8
 8001790:	091b      	lsrs	r3, r3, #4
 8001792:	4298      	cmp	r0, r3
 8001794:	d301      	bcc.n	800179a <__clzsi2+0x22>
 8001796:	0900      	lsrs	r0, r0, #4
 8001798:	3904      	subs	r1, #4
 800179a:	a202      	add	r2, pc, #8	; (adr r2, 80017a4 <__clzsi2+0x2c>)
 800179c:	5c10      	ldrb	r0, [r2, r0]
 800179e:	1840      	adds	r0, r0, r1
 80017a0:	4770      	bx	lr
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	02020304 	.word	0x02020304
 80017a8:	01010101 	.word	0x01010101
	...

080017b4 <__clzdi2>:
 80017b4:	b510      	push	{r4, lr}
 80017b6:	2900      	cmp	r1, #0
 80017b8:	d103      	bne.n	80017c2 <__clzdi2+0xe>
 80017ba:	f7ff ffdd 	bl	8001778 <__clzsi2>
 80017be:	3020      	adds	r0, #32
 80017c0:	e002      	b.n	80017c8 <__clzdi2+0x14>
 80017c2:	1c08      	adds	r0, r1, #0
 80017c4:	f7ff ffd8 	bl	8001778 <__clzsi2>
 80017c8:	bd10      	pop	{r4, pc}
 80017ca:	46c0      	nop			; (mov r8, r8)

080017cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017d0:	f000 fc12 	bl	8001ff8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017d4:	f000 f824 	bl	8001820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017d8:	f000 f918 	bl	8001a0c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017dc:	f000 f8e6 	bl	80019ac <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80017e0:	f000 f890 	bl	8001904 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  SetGreenLed(GPIO_PIN_SET);
 80017e4:	2001      	movs	r0, #1
 80017e6:	f000 fbc9 	bl	8001f7c <SetGreenLed>
  HAL_TIM_Base_Start(&htim2);
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <main+0x4c>)
 80017ec:	0018      	movs	r0, r3
 80017ee:	f001 fdf9 	bl	80033e4 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	DHT_Collect_Sensor_Data();
 80017f2:	f000 faff 	bl	8001df4 <DHT_Collect_Sensor_Data>
	SetGreenLed(GPIO_PIN_SET);
 80017f6:	2001      	movs	r0, #1
 80017f8:	f000 fbc0 	bl	8001f7c <SetGreenLed>
	HAL_Delay(3000);
 80017fc:	4b07      	ldr	r3, [pc, #28]	; (800181c <main+0x50>)
 80017fe:	0018      	movs	r0, r3
 8001800:	f000 fc6a 	bl	80020d8 <HAL_Delay>
	SetGreenLed(GPIO_PIN_RESET);
 8001804:	2000      	movs	r0, #0
 8001806:	f000 fbb9 	bl	8001f7c <SetGreenLed>
	HAL_Delay(1000);
 800180a:	23fa      	movs	r3, #250	; 0xfa
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	0018      	movs	r0, r3
 8001810:	f000 fc62 	bl	80020d8 <HAL_Delay>
	DHT_Collect_Sensor_Data();
 8001814:	e7ed      	b.n	80017f2 <main+0x26>
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	20000028 	.word	0x20000028
 800181c:	00000bb8 	.word	0x00000bb8

08001820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001820:	b590      	push	{r4, r7, lr}
 8001822:	b099      	sub	sp, #100	; 0x64
 8001824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001826:	242c      	movs	r4, #44	; 0x2c
 8001828:	193b      	adds	r3, r7, r4
 800182a:	0018      	movs	r0, r3
 800182c:	2334      	movs	r3, #52	; 0x34
 800182e:	001a      	movs	r2, r3
 8001830:	2100      	movs	r1, #0
 8001832:	f002 fc75 	bl	8004120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001836:	2318      	movs	r3, #24
 8001838:	18fb      	adds	r3, r7, r3
 800183a:	0018      	movs	r0, r3
 800183c:	2314      	movs	r3, #20
 800183e:	001a      	movs	r2, r3
 8001840:	2100      	movs	r1, #0
 8001842:	f002 fc6d 	bl	8004120 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001846:	003b      	movs	r3, r7
 8001848:	0018      	movs	r0, r3
 800184a:	2318      	movs	r3, #24
 800184c:	001a      	movs	r2, r3
 800184e:	2100      	movs	r1, #0
 8001850:	f002 fc66 	bl	8004120 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001854:	4b29      	ldr	r3, [pc, #164]	; (80018fc <SystemClock_Config+0xdc>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a29      	ldr	r2, [pc, #164]	; (8001900 <SystemClock_Config+0xe0>)
 800185a:	401a      	ands	r2, r3
 800185c:	4b27      	ldr	r3, [pc, #156]	; (80018fc <SystemClock_Config+0xdc>)
 800185e:	2180      	movs	r1, #128	; 0x80
 8001860:	0109      	lsls	r1, r1, #4
 8001862:	430a      	orrs	r2, r1
 8001864:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001866:	0021      	movs	r1, r4
 8001868:	187b      	adds	r3, r7, r1
 800186a:	2202      	movs	r2, #2
 800186c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800186e:	187b      	adds	r3, r7, r1
 8001870:	2201      	movs	r2, #1
 8001872:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001874:	187b      	adds	r3, r7, r1
 8001876:	2210      	movs	r2, #16
 8001878:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800187a:	187b      	adds	r3, r7, r1
 800187c:	2202      	movs	r2, #2
 800187e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001880:	187b      	adds	r3, r7, r1
 8001882:	2200      	movs	r2, #0
 8001884:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8001886:	187b      	adds	r3, r7, r1
 8001888:	2280      	movs	r2, #128	; 0x80
 800188a:	02d2      	lsls	r2, r2, #11
 800188c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800188e:	187b      	adds	r3, r7, r1
 8001890:	2280      	movs	r2, #128	; 0x80
 8001892:	03d2      	lsls	r2, r2, #15
 8001894:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001896:	187b      	adds	r3, r7, r1
 8001898:	0018      	movs	r0, r3
 800189a:	f000 fe9b 	bl	80025d4 <HAL_RCC_OscConfig>
 800189e:	1e03      	subs	r3, r0, #0
 80018a0:	d001      	beq.n	80018a6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80018a2:	f000 f91d 	bl	8001ae0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018a6:	2118      	movs	r1, #24
 80018a8:	187b      	adds	r3, r7, r1
 80018aa:	220f      	movs	r2, #15
 80018ac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ae:	187b      	adds	r3, r7, r1
 80018b0:	2203      	movs	r2, #3
 80018b2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b4:	187b      	adds	r3, r7, r1
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018ba:	187b      	adds	r3, r7, r1
 80018bc:	2200      	movs	r2, #0
 80018be:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018c0:	187b      	adds	r3, r7, r1
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018c6:	187b      	adds	r3, r7, r1
 80018c8:	2101      	movs	r1, #1
 80018ca:	0018      	movs	r0, r3
 80018cc:	f001 fa02 	bl	8002cd4 <HAL_RCC_ClockConfig>
 80018d0:	1e03      	subs	r3, r0, #0
 80018d2:	d001      	beq.n	80018d8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80018d4:	f000 f904 	bl	8001ae0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018d8:	003b      	movs	r3, r7
 80018da:	2202      	movs	r2, #2
 80018dc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018de:	003b      	movs	r3, r7
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018e4:	003b      	movs	r3, r7
 80018e6:	0018      	movs	r0, r3
 80018e8:	f001 fc14 	bl	8003114 <HAL_RCCEx_PeriphCLKConfig>
 80018ec:	1e03      	subs	r3, r0, #0
 80018ee:	d001      	beq.n	80018f4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80018f0:	f000 f8f6 	bl	8001ae0 <Error_Handler>
  }
}
 80018f4:	46c0      	nop			; (mov r8, r8)
 80018f6:	46bd      	mov	sp, r7
 80018f8:	b019      	add	sp, #100	; 0x64
 80018fa:	bd90      	pop	{r4, r7, pc}
 80018fc:	40007000 	.word	0x40007000
 8001900:	ffffe7ff 	.word	0xffffe7ff

08001904 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800190a:	2308      	movs	r3, #8
 800190c:	18fb      	adds	r3, r7, r3
 800190e:	0018      	movs	r0, r3
 8001910:	2310      	movs	r3, #16
 8001912:	001a      	movs	r2, r3
 8001914:	2100      	movs	r1, #0
 8001916:	f002 fc03 	bl	8004120 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191a:	003b      	movs	r3, r7
 800191c:	0018      	movs	r0, r3
 800191e:	2308      	movs	r3, #8
 8001920:	001a      	movs	r2, r3
 8001922:	2100      	movs	r1, #0
 8001924:	f002 fbfc 	bl	8004120 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001928:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <MX_TIM2_Init+0xa0>)
 800192a:	2280      	movs	r2, #128	; 0x80
 800192c:	05d2      	lsls	r2, r2, #23
 800192e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8001930:	4b1c      	ldr	r3, [pc, #112]	; (80019a4 <MX_TIM2_Init+0xa0>)
 8001932:	221f      	movs	r2, #31
 8001934:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001936:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <MX_TIM2_Init+0xa0>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <MX_TIM2_Init+0xa0>)
 800193e:	4a1a      	ldr	r2, [pc, #104]	; (80019a8 <MX_TIM2_Init+0xa4>)
 8001940:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001942:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <MX_TIM2_Init+0xa0>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001948:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <MX_TIM2_Init+0xa0>)
 800194a:	2280      	movs	r2, #128	; 0x80
 800194c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <MX_TIM2_Init+0xa0>)
 8001950:	0018      	movs	r0, r3
 8001952:	f001 fd07 	bl	8003364 <HAL_TIM_Base_Init>
 8001956:	1e03      	subs	r3, r0, #0
 8001958:	d001      	beq.n	800195e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800195a:	f000 f8c1 	bl	8001ae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800195e:	2108      	movs	r1, #8
 8001960:	187b      	adds	r3, r7, r1
 8001962:	2280      	movs	r2, #128	; 0x80
 8001964:	0152      	lsls	r2, r2, #5
 8001966:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001968:	187a      	adds	r2, r7, r1
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <MX_TIM2_Init+0xa0>)
 800196c:	0011      	movs	r1, r2
 800196e:	0018      	movs	r0, r3
 8001970:	f001 fd7c 	bl	800346c <HAL_TIM_ConfigClockSource>
 8001974:	1e03      	subs	r3, r0, #0
 8001976:	d001      	beq.n	800197c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001978:	f000 f8b2 	bl	8001ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800197c:	003b      	movs	r3, r7
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001982:	003b      	movs	r3, r7
 8001984:	2200      	movs	r2, #0
 8001986:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001988:	003a      	movs	r2, r7
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <MX_TIM2_Init+0xa0>)
 800198c:	0011      	movs	r1, r2
 800198e:	0018      	movs	r0, r3
 8001990:	f001 ff18 	bl	80037c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001994:	1e03      	subs	r3, r0, #0
 8001996:	d001      	beq.n	800199c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001998:	f000 f8a2 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800199c:	46c0      	nop			; (mov r8, r8)
 800199e:	46bd      	mov	sp, r7
 80019a0:	b006      	add	sp, #24
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000028 	.word	0x20000028
 80019a8:	0000ffff 	.word	0x0000ffff

080019ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019b0:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <MX_USART2_UART_Init+0x58>)
 80019b2:	4a15      	ldr	r2, [pc, #84]	; (8001a08 <MX_USART2_UART_Init+0x5c>)
 80019b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019b6:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <MX_USART2_UART_Init+0x58>)
 80019b8:	22e1      	movs	r2, #225	; 0xe1
 80019ba:	0252      	lsls	r2, r2, #9
 80019bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019be:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <MX_USART2_UART_Init+0x58>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <MX_USART2_UART_Init+0x58>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <MX_USART2_UART_Init+0x58>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <MX_USART2_UART_Init+0x58>)
 80019d2:	220c      	movs	r2, #12
 80019d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <MX_USART2_UART_Init+0x58>)
 80019d8:	2200      	movs	r2, #0
 80019da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019dc:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <MX_USART2_UART_Init+0x58>)
 80019de:	2200      	movs	r2, #0
 80019e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019e2:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <MX_USART2_UART_Init+0x58>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <MX_USART2_UART_Init+0x58>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019ee:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <MX_USART2_UART_Init+0x58>)
 80019f0:	0018      	movs	r0, r3
 80019f2:	f001 ff3f 	bl	8003874 <HAL_UART_Init>
 80019f6:	1e03      	subs	r3, r0, #0
 80019f8:	d001      	beq.n	80019fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019fa:	f000 f871 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000068 	.word	0x20000068
 8001a08:	40004400 	.word	0x40004400

08001a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b089      	sub	sp, #36	; 0x24
 8001a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a12:	240c      	movs	r4, #12
 8001a14:	193b      	adds	r3, r7, r4
 8001a16:	0018      	movs	r0, r3
 8001a18:	2314      	movs	r3, #20
 8001a1a:	001a      	movs	r2, r3
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	f002 fb7f 	bl	8004120 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a22:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <MX_GPIO_Init+0xcc>)
 8001a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a26:	4b2c      	ldr	r3, [pc, #176]	; (8001ad8 <MX_GPIO_Init+0xcc>)
 8001a28:	2104      	movs	r1, #4
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a2e:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <MX_GPIO_Init+0xcc>)
 8001a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a32:	2204      	movs	r2, #4
 8001a34:	4013      	ands	r3, r2
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3a:	4b27      	ldr	r3, [pc, #156]	; (8001ad8 <MX_GPIO_Init+0xcc>)
 8001a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a3e:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <MX_GPIO_Init+0xcc>)
 8001a40:	2101      	movs	r1, #1
 8001a42:	430a      	orrs	r2, r1
 8001a44:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a46:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <MX_GPIO_Init+0xcc>)
 8001a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a52:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <MX_GPIO_Init+0xcc>)
 8001a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a56:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <MX_GPIO_Init+0xcc>)
 8001a58:	2102      	movs	r1, #2
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <MX_GPIO_Init+0xcc>)
 8001a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a62:	2202      	movs	r2, #2
 8001a64:	4013      	ands	r3, r2
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001a6a:	23a0      	movs	r3, #160	; 0xa0
 8001a6c:	05db      	lsls	r3, r3, #23
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2108      	movs	r1, #8
 8001a72:	0018      	movs	r0, r3
 8001a74:	f000 fd91 	bl	800259a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001a78:	4b18      	ldr	r3, [pc, #96]	; (8001adc <MX_GPIO_Init+0xd0>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	2108      	movs	r1, #8
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f000 fd8b 	bl	800259a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a84:	193b      	adds	r3, r7, r4
 8001a86:	2208      	movs	r2, #8
 8001a88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8a:	193b      	adds	r3, r7, r4
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	193b      	adds	r3, r7, r4
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a96:	193b      	adds	r3, r7, r4
 8001a98:	2200      	movs	r2, #0
 8001a9a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9c:	193a      	adds	r2, r7, r4
 8001a9e:	23a0      	movs	r3, #160	; 0xa0
 8001aa0:	05db      	lsls	r3, r3, #23
 8001aa2:	0011      	movs	r1, r2
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f000 fbed 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001aaa:	0021      	movs	r1, r4
 8001aac:	187b      	adds	r3, r7, r1
 8001aae:	2208      	movs	r2, #8
 8001ab0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab2:	187b      	adds	r3, r7, r1
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	187b      	adds	r3, r7, r1
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	187b      	adds	r3, r7, r1
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001ac4:	187b      	adds	r3, r7, r1
 8001ac6:	4a05      	ldr	r2, [pc, #20]	; (8001adc <MX_GPIO_Init+0xd0>)
 8001ac8:	0019      	movs	r1, r3
 8001aca:	0010      	movs	r0, r2
 8001acc:	f000 fbda 	bl	8002284 <HAL_GPIO_Init>

}
 8001ad0:	46c0      	nop			; (mov r8, r8)
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b009      	add	sp, #36	; 0x24
 8001ad6:	bd90      	pop	{r4, r7, pc}
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	50000400 	.word	0x50000400

08001ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ae6:	e7fe      	b.n	8001ae6 <Error_Handler+0x6>

08001ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aec:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <HAL_MspInit+0x24>)
 8001aee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_MspInit+0x24>)
 8001af2:	2101      	movs	r1, #1
 8001af4:	430a      	orrs	r2, r1
 8001af6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af8:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <HAL_MspInit+0x24>)
 8001afa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <HAL_MspInit+0x24>)
 8001afe:	2180      	movs	r1, #128	; 0x80
 8001b00:	0549      	lsls	r1, r1, #21
 8001b02:	430a      	orrs	r2, r1
 8001b04:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40021000 	.word	0x40021000

08001b10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	05db      	lsls	r3, r3, #23
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d105      	bne.n	8001b30 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <HAL_TIM_Base_MspInit+0x28>)
 8001b26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <HAL_TIM_Base_MspInit+0x28>)
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b30:	46c0      	nop			; (mov r8, r8)
 8001b32:	46bd      	mov	sp, r7
 8001b34:	b002      	add	sp, #8
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40021000 	.word	0x40021000

08001b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	230c      	movs	r3, #12
 8001b46:	18fb      	adds	r3, r7, r3
 8001b48:	0018      	movs	r0, r3
 8001b4a:	2314      	movs	r3, #20
 8001b4c:	001a      	movs	r2, r3
 8001b4e:	2100      	movs	r1, #0
 8001b50:	f002 fae6 	bl	8004120 <memset>
  if(huart->Instance==USART2)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a18      	ldr	r2, [pc, #96]	; (8001bbc <HAL_UART_MspInit+0x80>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d129      	bne.n	8001bb2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b5e:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <HAL_UART_MspInit+0x84>)
 8001b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b62:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <HAL_UART_MspInit+0x84>)
 8001b64:	2180      	movs	r1, #128	; 0x80
 8001b66:	0289      	lsls	r1, r1, #10
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6c:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <HAL_UART_MspInit+0x84>)
 8001b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b70:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <HAL_UART_MspInit+0x84>)
 8001b72:	2101      	movs	r1, #1
 8001b74:	430a      	orrs	r2, r1
 8001b76:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b78:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <HAL_UART_MspInit+0x84>)
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	4013      	ands	r3, r2
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001b84:	210c      	movs	r1, #12
 8001b86:	187b      	adds	r3, r7, r1
 8001b88:	4a0e      	ldr	r2, [pc, #56]	; (8001bc4 <HAL_UART_MspInit+0x88>)
 8001b8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	187b      	adds	r3, r7, r1
 8001b8e:	2202      	movs	r2, #2
 8001b90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	187b      	adds	r3, r7, r1
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b98:	187b      	adds	r3, r7, r1
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001b9e:	187b      	adds	r3, r7, r1
 8001ba0:	2204      	movs	r2, #4
 8001ba2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba4:	187a      	adds	r2, r7, r1
 8001ba6:	23a0      	movs	r3, #160	; 0xa0
 8001ba8:	05db      	lsls	r3, r3, #23
 8001baa:	0011      	movs	r1, r2
 8001bac:	0018      	movs	r0, r3
 8001bae:	f000 fb69 	bl	8002284 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	b008      	add	sp, #32
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	40004400 	.word	0x40004400
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	00008004 	.word	0x00008004

08001bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <NMI_Handler+0x4>

08001bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd2:	e7fe      	b.n	8001bd2 <HardFault_Handler+0x4>

08001bd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001bd8:	46c0      	nop			; (mov r8, r8)
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bec:	f000 fa58 	bl	80020a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bf0:	46c0      	nop			; (mov r8, r8)
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bfa:	46c0      	nop			; (mov r8, r8)
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <Set_Pin_Output>:
float TemperatureFarenheit;
float HumidityPercentage;


void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c00:	b590      	push	{r4, r7, lr}
 8001c02:	b089      	sub	sp, #36	; 0x24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	000a      	movs	r2, r1
 8001c0a:	1cbb      	adds	r3, r7, #2
 8001c0c:	801a      	strh	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0e:	240c      	movs	r4, #12
 8001c10:	193b      	adds	r3, r7, r4
 8001c12:	0018      	movs	r0, r3
 8001c14:	2314      	movs	r3, #20
 8001c16:	001a      	movs	r2, r3
 8001c18:	2100      	movs	r1, #0
 8001c1a:	f002 fa81 	bl	8004120 <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001c1e:	1cbb      	adds	r3, r7, #2
 8001c20:	881a      	ldrh	r2, [r3, #0]
 8001c22:	0021      	movs	r1, r4
 8001c24:	187b      	adds	r3, r7, r1
 8001c26:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001c28:	187b      	adds	r3, r7, r1
 8001c2a:	2211      	movs	r2, #17
 8001c2c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c2e:	187b      	adds	r3, r7, r1
 8001c30:	2201      	movs	r2, #1
 8001c32:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001c34:	187b      	adds	r3, r7, r1
 8001c36:	2203      	movs	r2, #3
 8001c38:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001c3a:	187a      	adds	r2, r7, r1
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	0011      	movs	r1, r2
 8001c40:	0018      	movs	r0, r3
 8001c42:	f000 fb1f 	bl	8002284 <HAL_GPIO_Init>
}
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	b009      	add	sp, #36	; 0x24
 8001c4c:	bd90      	pop	{r4, r7, pc}

08001c4e <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c4e:	b590      	push	{r4, r7, lr}
 8001c50:	b089      	sub	sp, #36	; 0x24
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	000a      	movs	r2, r1
 8001c58:	1cbb      	adds	r3, r7, #2
 8001c5a:	801a      	strh	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	240c      	movs	r4, #12
 8001c5e:	193b      	adds	r3, r7, r4
 8001c60:	0018      	movs	r0, r3
 8001c62:	2314      	movs	r3, #20
 8001c64:	001a      	movs	r2, r3
 8001c66:	2100      	movs	r1, #0
 8001c68:	f002 fa5a 	bl	8004120 <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001c6c:	1cbb      	adds	r3, r7, #2
 8001c6e:	881a      	ldrh	r2, [r3, #0]
 8001c70:	0021      	movs	r1, r4
 8001c72:	187b      	adds	r3, r7, r1
 8001c74:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c76:	187b      	adds	r3, r7, r1
 8001c78:	2212      	movs	r2, #18
 8001c7a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c7c:	187b      	adds	r3, r7, r1
 8001c7e:	2201      	movs	r2, #1
 8001c80:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c82:	187b      	adds	r3, r7, r1
 8001c84:	2202      	movs	r2, #2
 8001c86:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001c88:	187a      	adds	r2, r7, r1
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	0011      	movs	r1, r2
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f000 faf8 	bl	8002284 <HAL_GPIO_Init>
}
 8001c94:	46c0      	nop			; (mov r8, r8)
 8001c96:	46bd      	mov	sp, r7
 8001c98:	b009      	add	sp, #36	; 0x24
 8001c9a:	bd90      	pop	{r4, r7, pc}

08001c9c <DHT_StartConversion>:
{
	return HumidityPercentage;
}

void DHT_StartConversion()
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
	// set the pin as output
	Set_Pin_Output(DHT_PORT, DHT_PIN);
 8001ca0:	23a0      	movs	r3, #160	; 0xa0
 8001ca2:	05db      	lsls	r3, r3, #23
 8001ca4:	2108      	movs	r1, #8
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f7ff ffaa 	bl	8001c00 <Set_Pin_Output>
	// pull the pin low for 2 milliseconds
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);
 8001cac:	23a0      	movs	r3, #160	; 0xa0
 8001cae:	05db      	lsls	r3, r3, #23
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2108      	movs	r1, #8
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	f000 fc70 	bl	800259a <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001cba:	2002      	movs	r0, #2
 8001cbc:	f000 fa0c 	bl	80020d8 <HAL_Delay>
	 // pull the pin high
    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);
 8001cc0:	23a0      	movs	r3, #160	; 0xa0
 8001cc2:	05db      	lsls	r3, r3, #23
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	2108      	movs	r1, #8
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f000 fc66 	bl	800259a <HAL_GPIO_WritePin>
    // wait 20 useconds
    delay_us(20);
 8001cce:	2014      	movs	r0, #20
 8001cd0:	f000 f93c 	bl	8001f4c <delay_us>
    // set the pin as input
	Set_Pin_Input(DHT_PORT, DHT_PIN);
 8001cd4:	23a0      	movs	r3, #160	; 0xa0
 8001cd6:	05db      	lsls	r3, r3, #23
 8001cd8:	2108      	movs	r1, #8
 8001cda:	0018      	movs	r0, r3
 8001cdc:	f7ff ffb7 	bl	8001c4e <Set_Pin_Input>
}
 8001ce0:	46c0      	nop			; (mov r8, r8)
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <DHT_Check_Response>:
#define RESPONSE_SUCCESS 1
#define RESPONSE_FAIL 0
uint8_t DHT_Check_Response(void)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
	uint8_t response = RESPONSE_FAIL;
 8001cec:	1dfb      	adds	r3, r7, #7
 8001cee:	2200      	movs	r2, #0
 8001cf0:	701a      	strb	r2, [r3, #0]
	delay_us(40);
 8001cf2:	2028      	movs	r0, #40	; 0x28
 8001cf4:	f000 f92a 	bl	8001f4c <delay_us>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8001cf8:	23a0      	movs	r3, #160	; 0xa0
 8001cfa:	05db      	lsls	r3, r3, #23
 8001cfc:	2108      	movs	r1, #8
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f000 fc2e 	bl	8002560 <HAL_GPIO_ReadPin>
 8001d04:	1e03      	subs	r3, r0, #0
 8001d06:	d111      	bne.n	8001d2c <DHT_Check_Response+0x46>
	{
		delay_us(80);
 8001d08:	2050      	movs	r0, #80	; 0x50
 8001d0a:	f000 f91f 	bl	8001f4c <delay_us>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8001d0e:	23a0      	movs	r3, #160	; 0xa0
 8001d10:	05db      	lsls	r3, r3, #23
 8001d12:	2108      	movs	r1, #8
 8001d14:	0018      	movs	r0, r3
 8001d16:	f000 fc23 	bl	8002560 <HAL_GPIO_ReadPin>
 8001d1a:	1e03      	subs	r3, r0, #0
 8001d1c:	d003      	beq.n	8001d26 <DHT_Check_Response+0x40>
		{
			response = RESPONSE_SUCCESS;
 8001d1e:	1dfb      	adds	r3, r7, #7
 8001d20:	2201      	movs	r2, #1
 8001d22:	701a      	strb	r2, [r3, #0]
 8001d24:	e002      	b.n	8001d2c <DHT_Check_Response+0x46>
		}
		else {
			response = RESPONSE_FAIL;
 8001d26:	1dfb      	adds	r3, r7, #7
 8001d28:	2200      	movs	r2, #0
 8001d2a:	701a      	strb	r2, [r3, #0]
		}
	}
	// TODO: what if this pin never goes low?
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8001d2c:	46c0      	nop			; (mov r8, r8)
 8001d2e:	23a0      	movs	r3, #160	; 0xa0
 8001d30:	05db      	lsls	r3, r3, #23
 8001d32:	2108      	movs	r1, #8
 8001d34:	0018      	movs	r0, r3
 8001d36:	f000 fc13 	bl	8002560 <HAL_GPIO_ReadPin>
 8001d3a:	1e03      	subs	r3, r0, #0
 8001d3c:	d1f7      	bne.n	8001d2e <DHT_Check_Response+0x48>

	return response;
 8001d3e:	1dfb      	adds	r3, r7, #7
 8001d40:	781b      	ldrb	r3, [r3, #0]
}
 8001d42:	0018      	movs	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	b002      	add	sp, #8
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <DHT_Read_Byte>:
uint8_t DHT_Read_Byte (void)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8001d50:	1dbb      	adds	r3, r7, #6
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
 8001d56:	e042      	b.n	8001dde <DHT_Read_Byte+0x94>
	{
		// TODO: what if this pin never goes high?
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8001d58:	46c0      	nop			; (mov r8, r8)
 8001d5a:	23a0      	movs	r3, #160	; 0xa0
 8001d5c:	05db      	lsls	r3, r3, #23
 8001d5e:	2108      	movs	r1, #8
 8001d60:	0018      	movs	r0, r3
 8001d62:	f000 fbfd 	bl	8002560 <HAL_GPIO_ReadPin>
 8001d66:	1e03      	subs	r3, r0, #0
 8001d68:	d0f7      	beq.n	8001d5a <DHT_Read_Byte+0x10>
		delay_us(40);   // wait for 40 us
 8001d6a:	2028      	movs	r0, #40	; 0x28
 8001d6c:	f000 f8ee 	bl	8001f4c <delay_us>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8001d70:	23a0      	movs	r3, #160	; 0xa0
 8001d72:	05db      	lsls	r3, r3, #23
 8001d74:	2108      	movs	r1, #8
 8001d76:	0018      	movs	r0, r3
 8001d78:	f000 fbf2 	bl	8002560 <HAL_GPIO_ReadPin>
 8001d7c:	1e03      	subs	r3, r0, #0
 8001d7e:	d111      	bne.n	8001da4 <DHT_Read_Byte+0x5a>
		{
			// write 0
			i &= ~(1<<(7-j));
 8001d80:	1dbb      	adds	r3, r7, #6
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2207      	movs	r2, #7
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2201      	movs	r2, #1
 8001d8a:	409a      	lsls	r2, r3
 8001d8c:	0013      	movs	r3, r2
 8001d8e:	b25b      	sxtb	r3, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	b25b      	sxtb	r3, r3
 8001d94:	1dfa      	adds	r2, r7, #7
 8001d96:	7812      	ldrb	r2, [r2, #0]
 8001d98:	b252      	sxtb	r2, r2
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	b25a      	sxtb	r2, r3
 8001d9e:	1dfb      	adds	r3, r7, #7
 8001da0:	701a      	strb	r2, [r3, #0]
 8001da2:	e00e      	b.n	8001dc2 <DHT_Read_Byte+0x78>
		}
		else
		{
			// if the pin is high, write 1
			i |= (1<<(7-j));
 8001da4:	1dbb      	adds	r3, r7, #6
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2207      	movs	r2, #7
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2201      	movs	r2, #1
 8001dae:	409a      	lsls	r2, r3
 8001db0:	0013      	movs	r3, r2
 8001db2:	b25a      	sxtb	r2, r3
 8001db4:	1dfb      	adds	r3, r7, #7
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	b25b      	sxtb	r3, r3
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	b25a      	sxtb	r2, r3
 8001dbe:	1dfb      	adds	r3, r7, #7
 8001dc0:	701a      	strb	r2, [r3, #0]
		}
		// TODO: what if this pin never goes low?
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	23a0      	movs	r3, #160	; 0xa0
 8001dc6:	05db      	lsls	r3, r3, #23
 8001dc8:	2108      	movs	r1, #8
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f000 fbc8 	bl	8002560 <HAL_GPIO_ReadPin>
 8001dd0:	1e03      	subs	r3, r0, #0
 8001dd2:	d1f7      	bne.n	8001dc4 <DHT_Read_Byte+0x7a>
	for (j=0;j<8;j++)
 8001dd4:	1dbb      	adds	r3, r7, #6
 8001dd6:	781a      	ldrb	r2, [r3, #0]
 8001dd8:	1dbb      	adds	r3, r7, #6
 8001dda:	3201      	adds	r2, #1
 8001ddc:	701a      	strb	r2, [r3, #0]
 8001dde:	1dbb      	adds	r3, r7, #6
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b07      	cmp	r3, #7
 8001de4:	d9b8      	bls.n	8001d58 <DHT_Read_Byte+0xe>
	}
	return i;
 8001de6:	1dfb      	adds	r3, r7, #7
 8001de8:	781b      	ldrb	r3, [r3, #0]
}
 8001dea:	0018      	movs	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	b002      	add	sp, #8
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <DHT_Collect_Sensor_Data>:

void DHT_Collect_Sensor_Data()
{
 8001df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
	uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2;
	uint16_t checksum;
	uint16_t calculated_checksum;
	uint8_t response = 0;
 8001dfa:	250f      	movs	r5, #15
 8001dfc:	197b      	adds	r3, r7, r5
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
    DHT_StartConversion();
 8001e02:	f7ff ff4b 	bl	8001c9c <DHT_StartConversion>
	response = DHT_Check_Response();
 8001e06:	197c      	adds	r4, r7, r5
 8001e08:	f7ff ff6d 	bl	8001ce6 <DHT_Check_Response>
 8001e0c:	0003      	movs	r3, r0
 8001e0e:	7023      	strb	r3, [r4, #0]
	if(response == RESPONSE_SUCCESS)
 8001e10:	197b      	adds	r3, r7, r5
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d000      	beq.n	8001e1a <DHT_Collect_Sensor_Data+0x26>
 8001e18:	e086      	b.n	8001f28 <DHT_Collect_Sensor_Data+0x134>
	{
		Rh_byte1 = DHT_Read_Byte();
 8001e1a:	250e      	movs	r5, #14
 8001e1c:	197c      	adds	r4, r7, r5
 8001e1e:	f7ff ff94 	bl	8001d4a <DHT_Read_Byte>
 8001e22:	0003      	movs	r3, r0
 8001e24:	7023      	strb	r3, [r4, #0]
		Rh_byte2 = DHT_Read_Byte();
 8001e26:	260d      	movs	r6, #13
 8001e28:	19bc      	adds	r4, r7, r6
 8001e2a:	f7ff ff8e 	bl	8001d4a <DHT_Read_Byte>
 8001e2e:	0003      	movs	r3, r0
 8001e30:	7023      	strb	r3, [r4, #0]
		Temp_byte1 = DHT_Read_Byte();
 8001e32:	230c      	movs	r3, #12
 8001e34:	18fc      	adds	r4, r7, r3
 8001e36:	f7ff ff88 	bl	8001d4a <DHT_Read_Byte>
 8001e3a:	0003      	movs	r3, r0
 8001e3c:	7023      	strb	r3, [r4, #0]
		Temp_byte2 = DHT_Read_Byte();
 8001e3e:	220b      	movs	r2, #11
 8001e40:	18bc      	adds	r4, r7, r2
 8001e42:	f7ff ff82 	bl	8001d4a <DHT_Read_Byte>
 8001e46:	0003      	movs	r3, r0
 8001e48:	7023      	strb	r3, [r4, #0]
		checksum = DHT_Read_Byte();
 8001e4a:	f7ff ff7e 	bl	8001d4a <DHT_Read_Byte>
 8001e4e:	0003      	movs	r3, r0
 8001e50:	001a      	movs	r2, r3
 8001e52:	2008      	movs	r0, #8
 8001e54:	183b      	adds	r3, r7, r0
 8001e56:	801a      	strh	r2, [r3, #0]
		//
		calculated_checksum = (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2) & 0xFF;
 8001e58:	197b      	adds	r3, r7, r5
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	19bb      	adds	r3, r7, r6
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	18d3      	adds	r3, r2, r3
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	230c      	movs	r3, #12
 8001e6a:	18fb      	adds	r3, r7, r3
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	18d3      	adds	r3, r2, r3
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	230b      	movs	r3, #11
 8001e76:	18fb      	adds	r3, r7, r3
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	18d3      	adds	r3, r2, r3
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	1dbb      	adds	r3, r7, #6
 8001e82:	21ff      	movs	r1, #255	; 0xff
 8001e84:	400a      	ands	r2, r1
 8001e86:	801a      	strh	r2, [r3, #0]
		if (checksum == calculated_checksum)
 8001e88:	183a      	adds	r2, r7, r0
 8001e8a:	1dbb      	adds	r3, r7, #6
 8001e8c:	8812      	ldrh	r2, [r2, #0]
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d149      	bne.n	8001f28 <DHT_Collect_Sensor_Data+0x134>
		{
			TemperatureCelcius = ((Temp_byte1<<8)|Temp_byte2) / 10.0;
 8001e94:	230c      	movs	r3, #12
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	021a      	lsls	r2, r3, #8
 8001e9c:	230b      	movs	r3, #11
 8001e9e:	18fb      	adds	r3, r7, r3
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	f7ff fb57 	bl	8001558 <__aeabi_i2d>
 8001eaa:	2200      	movs	r2, #0
 8001eac:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <DHT_Collect_Sensor_Data+0x13c>)
 8001eae:	f7fe fddf 	bl	8000a70 <__aeabi_ddiv>
 8001eb2:	0003      	movs	r3, r0
 8001eb4:	000c      	movs	r4, r1
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	0021      	movs	r1, r4
 8001eba:	f7ff fbd9 	bl	8001670 <__aeabi_d2f>
 8001ebe:	1c02      	adds	r2, r0, #0
 8001ec0:	4b1c      	ldr	r3, [pc, #112]	; (8001f34 <DHT_Collect_Sensor_Data+0x140>)
 8001ec2:	601a      	str	r2, [r3, #0]
			// if the MSB is 1 of the high byte, make the number negative.
			if((Temp_byte1 & 0x8) == 1)
			{
				TemperatureCelcius *= -1;
			}
			TemperatureFarenheit = (TemperatureCelcius * (9.0/5.0)) + 32;
 8001ec4:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <DHT_Collect_Sensor_Data+0x140>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	1c18      	adds	r0, r3, #0
 8001eca:	f7ff fb7f 	bl	80015cc <__aeabi_f2d>
 8001ece:	4a1a      	ldr	r2, [pc, #104]	; (8001f38 <DHT_Collect_Sensor_Data+0x144>)
 8001ed0:	4b1a      	ldr	r3, [pc, #104]	; (8001f3c <DHT_Collect_Sensor_Data+0x148>)
 8001ed2:	f7ff f8cf 	bl	8001074 <__aeabi_dmul>
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	000c      	movs	r4, r1
 8001eda:	0018      	movs	r0, r3
 8001edc:	0021      	movs	r1, r4
 8001ede:	2200      	movs	r2, #0
 8001ee0:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <DHT_Collect_Sensor_Data+0x14c>)
 8001ee2:	f7fe faa9 	bl	8000438 <__aeabi_dadd>
 8001ee6:	0003      	movs	r3, r0
 8001ee8:	000c      	movs	r4, r1
 8001eea:	0018      	movs	r0, r3
 8001eec:	0021      	movs	r1, r4
 8001eee:	f7ff fbbf 	bl	8001670 <__aeabi_d2f>
 8001ef2:	1c02      	adds	r2, r0, #0
 8001ef4:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <DHT_Collect_Sensor_Data+0x150>)
 8001ef6:	601a      	str	r2, [r3, #0]
			HumidityPercentage = ((Rh_byte1<<8)|Rh_byte2) / 10.0;
 8001ef8:	230e      	movs	r3, #14
 8001efa:	18fb      	adds	r3, r7, r3
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	021a      	lsls	r2, r3, #8
 8001f00:	230d      	movs	r3, #13
 8001f02:	18fb      	adds	r3, r7, r3
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f7ff fb25 	bl	8001558 <__aeabi_i2d>
 8001f0e:	2200      	movs	r2, #0
 8001f10:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <DHT_Collect_Sensor_Data+0x13c>)
 8001f12:	f7fe fdad 	bl	8000a70 <__aeabi_ddiv>
 8001f16:	0003      	movs	r3, r0
 8001f18:	000c      	movs	r4, r1
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	0021      	movs	r1, r4
 8001f1e:	f7ff fba7 	bl	8001670 <__aeabi_d2f>
 8001f22:	1c02      	adds	r2, r0, #0
 8001f24:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <DHT_Collect_Sensor_Data+0x154>)
 8001f26:	601a      	str	r2, [r3, #0]
	else
	{
		// was not able to communicate with DHT22 sensor
	}

}
 8001f28:	46c0      	nop			; (mov r8, r8)
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b005      	add	sp, #20
 8001f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f30:	40240000 	.word	0x40240000
 8001f34:	200000f4 	.word	0x200000f4
 8001f38:	cccccccd 	.word	0xcccccccd
 8001f3c:	3ffccccc 	.word	0x3ffccccc
 8001f40:	40400000 	.word	0x40400000
 8001f44:	200000ec 	.word	0x200000ec
 8001f48:	200000f0 	.word	0x200000f0

08001f4c <delay_us>:
#include "stm32l0xx_hal.h"
#include "utility.h"

extern TIM_HandleTypeDef htim2;
void delay_us (uint16_t us)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	0002      	movs	r2, r0
 8001f54:	1dbb      	adds	r3, r7, #6
 8001f56:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 8001f58:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <delay_us+0x2c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 8001f60:	46c0      	nop			; (mov r8, r8)
 8001f62:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <delay_us+0x2c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f68:	1dbb      	adds	r3, r7, #6
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d3f8      	bcc.n	8001f62 <delay_us+0x16>
}
 8001f70:	46c0      	nop			; (mov r8, r8)
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b002      	add	sp, #8
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000028 	.word	0x20000028

08001f7c <SetGreenLed>:
void SetGreenLed(GPIO_PinState state)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	0002      	movs	r2, r0
 8001f84:	1dfb      	adds	r3, r7, #7
 8001f86:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, state);
 8001f88:	1dfb      	adds	r3, r7, #7
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	4804      	ldr	r0, [pc, #16]	; (8001fa0 <SetGreenLed+0x24>)
 8001f8e:	001a      	movs	r2, r3
 8001f90:	2108      	movs	r1, #8
 8001f92:	f000 fb02 	bl	800259a <HAL_GPIO_WritePin>
}
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	b002      	add	sp, #8
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	50000400 	.word	0x50000400

08001fa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001fa4:	480d      	ldr	r0, [pc, #52]	; (8001fdc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001fa6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fa8:	480d      	ldr	r0, [pc, #52]	; (8001fe0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001faa:	490e      	ldr	r1, [pc, #56]	; (8001fe4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fac:	4a0e      	ldr	r2, [pc, #56]	; (8001fe8 <LoopForever+0xe>)
  movs r3, #0
 8001fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb0:	e002      	b.n	8001fb8 <LoopCopyDataInit>

08001fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fb6:	3304      	adds	r3, #4

08001fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fbc:	d3f9      	bcc.n	8001fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fbe:	4a0b      	ldr	r2, [pc, #44]	; (8001fec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fc0:	4c0b      	ldr	r4, [pc, #44]	; (8001ff0 <LoopForever+0x16>)
  movs r3, #0
 8001fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc4:	e001      	b.n	8001fca <LoopFillZerobss>

08001fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc8:	3204      	adds	r2, #4

08001fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fcc:	d3fb      	bcc.n	8001fc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001fce:	f7ff fe12 	bl	8001bf6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fd2:	f002 f881 	bl	80040d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fd6:	f7ff fbf9 	bl	80017cc <main>

08001fda <LoopForever>:

LoopForever:
    b LoopForever
 8001fda:	e7fe      	b.n	8001fda <LoopForever>
   ldr   r0, =_estack
 8001fdc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001fe8:	08004244 	.word	0x08004244
  ldr r2, =_sbss
 8001fec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001ff0:	200000fc 	.word	0x200000fc

08001ff4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ff4:	e7fe      	b.n	8001ff4 <ADC1_COMP_IRQHandler>
	...

08001ff8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ffe:	1dfb      	adds	r3, r7, #7
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_Init+0x3c>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <HAL_Init+0x3c>)
 800200a:	2140      	movs	r1, #64	; 0x40
 800200c:	430a      	orrs	r2, r1
 800200e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002010:	2000      	movs	r0, #0
 8002012:	f000 f811 	bl	8002038 <HAL_InitTick>
 8002016:	1e03      	subs	r3, r0, #0
 8002018:	d003      	beq.n	8002022 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800201a:	1dfb      	adds	r3, r7, #7
 800201c:	2201      	movs	r2, #1
 800201e:	701a      	strb	r2, [r3, #0]
 8002020:	e001      	b.n	8002026 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002022:	f7ff fd61 	bl	8001ae8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002026:	1dfb      	adds	r3, r7, #7
 8002028:	781b      	ldrb	r3, [r3, #0]
}
 800202a:	0018      	movs	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	b002      	add	sp, #8
 8002030:	bd80      	pop	{r7, pc}
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	40022000 	.word	0x40022000

08002038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002038:	b590      	push	{r4, r7, lr}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <HAL_InitTick+0x5c>)
 8002042:	681c      	ldr	r4, [r3, #0]
 8002044:	4b14      	ldr	r3, [pc, #80]	; (8002098 <HAL_InitTick+0x60>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	0019      	movs	r1, r3
 800204a:	23fa      	movs	r3, #250	; 0xfa
 800204c:	0098      	lsls	r0, r3, #2
 800204e:	f7fe f85b 	bl	8000108 <__udivsi3>
 8002052:	0003      	movs	r3, r0
 8002054:	0019      	movs	r1, r3
 8002056:	0020      	movs	r0, r4
 8002058:	f7fe f856 	bl	8000108 <__udivsi3>
 800205c:	0003      	movs	r3, r0
 800205e:	0018      	movs	r0, r3
 8002060:	f000 f903 	bl	800226a <HAL_SYSTICK_Config>
 8002064:	1e03      	subs	r3, r0, #0
 8002066:	d001      	beq.n	800206c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e00f      	b.n	800208c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b03      	cmp	r3, #3
 8002070:	d80b      	bhi.n	800208a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	2301      	movs	r3, #1
 8002076:	425b      	negs	r3, r3
 8002078:	2200      	movs	r2, #0
 800207a:	0018      	movs	r0, r3
 800207c:	f000 f8e0 	bl	8002240 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002080:	4b06      	ldr	r3, [pc, #24]	; (800209c <HAL_InitTick+0x64>)
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	e000      	b.n	800208c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
}
 800208c:	0018      	movs	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	b003      	add	sp, #12
 8002092:	bd90      	pop	{r4, r7, pc}
 8002094:	20000000 	.word	0x20000000
 8002098:	20000008 	.word	0x20000008
 800209c:	20000004 	.word	0x20000004

080020a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <HAL_IncTick+0x1c>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	001a      	movs	r2, r3
 80020aa:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <HAL_IncTick+0x20>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	18d2      	adds	r2, r2, r3
 80020b0:	4b03      	ldr	r3, [pc, #12]	; (80020c0 <HAL_IncTick+0x20>)
 80020b2:	601a      	str	r2, [r3, #0]
}
 80020b4:	46c0      	nop			; (mov r8, r8)
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	46c0      	nop			; (mov r8, r8)
 80020bc:	20000008 	.word	0x20000008
 80020c0:	200000f8 	.word	0x200000f8

080020c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  return uwTick;
 80020c8:	4b02      	ldr	r3, [pc, #8]	; (80020d4 <HAL_GetTick+0x10>)
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	0018      	movs	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	200000f8 	.word	0x200000f8

080020d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e0:	f7ff fff0 	bl	80020c4 <HAL_GetTick>
 80020e4:	0003      	movs	r3, r0
 80020e6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	3301      	adds	r3, #1
 80020f0:	d005      	beq.n	80020fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020f2:	4b09      	ldr	r3, [pc, #36]	; (8002118 <HAL_Delay+0x40>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	001a      	movs	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	189b      	adds	r3, r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	f7ff ffe0 	bl	80020c4 <HAL_GetTick>
 8002104:	0002      	movs	r2, r0
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	429a      	cmp	r2, r3
 800210e:	d8f7      	bhi.n	8002100 <HAL_Delay+0x28>
  {
  }
}
 8002110:	46c0      	nop			; (mov r8, r8)
 8002112:	46bd      	mov	sp, r7
 8002114:	b004      	add	sp, #16
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000008 	.word	0x20000008

0800211c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800211c:	b590      	push	{r4, r7, lr}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	0002      	movs	r2, r0
 8002124:	6039      	str	r1, [r7, #0]
 8002126:	1dfb      	adds	r3, r7, #7
 8002128:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800212a:	1dfb      	adds	r3, r7, #7
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b7f      	cmp	r3, #127	; 0x7f
 8002130:	d828      	bhi.n	8002184 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002132:	4a2f      	ldr	r2, [pc, #188]	; (80021f0 <__NVIC_SetPriority+0xd4>)
 8002134:	1dfb      	adds	r3, r7, #7
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	b25b      	sxtb	r3, r3
 800213a:	089b      	lsrs	r3, r3, #2
 800213c:	33c0      	adds	r3, #192	; 0xc0
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	589b      	ldr	r3, [r3, r2]
 8002142:	1dfa      	adds	r2, r7, #7
 8002144:	7812      	ldrb	r2, [r2, #0]
 8002146:	0011      	movs	r1, r2
 8002148:	2203      	movs	r2, #3
 800214a:	400a      	ands	r2, r1
 800214c:	00d2      	lsls	r2, r2, #3
 800214e:	21ff      	movs	r1, #255	; 0xff
 8002150:	4091      	lsls	r1, r2
 8002152:	000a      	movs	r2, r1
 8002154:	43d2      	mvns	r2, r2
 8002156:	401a      	ands	r2, r3
 8002158:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	019b      	lsls	r3, r3, #6
 800215e:	22ff      	movs	r2, #255	; 0xff
 8002160:	401a      	ands	r2, r3
 8002162:	1dfb      	adds	r3, r7, #7
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	0018      	movs	r0, r3
 8002168:	2303      	movs	r3, #3
 800216a:	4003      	ands	r3, r0
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002170:	481f      	ldr	r0, [pc, #124]	; (80021f0 <__NVIC_SetPriority+0xd4>)
 8002172:	1dfb      	adds	r3, r7, #7
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	b25b      	sxtb	r3, r3
 8002178:	089b      	lsrs	r3, r3, #2
 800217a:	430a      	orrs	r2, r1
 800217c:	33c0      	adds	r3, #192	; 0xc0
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002182:	e031      	b.n	80021e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002184:	4a1b      	ldr	r2, [pc, #108]	; (80021f4 <__NVIC_SetPriority+0xd8>)
 8002186:	1dfb      	adds	r3, r7, #7
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	0019      	movs	r1, r3
 800218c:	230f      	movs	r3, #15
 800218e:	400b      	ands	r3, r1
 8002190:	3b08      	subs	r3, #8
 8002192:	089b      	lsrs	r3, r3, #2
 8002194:	3306      	adds	r3, #6
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	18d3      	adds	r3, r2, r3
 800219a:	3304      	adds	r3, #4
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	1dfa      	adds	r2, r7, #7
 80021a0:	7812      	ldrb	r2, [r2, #0]
 80021a2:	0011      	movs	r1, r2
 80021a4:	2203      	movs	r2, #3
 80021a6:	400a      	ands	r2, r1
 80021a8:	00d2      	lsls	r2, r2, #3
 80021aa:	21ff      	movs	r1, #255	; 0xff
 80021ac:	4091      	lsls	r1, r2
 80021ae:	000a      	movs	r2, r1
 80021b0:	43d2      	mvns	r2, r2
 80021b2:	401a      	ands	r2, r3
 80021b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	019b      	lsls	r3, r3, #6
 80021ba:	22ff      	movs	r2, #255	; 0xff
 80021bc:	401a      	ands	r2, r3
 80021be:	1dfb      	adds	r3, r7, #7
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	0018      	movs	r0, r3
 80021c4:	2303      	movs	r3, #3
 80021c6:	4003      	ands	r3, r0
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021cc:	4809      	ldr	r0, [pc, #36]	; (80021f4 <__NVIC_SetPriority+0xd8>)
 80021ce:	1dfb      	adds	r3, r7, #7
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	001c      	movs	r4, r3
 80021d4:	230f      	movs	r3, #15
 80021d6:	4023      	ands	r3, r4
 80021d8:	3b08      	subs	r3, #8
 80021da:	089b      	lsrs	r3, r3, #2
 80021dc:	430a      	orrs	r2, r1
 80021de:	3306      	adds	r3, #6
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	18c3      	adds	r3, r0, r3
 80021e4:	3304      	adds	r3, #4
 80021e6:	601a      	str	r2, [r3, #0]
}
 80021e8:	46c0      	nop			; (mov r8, r8)
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b003      	add	sp, #12
 80021ee:	bd90      	pop	{r4, r7, pc}
 80021f0:	e000e100 	.word	0xe000e100
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3b01      	subs	r3, #1
 8002204:	4a0c      	ldr	r2, [pc, #48]	; (8002238 <SysTick_Config+0x40>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d901      	bls.n	800220e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800220a:	2301      	movs	r3, #1
 800220c:	e010      	b.n	8002230 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800220e:	4b0b      	ldr	r3, [pc, #44]	; (800223c <SysTick_Config+0x44>)
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	3a01      	subs	r2, #1
 8002214:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002216:	2301      	movs	r3, #1
 8002218:	425b      	negs	r3, r3
 800221a:	2103      	movs	r1, #3
 800221c:	0018      	movs	r0, r3
 800221e:	f7ff ff7d 	bl	800211c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <SysTick_Config+0x44>)
 8002224:	2200      	movs	r2, #0
 8002226:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002228:	4b04      	ldr	r3, [pc, #16]	; (800223c <SysTick_Config+0x44>)
 800222a:	2207      	movs	r2, #7
 800222c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800222e:	2300      	movs	r3, #0
}
 8002230:	0018      	movs	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	b002      	add	sp, #8
 8002236:	bd80      	pop	{r7, pc}
 8002238:	00ffffff 	.word	0x00ffffff
 800223c:	e000e010 	.word	0xe000e010

08002240 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	607a      	str	r2, [r7, #4]
 800224a:	210f      	movs	r1, #15
 800224c:	187b      	adds	r3, r7, r1
 800224e:	1c02      	adds	r2, r0, #0
 8002250:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	187b      	adds	r3, r7, r1
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	b25b      	sxtb	r3, r3
 800225a:	0011      	movs	r1, r2
 800225c:	0018      	movs	r0, r3
 800225e:	f7ff ff5d 	bl	800211c <__NVIC_SetPriority>
}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	46bd      	mov	sp, r7
 8002266:	b004      	add	sp, #16
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	0018      	movs	r0, r3
 8002276:	f7ff ffbf 	bl	80021f8 <SysTick_Config>
 800227a:	0003      	movs	r3, r0
}
 800227c:	0018      	movs	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	b002      	add	sp, #8
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800229a:	e149      	b.n	8002530 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2101      	movs	r1, #1
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	4091      	lsls	r1, r2
 80022a6:	000a      	movs	r2, r1
 80022a8:	4013      	ands	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d100      	bne.n	80022b4 <HAL_GPIO_Init+0x30>
 80022b2:	e13a      	b.n	800252a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d00b      	beq.n	80022d4 <HAL_GPIO_Init+0x50>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d007      	beq.n	80022d4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022c8:	2b11      	cmp	r3, #17
 80022ca:	d003      	beq.n	80022d4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b12      	cmp	r3, #18
 80022d2:	d130      	bne.n	8002336 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	2203      	movs	r2, #3
 80022e0:	409a      	lsls	r2, r3
 80022e2:	0013      	movs	r3, r2
 80022e4:	43da      	mvns	r2, r3
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4013      	ands	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	409a      	lsls	r2, r3
 80022f6:	0013      	movs	r3, r2
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800230a:	2201      	movs	r2, #1
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	409a      	lsls	r2, r3
 8002310:	0013      	movs	r3, r2
 8002312:	43da      	mvns	r2, r3
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4013      	ands	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	091b      	lsrs	r3, r3, #4
 8002320:	2201      	movs	r2, #1
 8002322:	401a      	ands	r2, r3
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	409a      	lsls	r2, r3
 8002328:	0013      	movs	r3, r2
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	2203      	movs	r2, #3
 8002342:	409a      	lsls	r2, r3
 8002344:	0013      	movs	r3, r2
 8002346:	43da      	mvns	r2, r3
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4013      	ands	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	409a      	lsls	r2, r3
 8002358:	0013      	movs	r3, r2
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_Init+0xf2>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b12      	cmp	r3, #18
 8002374:	d123      	bne.n	80023be <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	08da      	lsrs	r2, r3, #3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3208      	adds	r2, #8
 800237e:	0092      	lsls	r2, r2, #2
 8002380:	58d3      	ldr	r3, [r2, r3]
 8002382:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	2207      	movs	r2, #7
 8002388:	4013      	ands	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	220f      	movs	r2, #15
 800238e:	409a      	lsls	r2, r3
 8002390:	0013      	movs	r3, r2
 8002392:	43da      	mvns	r2, r3
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4013      	ands	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	691a      	ldr	r2, [r3, #16]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2107      	movs	r1, #7
 80023a2:	400b      	ands	r3, r1
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	409a      	lsls	r2, r3
 80023a8:	0013      	movs	r3, r2
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	08da      	lsrs	r2, r3, #3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3208      	adds	r2, #8
 80023b8:	0092      	lsls	r2, r2, #2
 80023ba:	6939      	ldr	r1, [r7, #16]
 80023bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	2203      	movs	r2, #3
 80023ca:	409a      	lsls	r2, r3
 80023cc:	0013      	movs	r3, r2
 80023ce:	43da      	mvns	r2, r3
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2203      	movs	r2, #3
 80023dc:	401a      	ands	r2, r3
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	409a      	lsls	r2, r3
 80023e4:	0013      	movs	r3, r2
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	2380      	movs	r3, #128	; 0x80
 80023f8:	055b      	lsls	r3, r3, #21
 80023fa:	4013      	ands	r3, r2
 80023fc:	d100      	bne.n	8002400 <HAL_GPIO_Init+0x17c>
 80023fe:	e094      	b.n	800252a <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002400:	4b51      	ldr	r3, [pc, #324]	; (8002548 <HAL_GPIO_Init+0x2c4>)
 8002402:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002404:	4b50      	ldr	r3, [pc, #320]	; (8002548 <HAL_GPIO_Init+0x2c4>)
 8002406:	2101      	movs	r1, #1
 8002408:	430a      	orrs	r2, r1
 800240a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800240c:	4a4f      	ldr	r2, [pc, #316]	; (800254c <HAL_GPIO_Init+0x2c8>)
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	089b      	lsrs	r3, r3, #2
 8002412:	3302      	adds	r3, #2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	589b      	ldr	r3, [r3, r2]
 8002418:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2203      	movs	r2, #3
 800241e:	4013      	ands	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	220f      	movs	r2, #15
 8002424:	409a      	lsls	r2, r3
 8002426:	0013      	movs	r3, r2
 8002428:	43da      	mvns	r2, r3
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4013      	ands	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	23a0      	movs	r3, #160	; 0xa0
 8002434:	05db      	lsls	r3, r3, #23
 8002436:	429a      	cmp	r2, r3
 8002438:	d013      	beq.n	8002462 <HAL_GPIO_Init+0x1de>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a44      	ldr	r2, [pc, #272]	; (8002550 <HAL_GPIO_Init+0x2cc>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d00d      	beq.n	800245e <HAL_GPIO_Init+0x1da>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a43      	ldr	r2, [pc, #268]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d007      	beq.n	800245a <HAL_GPIO_Init+0x1d6>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a42      	ldr	r2, [pc, #264]	; (8002558 <HAL_GPIO_Init+0x2d4>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d101      	bne.n	8002456 <HAL_GPIO_Init+0x1d2>
 8002452:	2305      	movs	r3, #5
 8002454:	e006      	b.n	8002464 <HAL_GPIO_Init+0x1e0>
 8002456:	2306      	movs	r3, #6
 8002458:	e004      	b.n	8002464 <HAL_GPIO_Init+0x1e0>
 800245a:	2302      	movs	r3, #2
 800245c:	e002      	b.n	8002464 <HAL_GPIO_Init+0x1e0>
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <HAL_GPIO_Init+0x1e0>
 8002462:	2300      	movs	r3, #0
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	2103      	movs	r1, #3
 8002468:	400a      	ands	r2, r1
 800246a:	0092      	lsls	r2, r2, #2
 800246c:	4093      	lsls	r3, r2
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002474:	4935      	ldr	r1, [pc, #212]	; (800254c <HAL_GPIO_Init+0x2c8>)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	089b      	lsrs	r3, r3, #2
 800247a:	3302      	adds	r3, #2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002482:	4b36      	ldr	r3, [pc, #216]	; (800255c <HAL_GPIO_Init+0x2d8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	43da      	mvns	r2, r3
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4013      	ands	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	2380      	movs	r3, #128	; 0x80
 8002498:	025b      	lsls	r3, r3, #9
 800249a:	4013      	ands	r3, r2
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024a6:	4b2d      	ldr	r3, [pc, #180]	; (800255c <HAL_GPIO_Init+0x2d8>)
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80024ac:	4b2b      	ldr	r3, [pc, #172]	; (800255c <HAL_GPIO_Init+0x2d8>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	43da      	mvns	r2, r3
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4013      	ands	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	2380      	movs	r3, #128	; 0x80
 80024c2:	029b      	lsls	r3, r3, #10
 80024c4:	4013      	ands	r3, r2
 80024c6:	d003      	beq.n	80024d0 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024d0:	4b22      	ldr	r3, [pc, #136]	; (800255c <HAL_GPIO_Init+0x2d8>)
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024d6:	4b21      	ldr	r3, [pc, #132]	; (800255c <HAL_GPIO_Init+0x2d8>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	43da      	mvns	r2, r3
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4013      	ands	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	2380      	movs	r3, #128	; 0x80
 80024ec:	035b      	lsls	r3, r3, #13
 80024ee:	4013      	ands	r3, r2
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024fa:	4b18      	ldr	r3, [pc, #96]	; (800255c <HAL_GPIO_Init+0x2d8>)
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002500:	4b16      	ldr	r3, [pc, #88]	; (800255c <HAL_GPIO_Init+0x2d8>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	43da      	mvns	r2, r3
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4013      	ands	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	039b      	lsls	r3, r3, #14
 8002518:	4013      	ands	r3, r2
 800251a:	d003      	beq.n	8002524 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002524:	4b0d      	ldr	r3, [pc, #52]	; (800255c <HAL_GPIO_Init+0x2d8>)
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	3301      	adds	r3, #1
 800252e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	40da      	lsrs	r2, r3
 8002538:	1e13      	subs	r3, r2, #0
 800253a:	d000      	beq.n	800253e <HAL_GPIO_Init+0x2ba>
 800253c:	e6ae      	b.n	800229c <HAL_GPIO_Init+0x18>
  }
}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	46bd      	mov	sp, r7
 8002542:	b006      	add	sp, #24
 8002544:	bd80      	pop	{r7, pc}
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	40021000 	.word	0x40021000
 800254c:	40010000 	.word	0x40010000
 8002550:	50000400 	.word	0x50000400
 8002554:	50000800 	.word	0x50000800
 8002558:	50001c00 	.word	0x50001c00
 800255c:	40010400 	.word	0x40010400

08002560 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	000a      	movs	r2, r1
 800256a:	1cbb      	adds	r3, r7, #2
 800256c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	1cba      	adds	r2, r7, #2
 8002574:	8812      	ldrh	r2, [r2, #0]
 8002576:	4013      	ands	r3, r2
 8002578:	d004      	beq.n	8002584 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800257a:	230f      	movs	r3, #15
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	2201      	movs	r2, #1
 8002580:	701a      	strb	r2, [r3, #0]
 8002582:	e003      	b.n	800258c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002584:	230f      	movs	r3, #15
 8002586:	18fb      	adds	r3, r7, r3
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800258c:	230f      	movs	r3, #15
 800258e:	18fb      	adds	r3, r7, r3
 8002590:	781b      	ldrb	r3, [r3, #0]
}
 8002592:	0018      	movs	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	b004      	add	sp, #16
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	0008      	movs	r0, r1
 80025a4:	0011      	movs	r1, r2
 80025a6:	1cbb      	adds	r3, r7, #2
 80025a8:	1c02      	adds	r2, r0, #0
 80025aa:	801a      	strh	r2, [r3, #0]
 80025ac:	1c7b      	adds	r3, r7, #1
 80025ae:	1c0a      	adds	r2, r1, #0
 80025b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025b2:	1c7b      	adds	r3, r7, #1
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d004      	beq.n	80025c4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ba:	1cbb      	adds	r3, r7, #2
 80025bc:	881a      	ldrh	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80025c2:	e003      	b.n	80025cc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80025c4:	1cbb      	adds	r3, r7, #2
 80025c6:	881a      	ldrh	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025cc:	46c0      	nop			; (mov r8, r8)
 80025ce:	46bd      	mov	sp, r7
 80025d0:	b002      	add	sp, #8
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d4:	b5b0      	push	{r4, r5, r7, lr}
 80025d6:	b08a      	sub	sp, #40	; 0x28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d102      	bne.n	80025e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	f000 fb70 	bl	8002cc8 <HAL_RCC_OscConfig+0x6f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025e8:	4bc9      	ldr	r3, [pc, #804]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	220c      	movs	r2, #12
 80025ee:	4013      	ands	r3, r2
 80025f0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025f2:	4bc7      	ldr	r3, [pc, #796]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 80025f4:	68da      	ldr	r2, [r3, #12]
 80025f6:	2380      	movs	r3, #128	; 0x80
 80025f8:	025b      	lsls	r3, r3, #9
 80025fa:	4013      	ands	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2201      	movs	r2, #1
 8002604:	4013      	ands	r3, r2
 8002606:	d100      	bne.n	800260a <HAL_RCC_OscConfig+0x36>
 8002608:	e07d      	b.n	8002706 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	2b08      	cmp	r3, #8
 800260e:	d007      	beq.n	8002620 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	2b0c      	cmp	r3, #12
 8002614:	d112      	bne.n	800263c <HAL_RCC_OscConfig+0x68>
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	2380      	movs	r3, #128	; 0x80
 800261a:	025b      	lsls	r3, r3, #9
 800261c:	429a      	cmp	r2, r3
 800261e:	d10d      	bne.n	800263c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002620:	4bbb      	ldr	r3, [pc, #748]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	2380      	movs	r3, #128	; 0x80
 8002626:	029b      	lsls	r3, r3, #10
 8002628:	4013      	ands	r3, r2
 800262a:	d100      	bne.n	800262e <HAL_RCC_OscConfig+0x5a>
 800262c:	e06a      	b.n	8002704 <HAL_RCC_OscConfig+0x130>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d166      	bne.n	8002704 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	f000 fb46 	bl	8002cc8 <HAL_RCC_OscConfig+0x6f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	025b      	lsls	r3, r3, #9
 8002644:	429a      	cmp	r2, r3
 8002646:	d107      	bne.n	8002658 <HAL_RCC_OscConfig+0x84>
 8002648:	4bb1      	ldr	r3, [pc, #708]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	4bb0      	ldr	r3, [pc, #704]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 800264e:	2180      	movs	r1, #128	; 0x80
 8002650:	0249      	lsls	r1, r1, #9
 8002652:	430a      	orrs	r2, r1
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	e027      	b.n	80026a8 <HAL_RCC_OscConfig+0xd4>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	23a0      	movs	r3, #160	; 0xa0
 800265e:	02db      	lsls	r3, r3, #11
 8002660:	429a      	cmp	r2, r3
 8002662:	d10e      	bne.n	8002682 <HAL_RCC_OscConfig+0xae>
 8002664:	4baa      	ldr	r3, [pc, #680]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4ba9      	ldr	r3, [pc, #676]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 800266a:	2180      	movs	r1, #128	; 0x80
 800266c:	02c9      	lsls	r1, r1, #11
 800266e:	430a      	orrs	r2, r1
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	4ba7      	ldr	r3, [pc, #668]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	4ba6      	ldr	r3, [pc, #664]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 8002678:	2180      	movs	r1, #128	; 0x80
 800267a:	0249      	lsls	r1, r1, #9
 800267c:	430a      	orrs	r2, r1
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	e012      	b.n	80026a8 <HAL_RCC_OscConfig+0xd4>
 8002682:	4ba3      	ldr	r3, [pc, #652]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	4ba2      	ldr	r3, [pc, #648]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 8002688:	49a2      	ldr	r1, [pc, #648]	; (8002914 <HAL_RCC_OscConfig+0x340>)
 800268a:	400a      	ands	r2, r1
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	4ba0      	ldr	r3, [pc, #640]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	2380      	movs	r3, #128	; 0x80
 8002694:	025b      	lsls	r3, r3, #9
 8002696:	4013      	ands	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4b9c      	ldr	r3, [pc, #624]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b9b      	ldr	r3, [pc, #620]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 80026a2:	499d      	ldr	r1, [pc, #628]	; (8002918 <HAL_RCC_OscConfig+0x344>)
 80026a4:	400a      	ands	r2, r1
 80026a6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d014      	beq.n	80026da <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7ff fd08 	bl	80020c4 <HAL_GetTick>
 80026b4:	0003      	movs	r3, r0
 80026b6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ba:	f7ff fd03 	bl	80020c4 <HAL_GetTick>
 80026be:	0002      	movs	r2, r0
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b64      	cmp	r3, #100	; 0x64
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e2fd      	b.n	8002cc8 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026cc:	4b90      	ldr	r3, [pc, #576]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	2380      	movs	r3, #128	; 0x80
 80026d2:	029b      	lsls	r3, r3, #10
 80026d4:	4013      	ands	r3, r2
 80026d6:	d0f0      	beq.n	80026ba <HAL_RCC_OscConfig+0xe6>
 80026d8:	e015      	b.n	8002706 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026da:	f7ff fcf3 	bl	80020c4 <HAL_GetTick>
 80026de:	0003      	movs	r3, r0
 80026e0:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e4:	f7ff fcee 	bl	80020c4 <HAL_GetTick>
 80026e8:	0002      	movs	r2, r0
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b64      	cmp	r3, #100	; 0x64
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e2e8      	b.n	8002cc8 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026f6:	4b86      	ldr	r3, [pc, #536]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	2380      	movs	r3, #128	; 0x80
 80026fc:	029b      	lsls	r3, r3, #10
 80026fe:	4013      	ands	r3, r2
 8002700:	d1f0      	bne.n	80026e4 <HAL_RCC_OscConfig+0x110>
 8002702:	e000      	b.n	8002706 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002704:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2202      	movs	r2, #2
 800270c:	4013      	ands	r3, r2
 800270e:	d100      	bne.n	8002712 <HAL_RCC_OscConfig+0x13e>
 8002710:	e09a      	b.n	8002848 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	2220      	movs	r2, #32
 800271c:	4013      	ands	r3, r2
 800271e:	d009      	beq.n	8002734 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002720:	4b7b      	ldr	r3, [pc, #492]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	4b7a      	ldr	r3, [pc, #488]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 8002726:	2120      	movs	r1, #32
 8002728:	430a      	orrs	r2, r1
 800272a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	2220      	movs	r2, #32
 8002730:	4393      	bics	r3, r2
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	2b04      	cmp	r3, #4
 8002738:	d005      	beq.n	8002746 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	2b0c      	cmp	r3, #12
 800273e:	d13f      	bne.n	80027c0 <HAL_RCC_OscConfig+0x1ec>
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d13c      	bne.n	80027c0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002746:	4b72      	ldr	r3, [pc, #456]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2204      	movs	r2, #4
 800274c:	4013      	ands	r3, r2
 800274e:	d004      	beq.n	800275a <HAL_RCC_OscConfig+0x186>
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e2b6      	b.n	8002cc8 <HAL_RCC_OscConfig+0x6f4>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275a:	4b6d      	ldr	r3, [pc, #436]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	4a6f      	ldr	r2, [pc, #444]	; (800291c <HAL_RCC_OscConfig+0x348>)
 8002760:	4013      	ands	r3, r2
 8002762:	0019      	movs	r1, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	021a      	lsls	r2, r3, #8
 800276a:	4b69      	ldr	r3, [pc, #420]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 800276c:	430a      	orrs	r2, r1
 800276e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002770:	4b67      	ldr	r3, [pc, #412]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2209      	movs	r2, #9
 8002776:	4393      	bics	r3, r2
 8002778:	0019      	movs	r1, r3
 800277a:	4b65      	ldr	r3, [pc, #404]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 800277c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800277e:	430a      	orrs	r2, r1
 8002780:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002782:	f000 fbef 	bl	8002f64 <HAL_RCC_GetSysClockFreq>
 8002786:	0001      	movs	r1, r0
 8002788:	4b61      	ldr	r3, [pc, #388]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	091b      	lsrs	r3, r3, #4
 800278e:	220f      	movs	r2, #15
 8002790:	4013      	ands	r3, r2
 8002792:	4a63      	ldr	r2, [pc, #396]	; (8002920 <HAL_RCC_OscConfig+0x34c>)
 8002794:	5cd3      	ldrb	r3, [r2, r3]
 8002796:	000a      	movs	r2, r1
 8002798:	40da      	lsrs	r2, r3
 800279a:	4b62      	ldr	r3, [pc, #392]	; (8002924 <HAL_RCC_OscConfig+0x350>)
 800279c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800279e:	4b62      	ldr	r3, [pc, #392]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2513      	movs	r5, #19
 80027a4:	197c      	adds	r4, r7, r5
 80027a6:	0018      	movs	r0, r3
 80027a8:	f7ff fc46 	bl	8002038 <HAL_InitTick>
 80027ac:	0003      	movs	r3, r0
 80027ae:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80027b0:	197b      	adds	r3, r7, r5
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d047      	beq.n	8002848 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80027b8:	2313      	movs	r3, #19
 80027ba:	18fb      	adds	r3, r7, r3
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	e283      	b.n	8002cc8 <HAL_RCC_OscConfig+0x6f4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d027      	beq.n	8002816 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80027c6:	4b52      	ldr	r3, [pc, #328]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2209      	movs	r2, #9
 80027cc:	4393      	bics	r3, r2
 80027ce:	0019      	movs	r1, r3
 80027d0:	4b4f      	ldr	r3, [pc, #316]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 80027d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d4:	430a      	orrs	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d8:	f7ff fc74 	bl	80020c4 <HAL_GetTick>
 80027dc:	0003      	movs	r3, r0
 80027de:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027e2:	f7ff fc6f 	bl	80020c4 <HAL_GetTick>
 80027e6:	0002      	movs	r2, r0
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e269      	b.n	8002cc8 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027f4:	4b46      	ldr	r3, [pc, #280]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2204      	movs	r2, #4
 80027fa:	4013      	ands	r3, r2
 80027fc:	d0f1      	beq.n	80027e2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fe:	4b44      	ldr	r3, [pc, #272]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	4a46      	ldr	r2, [pc, #280]	; (800291c <HAL_RCC_OscConfig+0x348>)
 8002804:	4013      	ands	r3, r2
 8002806:	0019      	movs	r1, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	021a      	lsls	r2, r3, #8
 800280e:	4b40      	ldr	r3, [pc, #256]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 8002810:	430a      	orrs	r2, r1
 8002812:	605a      	str	r2, [r3, #4]
 8002814:	e018      	b.n	8002848 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002816:	4b3e      	ldr	r3, [pc, #248]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	4b3d      	ldr	r3, [pc, #244]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 800281c:	2101      	movs	r1, #1
 800281e:	438a      	bics	r2, r1
 8002820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002822:	f7ff fc4f 	bl	80020c4 <HAL_GetTick>
 8002826:	0003      	movs	r3, r0
 8002828:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800282c:	f7ff fc4a 	bl	80020c4 <HAL_GetTick>
 8002830:	0002      	movs	r2, r0
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e244      	b.n	8002cc8 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800283e:	4b34      	ldr	r3, [pc, #208]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2204      	movs	r2, #4
 8002844:	4013      	ands	r3, r2
 8002846:	d1f1      	bne.n	800282c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2210      	movs	r2, #16
 800284e:	4013      	ands	r3, r2
 8002850:	d100      	bne.n	8002854 <HAL_RCC_OscConfig+0x280>
 8002852:	e0a2      	b.n	800299a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d141      	bne.n	80028de <HAL_RCC_OscConfig+0x30a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800285a:	4b2d      	ldr	r3, [pc, #180]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4013      	ands	r3, r2
 8002864:	d005      	beq.n	8002872 <HAL_RCC_OscConfig+0x29e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e22a      	b.n	8002cc8 <HAL_RCC_OscConfig+0x6f4>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002872:	4b27      	ldr	r3, [pc, #156]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4a2d      	ldr	r2, [pc, #180]	; (800292c <HAL_RCC_OscConfig+0x358>)
 8002878:	4013      	ands	r3, r2
 800287a:	0019      	movs	r1, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a1a      	ldr	r2, [r3, #32]
 8002880:	4b23      	ldr	r3, [pc, #140]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 8002882:	430a      	orrs	r2, r1
 8002884:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002886:	4b22      	ldr	r3, [pc, #136]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	021b      	lsls	r3, r3, #8
 800288c:	0a19      	lsrs	r1, r3, #8
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	061a      	lsls	r2, r3, #24
 8002894:	4b1e      	ldr	r3, [pc, #120]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 8002896:	430a      	orrs	r2, r1
 8002898:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	0b5b      	lsrs	r3, r3, #13
 80028a0:	3301      	adds	r3, #1
 80028a2:	2280      	movs	r2, #128	; 0x80
 80028a4:	0212      	lsls	r2, r2, #8
 80028a6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80028a8:	4b19      	ldr	r3, [pc, #100]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	091b      	lsrs	r3, r3, #4
 80028ae:	210f      	movs	r1, #15
 80028b0:	400b      	ands	r3, r1
 80028b2:	491b      	ldr	r1, [pc, #108]	; (8002920 <HAL_RCC_OscConfig+0x34c>)
 80028b4:	5ccb      	ldrb	r3, [r1, r3]
 80028b6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80028b8:	4b1a      	ldr	r3, [pc, #104]	; (8002924 <HAL_RCC_OscConfig+0x350>)
 80028ba:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80028bc:	4b1a      	ldr	r3, [pc, #104]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2513      	movs	r5, #19
 80028c2:	197c      	adds	r4, r7, r5
 80028c4:	0018      	movs	r0, r3
 80028c6:	f7ff fbb7 	bl	8002038 <HAL_InitTick>
 80028ca:	0003      	movs	r3, r0
 80028cc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80028ce:	197b      	adds	r3, r7, r5
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d061      	beq.n	800299a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80028d6:	2313      	movs	r3, #19
 80028d8:	18fb      	adds	r3, r7, r3
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	e1f4      	b.n	8002cc8 <HAL_RCC_OscConfig+0x6f4>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d03f      	beq.n	8002966 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028e6:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	4b09      	ldr	r3, [pc, #36]	; (8002910 <HAL_RCC_OscConfig+0x33c>)
 80028ec:	2180      	movs	r1, #128	; 0x80
 80028ee:	0049      	lsls	r1, r1, #1
 80028f0:	430a      	orrs	r2, r1
 80028f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7ff fbe6 	bl	80020c4 <HAL_GetTick>
 80028f8:	0003      	movs	r3, r0
 80028fa:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80028fc:	e018      	b.n	8002930 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028fe:	f7ff fbe1 	bl	80020c4 <HAL_GetTick>
 8002902:	0002      	movs	r2, r0
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d911      	bls.n	8002930 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e1db      	b.n	8002cc8 <HAL_RCC_OscConfig+0x6f4>
 8002910:	40021000 	.word	0x40021000
 8002914:	fffeffff 	.word	0xfffeffff
 8002918:	fffbffff 	.word	0xfffbffff
 800291c:	ffffe0ff 	.word	0xffffe0ff
 8002920:	080041c8 	.word	0x080041c8
 8002924:	20000000 	.word	0x20000000
 8002928:	20000004 	.word	0x20000004
 800292c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002930:	4bca      	ldr	r3, [pc, #808]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	2380      	movs	r3, #128	; 0x80
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4013      	ands	r3, r2
 800293a:	d0e0      	beq.n	80028fe <HAL_RCC_OscConfig+0x32a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800293c:	4bc7      	ldr	r3, [pc, #796]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	4ac7      	ldr	r2, [pc, #796]	; (8002c60 <HAL_RCC_OscConfig+0x68c>)
 8002942:	4013      	ands	r3, r2
 8002944:	0019      	movs	r1, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1a      	ldr	r2, [r3, #32]
 800294a:	4bc4      	ldr	r3, [pc, #784]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 800294c:	430a      	orrs	r2, r1
 800294e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002950:	4bc2      	ldr	r3, [pc, #776]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	021b      	lsls	r3, r3, #8
 8002956:	0a19      	lsrs	r1, r3, #8
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	061a      	lsls	r2, r3, #24
 800295e:	4bbf      	ldr	r3, [pc, #764]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002960:	430a      	orrs	r2, r1
 8002962:	605a      	str	r2, [r3, #4]
 8002964:	e019      	b.n	800299a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002966:	4bbd      	ldr	r3, [pc, #756]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	4bbc      	ldr	r3, [pc, #752]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 800296c:	49bd      	ldr	r1, [pc, #756]	; (8002c64 <HAL_RCC_OscConfig+0x690>)
 800296e:	400a      	ands	r2, r1
 8002970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002972:	f7ff fba7 	bl	80020c4 <HAL_GetTick>
 8002976:	0003      	movs	r3, r0
 8002978:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800297c:	f7ff fba2 	bl	80020c4 <HAL_GetTick>
 8002980:	0002      	movs	r2, r0
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e19c      	b.n	8002cc8 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800298e:	4bb3      	ldr	r3, [pc, #716]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	2380      	movs	r3, #128	; 0x80
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4013      	ands	r3, r2
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2208      	movs	r2, #8
 80029a0:	4013      	ands	r3, r2
 80029a2:	d036      	beq.n	8002a12 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d019      	beq.n	80029e0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ac:	4bab      	ldr	r3, [pc, #684]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 80029ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029b0:	4baa      	ldr	r3, [pc, #680]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 80029b2:	2101      	movs	r1, #1
 80029b4:	430a      	orrs	r2, r1
 80029b6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b8:	f7ff fb84 	bl	80020c4 <HAL_GetTick>
 80029bc:	0003      	movs	r3, r0
 80029be:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029c2:	f7ff fb7f 	bl	80020c4 <HAL_GetTick>
 80029c6:	0002      	movs	r2, r0
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e179      	b.n	8002cc8 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029d4:	4ba1      	ldr	r3, [pc, #644]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 80029d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d8:	2202      	movs	r2, #2
 80029da:	4013      	ands	r3, r2
 80029dc:	d0f1      	beq.n	80029c2 <HAL_RCC_OscConfig+0x3ee>
 80029de:	e018      	b.n	8002a12 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029e0:	4b9e      	ldr	r3, [pc, #632]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 80029e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029e4:	4b9d      	ldr	r3, [pc, #628]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 80029e6:	2101      	movs	r1, #1
 80029e8:	438a      	bics	r2, r1
 80029ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ec:	f7ff fb6a 	bl	80020c4 <HAL_GetTick>
 80029f0:	0003      	movs	r3, r0
 80029f2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029f6:	f7ff fb65 	bl	80020c4 <HAL_GetTick>
 80029fa:	0002      	movs	r2, r0
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e15f      	b.n	8002cc8 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a08:	4b94      	ldr	r3, [pc, #592]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d1f1      	bne.n	80029f6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2204      	movs	r2, #4
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d100      	bne.n	8002a1e <HAL_RCC_OscConfig+0x44a>
 8002a1c:	e0af      	b.n	8002b7e <HAL_RCC_OscConfig+0x5aa>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a1e:	2323      	movs	r3, #35	; 0x23
 8002a20:	18fb      	adds	r3, r7, r3
 8002a22:	2200      	movs	r2, #0
 8002a24:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a26:	4b8d      	ldr	r3, [pc, #564]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a2a:	2380      	movs	r3, #128	; 0x80
 8002a2c:	055b      	lsls	r3, r3, #21
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d10a      	bne.n	8002a48 <HAL_RCC_OscConfig+0x474>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a32:	4b8a      	ldr	r3, [pc, #552]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a36:	4b89      	ldr	r3, [pc, #548]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002a38:	2180      	movs	r1, #128	; 0x80
 8002a3a:	0549      	lsls	r1, r1, #21
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002a40:	2323      	movs	r3, #35	; 0x23
 8002a42:	18fb      	adds	r3, r7, r3
 8002a44:	2201      	movs	r2, #1
 8002a46:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a48:	4b87      	ldr	r3, [pc, #540]	; (8002c68 <HAL_RCC_OscConfig+0x694>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	2380      	movs	r3, #128	; 0x80
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	4013      	ands	r3, r2
 8002a52:	d11a      	bne.n	8002a8a <HAL_RCC_OscConfig+0x4b6>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a54:	4b84      	ldr	r3, [pc, #528]	; (8002c68 <HAL_RCC_OscConfig+0x694>)
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	4b83      	ldr	r3, [pc, #524]	; (8002c68 <HAL_RCC_OscConfig+0x694>)
 8002a5a:	2180      	movs	r1, #128	; 0x80
 8002a5c:	0049      	lsls	r1, r1, #1
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a62:	f7ff fb2f 	bl	80020c4 <HAL_GetTick>
 8002a66:	0003      	movs	r3, r0
 8002a68:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6c:	f7ff fb2a 	bl	80020c4 <HAL_GetTick>
 8002a70:	0002      	movs	r2, r0
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b64      	cmp	r3, #100	; 0x64
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x4aa>
        {
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e124      	b.n	8002cc8 <HAL_RCC_OscConfig+0x6f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7e:	4b7a      	ldr	r3, [pc, #488]	; (8002c68 <HAL_RCC_OscConfig+0x694>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	2380      	movs	r3, #128	; 0x80
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	4013      	ands	r3, r2
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCC_OscConfig+0x498>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	2380      	movs	r3, #128	; 0x80
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d107      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x4d2>
 8002a96:	4b71      	ldr	r3, [pc, #452]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002a98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a9a:	4b70      	ldr	r3, [pc, #448]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002a9c:	2180      	movs	r1, #128	; 0x80
 8002a9e:	0049      	lsls	r1, r1, #1
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	651a      	str	r2, [r3, #80]	; 0x50
 8002aa4:	e031      	b.n	8002b0a <HAL_RCC_OscConfig+0x536>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10c      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x4f4>
 8002aae:	4b6b      	ldr	r3, [pc, #428]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002ab0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ab2:	4b6a      	ldr	r3, [pc, #424]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002ab4:	496b      	ldr	r1, [pc, #428]	; (8002c64 <HAL_RCC_OscConfig+0x690>)
 8002ab6:	400a      	ands	r2, r1
 8002ab8:	651a      	str	r2, [r3, #80]	; 0x50
 8002aba:	4b68      	ldr	r3, [pc, #416]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002abc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002abe:	4b67      	ldr	r3, [pc, #412]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002ac0:	496a      	ldr	r1, [pc, #424]	; (8002c6c <HAL_RCC_OscConfig+0x698>)
 8002ac2:	400a      	ands	r2, r1
 8002ac4:	651a      	str	r2, [r3, #80]	; 0x50
 8002ac6:	e020      	b.n	8002b0a <HAL_RCC_OscConfig+0x536>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	23a0      	movs	r3, #160	; 0xa0
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d10e      	bne.n	8002af2 <HAL_RCC_OscConfig+0x51e>
 8002ad4:	4b61      	ldr	r3, [pc, #388]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002ad6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ad8:	4b60      	ldr	r3, [pc, #384]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002ada:	2180      	movs	r1, #128	; 0x80
 8002adc:	00c9      	lsls	r1, r1, #3
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	651a      	str	r2, [r3, #80]	; 0x50
 8002ae2:	4b5e      	ldr	r3, [pc, #376]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002ae4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ae6:	4b5d      	ldr	r3, [pc, #372]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002ae8:	2180      	movs	r1, #128	; 0x80
 8002aea:	0049      	lsls	r1, r1, #1
 8002aec:	430a      	orrs	r2, r1
 8002aee:	651a      	str	r2, [r3, #80]	; 0x50
 8002af0:	e00b      	b.n	8002b0a <HAL_RCC_OscConfig+0x536>
 8002af2:	4b5a      	ldr	r3, [pc, #360]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002af4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002af6:	4b59      	ldr	r3, [pc, #356]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002af8:	495a      	ldr	r1, [pc, #360]	; (8002c64 <HAL_RCC_OscConfig+0x690>)
 8002afa:	400a      	ands	r2, r1
 8002afc:	651a      	str	r2, [r3, #80]	; 0x50
 8002afe:	4b57      	ldr	r3, [pc, #348]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002b00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b02:	4b56      	ldr	r3, [pc, #344]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002b04:	4959      	ldr	r1, [pc, #356]	; (8002c6c <HAL_RCC_OscConfig+0x698>)
 8002b06:	400a      	ands	r2, r1
 8002b08:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d015      	beq.n	8002b3e <HAL_RCC_OscConfig+0x56a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b12:	f7ff fad7 	bl	80020c4 <HAL_GetTick>
 8002b16:	0003      	movs	r3, r0
 8002b18:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b1a:	e009      	b.n	8002b30 <HAL_RCC_OscConfig+0x55c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b1c:	f7ff fad2 	bl	80020c4 <HAL_GetTick>
 8002b20:	0002      	movs	r2, r0
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	4a52      	ldr	r2, [pc, #328]	; (8002c70 <HAL_RCC_OscConfig+0x69c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x55c>
        {
          return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e0cb      	b.n	8002cc8 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b30:	4b4a      	ldr	r3, [pc, #296]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002b32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b34:	2380      	movs	r3, #128	; 0x80
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4013      	ands	r3, r2
 8002b3a:	d0ef      	beq.n	8002b1c <HAL_RCC_OscConfig+0x548>
 8002b3c:	e014      	b.n	8002b68 <HAL_RCC_OscConfig+0x594>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b3e:	f7ff fac1 	bl	80020c4 <HAL_GetTick>
 8002b42:	0003      	movs	r3, r0
 8002b44:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b46:	e009      	b.n	8002b5c <HAL_RCC_OscConfig+0x588>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b48:	f7ff fabc 	bl	80020c4 <HAL_GetTick>
 8002b4c:	0002      	movs	r2, r0
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	4a47      	ldr	r2, [pc, #284]	; (8002c70 <HAL_RCC_OscConfig+0x69c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x588>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e0b5      	b.n	8002cc8 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b5c:	4b3f      	ldr	r3, [pc, #252]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002b5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b60:	2380      	movs	r3, #128	; 0x80
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4013      	ands	r3, r2
 8002b66:	d1ef      	bne.n	8002b48 <HAL_RCC_OscConfig+0x574>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b68:	2323      	movs	r3, #35	; 0x23
 8002b6a:	18fb      	adds	r3, r7, r3
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d105      	bne.n	8002b7e <HAL_RCC_OscConfig+0x5aa>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b72:	4b3a      	ldr	r3, [pc, #232]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b76:	4b39      	ldr	r3, [pc, #228]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002b78:	493e      	ldr	r1, [pc, #248]	; (8002c74 <HAL_RCC_OscConfig+0x6a0>)
 8002b7a:	400a      	ands	r2, r1
 8002b7c:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d100      	bne.n	8002b88 <HAL_RCC_OscConfig+0x5b4>
 8002b86:	e09e      	b.n	8002cc6 <HAL_RCC_OscConfig+0x6f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	2b0c      	cmp	r3, #12
 8002b8c:	d100      	bne.n	8002b90 <HAL_RCC_OscConfig+0x5bc>
 8002b8e:	e077      	b.n	8002c80 <HAL_RCC_OscConfig+0x6ac>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d145      	bne.n	8002c24 <HAL_RCC_OscConfig+0x650>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b98:	4b30      	ldr	r3, [pc, #192]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	4b2f      	ldr	r3, [pc, #188]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002b9e:	4936      	ldr	r1, [pc, #216]	; (8002c78 <HAL_RCC_OscConfig+0x6a4>)
 8002ba0:	400a      	ands	r2, r1
 8002ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba4:	f7ff fa8e 	bl	80020c4 <HAL_GetTick>
 8002ba8:	0003      	movs	r3, r0
 8002baa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bae:	f7ff fa89 	bl	80020c4 <HAL_GetTick>
 8002bb2:	0002      	movs	r2, r0
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x5ec>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e083      	b.n	8002cc8 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002bc0:	4b26      	ldr	r3, [pc, #152]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	2380      	movs	r3, #128	; 0x80
 8002bc6:	049b      	lsls	r3, r3, #18
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d1f0      	bne.n	8002bae <HAL_RCC_OscConfig+0x5da>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bcc:	4b23      	ldr	r3, [pc, #140]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	4a2a      	ldr	r2, [pc, #168]	; (8002c7c <HAL_RCC_OscConfig+0x6a8>)
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	0019      	movs	r1, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	431a      	orrs	r2, r3
 8002be6:	4b1d      	ldr	r3, [pc, #116]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002be8:	430a      	orrs	r2, r1
 8002bea:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bec:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	4b1a      	ldr	r3, [pc, #104]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002bf2:	2180      	movs	r1, #128	; 0x80
 8002bf4:	0449      	lsls	r1, r1, #17
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfa:	f7ff fa63 	bl	80020c4 <HAL_GetTick>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x642>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c04:	f7ff fa5e 	bl	80020c4 <HAL_GetTick>
 8002c08:	0002      	movs	r2, r0
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x642>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e058      	b.n	8002cc8 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002c16:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	2380      	movs	r3, #128	; 0x80
 8002c1c:	049b      	lsls	r3, r3, #18
 8002c1e:	4013      	ands	r3, r2
 8002c20:	d0f0      	beq.n	8002c04 <HAL_RCC_OscConfig+0x630>
 8002c22:	e050      	b.n	8002cc6 <HAL_RCC_OscConfig+0x6f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c24:	4b0d      	ldr	r3, [pc, #52]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002c2a:	4913      	ldr	r1, [pc, #76]	; (8002c78 <HAL_RCC_OscConfig+0x6a4>)
 8002c2c:	400a      	ands	r2, r1
 8002c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c30:	f7ff fa48 	bl	80020c4 <HAL_GetTick>
 8002c34:	0003      	movs	r3, r0
 8002c36:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x678>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c3a:	f7ff fa43 	bl	80020c4 <HAL_GetTick>
 8002c3e:	0002      	movs	r2, r0
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x678>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e03d      	b.n	8002cc8 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002c4c:	4b03      	ldr	r3, [pc, #12]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	2380      	movs	r3, #128	; 0x80
 8002c52:	049b      	lsls	r3, r3, #18
 8002c54:	4013      	ands	r3, r2
 8002c56:	d1f0      	bne.n	8002c3a <HAL_RCC_OscConfig+0x666>
 8002c58:	e035      	b.n	8002cc6 <HAL_RCC_OscConfig+0x6f2>
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	ffff1fff 	.word	0xffff1fff
 8002c64:	fffffeff 	.word	0xfffffeff
 8002c68:	40007000 	.word	0x40007000
 8002c6c:	fffffbff 	.word	0xfffffbff
 8002c70:	00001388 	.word	0x00001388
 8002c74:	efffffff 	.word	0xefffffff
 8002c78:	feffffff 	.word	0xfeffffff
 8002c7c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_RCC_OscConfig+0x6b8>
      {
        return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e01d      	b.n	8002cc8 <HAL_RCC_OscConfig+0x6f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c8c:	4b10      	ldr	r3, [pc, #64]	; (8002cd0 <HAL_RCC_OscConfig+0x6fc>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	2380      	movs	r3, #128	; 0x80
 8002c96:	025b      	lsls	r3, r3, #9
 8002c98:	401a      	ands	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d10f      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x6ee>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	23f0      	movs	r3, #240	; 0xf0
 8002ca6:	039b      	lsls	r3, r3, #14
 8002ca8:	401a      	ands	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d107      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x6ee>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	23c0      	movs	r3, #192	; 0xc0
 8002cb6:	041b      	lsls	r3, r3, #16
 8002cb8:	401a      	ands	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d001      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x6f2>
        {
          return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <HAL_RCC_OscConfig+0x6f4>
        }
      }
    }
  }
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	0018      	movs	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b00a      	add	sp, #40	; 0x28
 8002cce:	bdb0      	pop	{r4, r5, r7, pc}
 8002cd0:	40021000 	.word	0x40021000

08002cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd4:	b5b0      	push	{r4, r5, r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e129      	b.n	8002f3c <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce8:	4b96      	ldr	r3, [pc, #600]	; (8002f44 <HAL_RCC_ClockConfig+0x270>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2201      	movs	r2, #1
 8002cee:	4013      	ands	r3, r2
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d91e      	bls.n	8002d34 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf6:	4b93      	ldr	r3, [pc, #588]	; (8002f44 <HAL_RCC_ClockConfig+0x270>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	4393      	bics	r3, r2
 8002cfe:	0019      	movs	r1, r3
 8002d00:	4b90      	ldr	r3, [pc, #576]	; (8002f44 <HAL_RCC_ClockConfig+0x270>)
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d08:	f7ff f9dc 	bl	80020c4 <HAL_GetTick>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d10:	e009      	b.n	8002d26 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d12:	f7ff f9d7 	bl	80020c4 <HAL_GetTick>
 8002d16:	0002      	movs	r2, r0
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	4a8a      	ldr	r2, [pc, #552]	; (8002f48 <HAL_RCC_ClockConfig+0x274>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e10a      	b.n	8002f3c <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d26:	4b87      	ldr	r3, [pc, #540]	; (8002f44 <HAL_RCC_ClockConfig+0x270>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d1ee      	bne.n	8002d12 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	d009      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d3e:	4b83      	ldr	r3, [pc, #524]	; (8002f4c <HAL_RCC_ClockConfig+0x278>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	22f0      	movs	r2, #240	; 0xf0
 8002d44:	4393      	bics	r3, r2
 8002d46:	0019      	movs	r1, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	4b7f      	ldr	r3, [pc, #508]	; (8002f4c <HAL_RCC_ClockConfig+0x278>)
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2201      	movs	r2, #1
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d100      	bne.n	8002d5e <HAL_RCC_ClockConfig+0x8a>
 8002d5c:	e089      	b.n	8002e72 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d107      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d66:	4b79      	ldr	r3, [pc, #484]	; (8002f4c <HAL_RCC_ClockConfig+0x278>)
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	2380      	movs	r3, #128	; 0x80
 8002d6c:	029b      	lsls	r3, r3, #10
 8002d6e:	4013      	ands	r3, r2
 8002d70:	d120      	bne.n	8002db4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e0e2      	b.n	8002f3c <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b03      	cmp	r3, #3
 8002d7c:	d107      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d7e:	4b73      	ldr	r3, [pc, #460]	; (8002f4c <HAL_RCC_ClockConfig+0x278>)
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	2380      	movs	r3, #128	; 0x80
 8002d84:	049b      	lsls	r3, r3, #18
 8002d86:	4013      	ands	r3, r2
 8002d88:	d114      	bne.n	8002db4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e0d6      	b.n	8002f3c <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d106      	bne.n	8002da4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d96:	4b6d      	ldr	r3, [pc, #436]	; (8002f4c <HAL_RCC_ClockConfig+0x278>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2204      	movs	r2, #4
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d109      	bne.n	8002db4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0cb      	b.n	8002f3c <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002da4:	4b69      	ldr	r3, [pc, #420]	; (8002f4c <HAL_RCC_ClockConfig+0x278>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	2380      	movs	r3, #128	; 0x80
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4013      	ands	r3, r2
 8002dae:	d101      	bne.n	8002db4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0c3      	b.n	8002f3c <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002db4:	4b65      	ldr	r3, [pc, #404]	; (8002f4c <HAL_RCC_ClockConfig+0x278>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	2203      	movs	r2, #3
 8002dba:	4393      	bics	r3, r2
 8002dbc:	0019      	movs	r1, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	4b62      	ldr	r3, [pc, #392]	; (8002f4c <HAL_RCC_ClockConfig+0x278>)
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dc8:	f7ff f97c 	bl	80020c4 <HAL_GetTick>
 8002dcc:	0003      	movs	r3, r0
 8002dce:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d111      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dd8:	e009      	b.n	8002dee <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dda:	f7ff f973 	bl	80020c4 <HAL_GetTick>
 8002dde:	0002      	movs	r2, r0
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	4a58      	ldr	r2, [pc, #352]	; (8002f48 <HAL_RCC_ClockConfig+0x274>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e0a6      	b.n	8002f3c <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dee:	4b57      	ldr	r3, [pc, #348]	; (8002f4c <HAL_RCC_ClockConfig+0x278>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	220c      	movs	r2, #12
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d1ef      	bne.n	8002dda <HAL_RCC_ClockConfig+0x106>
 8002dfa:	e03a      	b.n	8002e72 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d111      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e04:	e009      	b.n	8002e1a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e06:	f7ff f95d 	bl	80020c4 <HAL_GetTick>
 8002e0a:	0002      	movs	r2, r0
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	4a4d      	ldr	r2, [pc, #308]	; (8002f48 <HAL_RCC_ClockConfig+0x274>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e090      	b.n	8002f3c <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e1a:	4b4c      	ldr	r3, [pc, #304]	; (8002f4c <HAL_RCC_ClockConfig+0x278>)
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	220c      	movs	r2, #12
 8002e20:	4013      	ands	r3, r2
 8002e22:	2b0c      	cmp	r3, #12
 8002e24:	d1ef      	bne.n	8002e06 <HAL_RCC_ClockConfig+0x132>
 8002e26:	e024      	b.n	8002e72 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d11b      	bne.n	8002e68 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e30:	e009      	b.n	8002e46 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e32:	f7ff f947 	bl	80020c4 <HAL_GetTick>
 8002e36:	0002      	movs	r2, r0
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	4a42      	ldr	r2, [pc, #264]	; (8002f48 <HAL_RCC_ClockConfig+0x274>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e07a      	b.n	8002f3c <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e46:	4b41      	ldr	r3, [pc, #260]	; (8002f4c <HAL_RCC_ClockConfig+0x278>)
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	220c      	movs	r2, #12
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d1ef      	bne.n	8002e32 <HAL_RCC_ClockConfig+0x15e>
 8002e52:	e00e      	b.n	8002e72 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e54:	f7ff f936 	bl	80020c4 <HAL_GetTick>
 8002e58:	0002      	movs	r2, r0
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	4a3a      	ldr	r2, [pc, #232]	; (8002f48 <HAL_RCC_ClockConfig+0x274>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e069      	b.n	8002f3c <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002e68:	4b38      	ldr	r3, [pc, #224]	; (8002f4c <HAL_RCC_ClockConfig+0x278>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	220c      	movs	r2, #12
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d1f0      	bne.n	8002e54 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e72:	4b34      	ldr	r3, [pc, #208]	; (8002f44 <HAL_RCC_ClockConfig+0x270>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2201      	movs	r2, #1
 8002e78:	4013      	ands	r3, r2
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d21e      	bcs.n	8002ebe <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e80:	4b30      	ldr	r3, [pc, #192]	; (8002f44 <HAL_RCC_ClockConfig+0x270>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2201      	movs	r2, #1
 8002e86:	4393      	bics	r3, r2
 8002e88:	0019      	movs	r1, r3
 8002e8a:	4b2e      	ldr	r3, [pc, #184]	; (8002f44 <HAL_RCC_ClockConfig+0x270>)
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e92:	f7ff f917 	bl	80020c4 <HAL_GetTick>
 8002e96:	0003      	movs	r3, r0
 8002e98:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9a:	e009      	b.n	8002eb0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e9c:	f7ff f912 	bl	80020c4 <HAL_GetTick>
 8002ea0:	0002      	movs	r2, r0
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	4a28      	ldr	r2, [pc, #160]	; (8002f48 <HAL_RCC_ClockConfig+0x274>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e045      	b.n	8002f3c <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb0:	4b24      	ldr	r3, [pc, #144]	; (8002f44 <HAL_RCC_ClockConfig+0x270>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d1ee      	bne.n	8002e9c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2204      	movs	r2, #4
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d009      	beq.n	8002edc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ec8:	4b20      	ldr	r3, [pc, #128]	; (8002f4c <HAL_RCC_ClockConfig+0x278>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4a20      	ldr	r2, [pc, #128]	; (8002f50 <HAL_RCC_ClockConfig+0x27c>)
 8002ece:	4013      	ands	r3, r2
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <HAL_RCC_ClockConfig+0x278>)
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2208      	movs	r2, #8
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d00a      	beq.n	8002efc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ee6:	4b19      	ldr	r3, [pc, #100]	; (8002f4c <HAL_RCC_ClockConfig+0x278>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	4a1a      	ldr	r2, [pc, #104]	; (8002f54 <HAL_RCC_ClockConfig+0x280>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	0019      	movs	r1, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	00da      	lsls	r2, r3, #3
 8002ef6:	4b15      	ldr	r3, [pc, #84]	; (8002f4c <HAL_RCC_ClockConfig+0x278>)
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002efc:	f000 f832 	bl	8002f64 <HAL_RCC_GetSysClockFreq>
 8002f00:	0001      	movs	r1, r0
 8002f02:	4b12      	ldr	r3, [pc, #72]	; (8002f4c <HAL_RCC_ClockConfig+0x278>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	091b      	lsrs	r3, r3, #4
 8002f08:	220f      	movs	r2, #15
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	4a12      	ldr	r2, [pc, #72]	; (8002f58 <HAL_RCC_ClockConfig+0x284>)
 8002f0e:	5cd3      	ldrb	r3, [r2, r3]
 8002f10:	000a      	movs	r2, r1
 8002f12:	40da      	lsrs	r2, r3
 8002f14:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <HAL_RCC_ClockConfig+0x288>)
 8002f16:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f18:	4b11      	ldr	r3, [pc, #68]	; (8002f60 <HAL_RCC_ClockConfig+0x28c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	250b      	movs	r5, #11
 8002f1e:	197c      	adds	r4, r7, r5
 8002f20:	0018      	movs	r0, r3
 8002f22:	f7ff f889 	bl	8002038 <HAL_InitTick>
 8002f26:	0003      	movs	r3, r0
 8002f28:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002f2a:	197b      	adds	r3, r7, r5
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 8002f32:	230b      	movs	r3, #11
 8002f34:	18fb      	adds	r3, r7, r3
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	e000      	b.n	8002f3c <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	b004      	add	sp, #16
 8002f42:	bdb0      	pop	{r4, r5, r7, pc}
 8002f44:	40022000 	.word	0x40022000
 8002f48:	00001388 	.word	0x00001388
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	fffff8ff 	.word	0xfffff8ff
 8002f54:	ffffc7ff 	.word	0xffffc7ff
 8002f58:	080041c8 	.word	0x080041c8
 8002f5c:	20000000 	.word	0x20000000
 8002f60:	20000004 	.word	0x20000004

08002f64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f66:	b08f      	sub	sp, #60	; 0x3c
 8002f68:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002f6a:	4b4a      	ldr	r3, [pc, #296]	; (8003094 <HAL_RCC_GetSysClockFreq+0x130>)
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f72:	230c      	movs	r3, #12
 8002f74:	4013      	ands	r3, r2
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d00f      	beq.n	8002f9a <HAL_RCC_GetSysClockFreq+0x36>
 8002f7a:	2b0c      	cmp	r3, #12
 8002f7c:	d010      	beq.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x3c>
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d000      	beq.n	8002f84 <HAL_RCC_GetSysClockFreq+0x20>
 8002f82:	e073      	b.n	800306c <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002f84:	4b43      	ldr	r3, [pc, #268]	; (8003094 <HAL_RCC_GetSysClockFreq+0x130>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2210      	movs	r2, #16
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	d002      	beq.n	8002f94 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002f8e:	4b42      	ldr	r3, [pc, #264]	; (8003098 <HAL_RCC_GetSysClockFreq+0x134>)
 8002f90:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002f92:	e079      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 8002f94:	4b41      	ldr	r3, [pc, #260]	; (800309c <HAL_RCC_GetSysClockFreq+0x138>)
 8002f96:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f98:	e076      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f9a:	4b41      	ldr	r3, [pc, #260]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002f9c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f9e:	e073      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa2:	0c9a      	lsrs	r2, r3, #18
 8002fa4:	230f      	movs	r3, #15
 8002fa6:	401a      	ands	r2, r3
 8002fa8:	4b3e      	ldr	r3, [pc, #248]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x140>)
 8002faa:	5c9b      	ldrb	r3, [r3, r2]
 8002fac:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb0:	0d9a      	lsrs	r2, r3, #22
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fba:	4b36      	ldr	r3, [pc, #216]	; (8003094 <HAL_RCC_GetSysClockFreq+0x130>)
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	025b      	lsls	r3, r3, #9
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d019      	beq.n	8002ffa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61fb      	str	r3, [r7, #28]
 8002fce:	4a34      	ldr	r2, [pc, #208]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	69b8      	ldr	r0, [r7, #24]
 8002fd4:	69f9      	ldr	r1, [r7, #28]
 8002fd6:	f7fd f943 	bl	8000260 <__aeabi_lmul>
 8002fda:	0003      	movs	r3, r0
 8002fdc:	000c      	movs	r4, r1
 8002fde:	0018      	movs	r0, r3
 8002fe0:	0021      	movs	r1, r4
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f7fd f917 	bl	8000220 <__aeabi_uldivmod>
 8002ff2:	0003      	movs	r3, r0
 8002ff4:	000c      	movs	r4, r1
 8002ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ff8:	e035      	b.n	8003066 <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002ffa:	4b26      	ldr	r3, [pc, #152]	; (8003094 <HAL_RCC_GetSysClockFreq+0x130>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2210      	movs	r2, #16
 8003000:	4013      	ands	r3, r2
 8003002:	d019      	beq.n	8003038 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003006:	60bb      	str	r3, [r7, #8]
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	4a22      	ldr	r2, [pc, #136]	; (8003098 <HAL_RCC_GetSysClockFreq+0x134>)
 800300e:	2300      	movs	r3, #0
 8003010:	68b8      	ldr	r0, [r7, #8]
 8003012:	68f9      	ldr	r1, [r7, #12]
 8003014:	f7fd f924 	bl	8000260 <__aeabi_lmul>
 8003018:	0003      	movs	r3, r0
 800301a:	000c      	movs	r4, r1
 800301c:	0018      	movs	r0, r3
 800301e:	0021      	movs	r1, r4
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	603b      	str	r3, [r7, #0]
 8003024:	2300      	movs	r3, #0
 8003026:	607b      	str	r3, [r7, #4]
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f7fd f8f8 	bl	8000220 <__aeabi_uldivmod>
 8003030:	0003      	movs	r3, r0
 8003032:	000c      	movs	r4, r1
 8003034:	637b      	str	r3, [r7, #52]	; 0x34
 8003036:	e016      	b.n	8003066 <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303a:	0018      	movs	r0, r3
 800303c:	2300      	movs	r3, #0
 800303e:	0019      	movs	r1, r3
 8003040:	4a16      	ldr	r2, [pc, #88]	; (800309c <HAL_RCC_GetSysClockFreq+0x138>)
 8003042:	2300      	movs	r3, #0
 8003044:	f7fd f90c 	bl	8000260 <__aeabi_lmul>
 8003048:	0003      	movs	r3, r0
 800304a:	000c      	movs	r4, r1
 800304c:	0018      	movs	r0, r3
 800304e:	0021      	movs	r1, r4
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	001d      	movs	r5, r3
 8003054:	2300      	movs	r3, #0
 8003056:	001e      	movs	r6, r3
 8003058:	002a      	movs	r2, r5
 800305a:	0033      	movs	r3, r6
 800305c:	f7fd f8e0 	bl	8000220 <__aeabi_uldivmod>
 8003060:	0003      	movs	r3, r0
 8003062:	000c      	movs	r4, r1
 8003064:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003068:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800306a:	e00d      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800306c:	4b09      	ldr	r3, [pc, #36]	; (8003094 <HAL_RCC_GetSysClockFreq+0x130>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	0b5b      	lsrs	r3, r3, #13
 8003072:	2207      	movs	r2, #7
 8003074:	4013      	ands	r3, r2
 8003076:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003078:	6a3b      	ldr	r3, [r7, #32]
 800307a:	3301      	adds	r3, #1
 800307c:	2280      	movs	r2, #128	; 0x80
 800307e:	0212      	lsls	r2, r2, #8
 8003080:	409a      	lsls	r2, r3
 8003082:	0013      	movs	r3, r2
 8003084:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003086:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800308a:	0018      	movs	r0, r3
 800308c:	46bd      	mov	sp, r7
 800308e:	b00f      	add	sp, #60	; 0x3c
 8003090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	40021000 	.word	0x40021000
 8003098:	003d0900 	.word	0x003d0900
 800309c:	00f42400 	.word	0x00f42400
 80030a0:	007a1200 	.word	0x007a1200
 80030a4:	080041e0 	.word	0x080041e0

080030a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030ac:	4b02      	ldr	r3, [pc, #8]	; (80030b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80030ae:	681b      	ldr	r3, [r3, #0]
}
 80030b0:	0018      	movs	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	20000000 	.word	0x20000000

080030bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030c0:	f7ff fff2 	bl	80030a8 <HAL_RCC_GetHCLKFreq>
 80030c4:	0001      	movs	r1, r0
 80030c6:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	0a1b      	lsrs	r3, r3, #8
 80030cc:	2207      	movs	r2, #7
 80030ce:	4013      	ands	r3, r2
 80030d0:	4a04      	ldr	r2, [pc, #16]	; (80030e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030d2:	5cd3      	ldrb	r3, [r2, r3]
 80030d4:	40d9      	lsrs	r1, r3
 80030d6:	000b      	movs	r3, r1
}
 80030d8:	0018      	movs	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	40021000 	.word	0x40021000
 80030e4:	080041d8 	.word	0x080041d8

080030e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030ec:	f7ff ffdc 	bl	80030a8 <HAL_RCC_GetHCLKFreq>
 80030f0:	0001      	movs	r1, r0
 80030f2:	4b06      	ldr	r3, [pc, #24]	; (800310c <HAL_RCC_GetPCLK2Freq+0x24>)
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	0adb      	lsrs	r3, r3, #11
 80030f8:	2207      	movs	r2, #7
 80030fa:	4013      	ands	r3, r2
 80030fc:	4a04      	ldr	r2, [pc, #16]	; (8003110 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030fe:	5cd3      	ldrb	r3, [r2, r3]
 8003100:	40d9      	lsrs	r1, r3
 8003102:	000b      	movs	r3, r1
}
 8003104:	0018      	movs	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	40021000 	.word	0x40021000
 8003110:	080041d8 	.word	0x080041d8

08003114 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800311c:	2317      	movs	r3, #23
 800311e:	18fb      	adds	r3, r7, r3
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2220      	movs	r2, #32
 800312a:	4013      	ands	r3, r2
 800312c:	d100      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800312e:	e0c3      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003130:	4b82      	ldr	r3, [pc, #520]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003132:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003134:	2380      	movs	r3, #128	; 0x80
 8003136:	055b      	lsls	r3, r3, #21
 8003138:	4013      	ands	r3, r2
 800313a:	d10a      	bne.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800313c:	4b7f      	ldr	r3, [pc, #508]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800313e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003140:	4b7e      	ldr	r3, [pc, #504]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003142:	2180      	movs	r1, #128	; 0x80
 8003144:	0549      	lsls	r1, r1, #21
 8003146:	430a      	orrs	r2, r1
 8003148:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800314a:	2317      	movs	r3, #23
 800314c:	18fb      	adds	r3, r7, r3
 800314e:	2201      	movs	r2, #1
 8003150:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003152:	4b7b      	ldr	r3, [pc, #492]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	2380      	movs	r3, #128	; 0x80
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	4013      	ands	r3, r2
 800315c:	d11a      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800315e:	4b78      	ldr	r3, [pc, #480]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	4b77      	ldr	r3, [pc, #476]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003164:	2180      	movs	r1, #128	; 0x80
 8003166:	0049      	lsls	r1, r1, #1
 8003168:	430a      	orrs	r2, r1
 800316a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800316c:	f7fe ffaa 	bl	80020c4 <HAL_GetTick>
 8003170:	0003      	movs	r3, r0
 8003172:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003174:	e008      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003176:	f7fe ffa5 	bl	80020c4 <HAL_GetTick>
 800317a:	0002      	movs	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b64      	cmp	r3, #100	; 0x64
 8003182:	d901      	bls.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e0d4      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003188:	4b6d      	ldr	r3, [pc, #436]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	2380      	movs	r3, #128	; 0x80
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4013      	ands	r3, r2
 8003192:	d0f0      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003194:	4b69      	ldr	r3, [pc, #420]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	23c0      	movs	r3, #192	; 0xc0
 800319a:	039b      	lsls	r3, r3, #14
 800319c:	4013      	ands	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	23c0      	movs	r3, #192	; 0xc0
 80031a6:	039b      	lsls	r3, r3, #14
 80031a8:	4013      	ands	r3, r2
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d013      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	23c0      	movs	r3, #192	; 0xc0
 80031b6:	029b      	lsls	r3, r3, #10
 80031b8:	401a      	ands	r2, r3
 80031ba:	23c0      	movs	r3, #192	; 0xc0
 80031bc:	029b      	lsls	r3, r3, #10
 80031be:	429a      	cmp	r2, r3
 80031c0:	d10a      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80031c2:	4b5e      	ldr	r3, [pc, #376]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	2380      	movs	r3, #128	; 0x80
 80031c8:	029b      	lsls	r3, r3, #10
 80031ca:	401a      	ands	r2, r3
 80031cc:	2380      	movs	r3, #128	; 0x80
 80031ce:	029b      	lsls	r3, r3, #10
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d101      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e0ac      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x21e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80031d8:	4b58      	ldr	r3, [pc, #352]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80031da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031dc:	23c0      	movs	r3, #192	; 0xc0
 80031de:	029b      	lsls	r3, r3, #10
 80031e0:	4013      	ands	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d03b      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	23c0      	movs	r3, #192	; 0xc0
 80031f0:	029b      	lsls	r3, r3, #10
 80031f2:	4013      	ands	r3, r2
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d033      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2220      	movs	r2, #32
 8003200:	4013      	ands	r3, r2
 8003202:	d02e      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003204:	4b4d      	ldr	r3, [pc, #308]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003208:	4a4e      	ldr	r2, [pc, #312]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800320a:	4013      	ands	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800320e:	4b4b      	ldr	r3, [pc, #300]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003210:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003212:	4b4a      	ldr	r3, [pc, #296]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003214:	2180      	movs	r1, #128	; 0x80
 8003216:	0309      	lsls	r1, r1, #12
 8003218:	430a      	orrs	r2, r1
 800321a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800321c:	4b47      	ldr	r3, [pc, #284]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800321e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003220:	4b46      	ldr	r3, [pc, #280]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003222:	4949      	ldr	r1, [pc, #292]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003224:	400a      	ands	r2, r1
 8003226:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003228:	4b44      	ldr	r3, [pc, #272]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	2380      	movs	r3, #128	; 0x80
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	4013      	ands	r3, r2
 8003236:	d014      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003238:	f7fe ff44 	bl	80020c4 <HAL_GetTick>
 800323c:	0003      	movs	r3, r0
 800323e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003240:	e009      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003242:	f7fe ff3f 	bl	80020c4 <HAL_GetTick>
 8003246:	0002      	movs	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	4a3f      	ldr	r2, [pc, #252]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d901      	bls.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e06d      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x21e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003256:	4b39      	ldr	r3, [pc, #228]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003258:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800325a:	2380      	movs	r3, #128	; 0x80
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4013      	ands	r3, r2
 8003260:	d0ef      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	23c0      	movs	r3, #192	; 0xc0
 8003268:	029b      	lsls	r3, r3, #10
 800326a:	401a      	ands	r2, r3
 800326c:	23c0      	movs	r3, #192	; 0xc0
 800326e:	029b      	lsls	r3, r3, #10
 8003270:	429a      	cmp	r2, r3
 8003272:	d10c      	bne.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003274:	4b31      	ldr	r3, [pc, #196]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a35      	ldr	r2, [pc, #212]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800327a:	4013      	ands	r3, r2
 800327c:	0019      	movs	r1, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	23c0      	movs	r3, #192	; 0xc0
 8003284:	039b      	lsls	r3, r3, #14
 8003286:	401a      	ands	r2, r3
 8003288:	4b2c      	ldr	r3, [pc, #176]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800328a:	430a      	orrs	r2, r1
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	4b2b      	ldr	r3, [pc, #172]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003290:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	23c0      	movs	r3, #192	; 0xc0
 8003298:	029b      	lsls	r3, r3, #10
 800329a:	401a      	ands	r2, r3
 800329c:	4b27      	ldr	r3, [pc, #156]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800329e:	430a      	orrs	r2, r1
 80032a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032a2:	2317      	movs	r3, #23
 80032a4:	18fb      	adds	r3, r7, r3
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d105      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ac:	4b23      	ldr	r3, [pc, #140]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80032ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032b0:	4b22      	ldr	r3, [pc, #136]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80032b2:	4928      	ldr	r1, [pc, #160]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032b4:	400a      	ands	r2, r1
 80032b6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2202      	movs	r2, #2
 80032be:	4013      	ands	r3, r2
 80032c0:	d009      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032c2:	4b1e      	ldr	r3, [pc, #120]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80032c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c6:	220c      	movs	r2, #12
 80032c8:	4393      	bics	r3, r2
 80032ca:	0019      	movs	r1, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	4b1a      	ldr	r3, [pc, #104]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80032d2:	430a      	orrs	r2, r1
 80032d4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2204      	movs	r2, #4
 80032dc:	4013      	ands	r3, r2
 80032de:	d009      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032e0:	4b16      	ldr	r3, [pc, #88]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80032e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032e4:	4a1c      	ldr	r2, [pc, #112]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	0019      	movs	r1, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	4b13      	ldr	r3, [pc, #76]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80032f0:	430a      	orrs	r2, r1
 80032f2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2208      	movs	r2, #8
 80032fa:	4013      	ands	r3, r2
 80032fc:	d009      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032fe:	4b0f      	ldr	r3, [pc, #60]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003302:	4a16      	ldr	r2, [pc, #88]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003304:	4013      	ands	r3, r2
 8003306:	0019      	movs	r1, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	4b0b      	ldr	r3, [pc, #44]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800330e:	430a      	orrs	r2, r1
 8003310:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2280      	movs	r2, #128	; 0x80
 8003318:	4013      	ands	r3, r2
 800331a:	d009      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800331c:	4b07      	ldr	r3, [pc, #28]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800331e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003320:	4a0f      	ldr	r2, [pc, #60]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003322:	4013      	ands	r3, r2
 8003324:	0019      	movs	r1, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695a      	ldr	r2, [r3, #20]
 800332a:	4b04      	ldr	r3, [pc, #16]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800332c:	430a      	orrs	r2, r1
 800332e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	0018      	movs	r0, r3
 8003334:	46bd      	mov	sp, r7
 8003336:	b006      	add	sp, #24
 8003338:	bd80      	pop	{r7, pc}
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	40021000 	.word	0x40021000
 8003340:	40007000 	.word	0x40007000
 8003344:	fffcffff 	.word	0xfffcffff
 8003348:	fff7ffff 	.word	0xfff7ffff
 800334c:	00001388 	.word	0x00001388
 8003350:	ffcfffff 	.word	0xffcfffff
 8003354:	efffffff 	.word	0xefffffff
 8003358:	fffff3ff 	.word	0xfffff3ff
 800335c:	ffffcfff 	.word	0xffffcfff
 8003360:	fff3ffff 	.word	0xfff3ffff

08003364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e032      	b.n	80033dc <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2239      	movs	r2, #57	; 0x39
 800337a:	5c9b      	ldrb	r3, [r3, r2]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d107      	bne.n	8003392 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2238      	movs	r2, #56	; 0x38
 8003386:	2100      	movs	r1, #0
 8003388:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	0018      	movs	r0, r3
 800338e:	f7fe fbbf 	bl	8001b10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2239      	movs	r2, #57	; 0x39
 8003396:	2102      	movs	r1, #2
 8003398:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	3304      	adds	r3, #4
 80033a2:	0019      	movs	r1, r3
 80033a4:	0010      	movs	r0, r2
 80033a6:	f000 f91f 	bl	80035e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	223e      	movs	r2, #62	; 0x3e
 80033ae:	2101      	movs	r1, #1
 80033b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	223a      	movs	r2, #58	; 0x3a
 80033b6:	2101      	movs	r1, #1
 80033b8:	5499      	strb	r1, [r3, r2]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	223b      	movs	r2, #59	; 0x3b
 80033be:	2101      	movs	r1, #1
 80033c0:	5499      	strb	r1, [r3, r2]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	223c      	movs	r2, #60	; 0x3c
 80033c6:	2101      	movs	r1, #1
 80033c8:	5499      	strb	r1, [r3, r2]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	223d      	movs	r2, #61	; 0x3d
 80033ce:	2101      	movs	r1, #1
 80033d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2239      	movs	r2, #57	; 0x39
 80033d6:	2101      	movs	r1, #1
 80033d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	0018      	movs	r0, r3
 80033de:	46bd      	mov	sp, r7
 80033e0:	b002      	add	sp, #8
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2239      	movs	r2, #57	; 0x39
 80033f0:	5c9b      	ldrb	r3, [r3, r2]
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d001      	beq.n	80033fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e02e      	b.n	800345a <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2239      	movs	r2, #57	; 0x39
 8003400:	2102      	movs	r1, #2
 8003402:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	2380      	movs	r3, #128	; 0x80
 800340a:	05db      	lsls	r3, r3, #23
 800340c:	429a      	cmp	r2, r3
 800340e:	d009      	beq.n	8003424 <HAL_TIM_Base_Start+0x40>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a13      	ldr	r2, [pc, #76]	; (8003464 <HAL_TIM_Base_Start+0x80>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d004      	beq.n	8003424 <HAL_TIM_Base_Start+0x40>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a12      	ldr	r2, [pc, #72]	; (8003468 <HAL_TIM_Base_Start+0x84>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d111      	bne.n	8003448 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2207      	movs	r2, #7
 800342c:	4013      	ands	r3, r2
 800342e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2b06      	cmp	r3, #6
 8003434:	d010      	beq.n	8003458 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2101      	movs	r1, #1
 8003442:	430a      	orrs	r2, r1
 8003444:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003446:	e007      	b.n	8003458 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2101      	movs	r1, #1
 8003454:	430a      	orrs	r2, r1
 8003456:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	0018      	movs	r0, r3
 800345c:	46bd      	mov	sp, r7
 800345e:	b004      	add	sp, #16
 8003460:	bd80      	pop	{r7, pc}
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	40010800 	.word	0x40010800
 8003468:	40011400 	.word	0x40011400

0800346c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2238      	movs	r2, #56	; 0x38
 800347a:	5c9b      	ldrb	r3, [r3, r2]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d101      	bne.n	8003484 <HAL_TIM_ConfigClockSource+0x18>
 8003480:	2302      	movs	r3, #2
 8003482:	e0ab      	b.n	80035dc <HAL_TIM_ConfigClockSource+0x170>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2238      	movs	r2, #56	; 0x38
 8003488:	2101      	movs	r1, #1
 800348a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2239      	movs	r2, #57	; 0x39
 8003490:	2102      	movs	r1, #2
 8003492:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2277      	movs	r2, #119	; 0x77
 80034a0:	4393      	bics	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4a4f      	ldr	r2, [pc, #316]	; (80035e4 <HAL_TIM_ConfigClockSource+0x178>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b40      	cmp	r3, #64	; 0x40
 80034ba:	d100      	bne.n	80034be <HAL_TIM_ConfigClockSource+0x52>
 80034bc:	e06b      	b.n	8003596 <HAL_TIM_ConfigClockSource+0x12a>
 80034be:	d80e      	bhi.n	80034de <HAL_TIM_ConfigClockSource+0x72>
 80034c0:	2b10      	cmp	r3, #16
 80034c2:	d100      	bne.n	80034c6 <HAL_TIM_ConfigClockSource+0x5a>
 80034c4:	e077      	b.n	80035b6 <HAL_TIM_ConfigClockSource+0x14a>
 80034c6:	d803      	bhi.n	80034d0 <HAL_TIM_ConfigClockSource+0x64>
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d100      	bne.n	80034ce <HAL_TIM_ConfigClockSource+0x62>
 80034cc:	e073      	b.n	80035b6 <HAL_TIM_ConfigClockSource+0x14a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80034ce:	e07c      	b.n	80035ca <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80034d0:	2b20      	cmp	r3, #32
 80034d2:	d100      	bne.n	80034d6 <HAL_TIM_ConfigClockSource+0x6a>
 80034d4:	e06f      	b.n	80035b6 <HAL_TIM_ConfigClockSource+0x14a>
 80034d6:	2b30      	cmp	r3, #48	; 0x30
 80034d8:	d100      	bne.n	80034dc <HAL_TIM_ConfigClockSource+0x70>
 80034da:	e06c      	b.n	80035b6 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 80034dc:	e075      	b.n	80035ca <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80034de:	2b70      	cmp	r3, #112	; 0x70
 80034e0:	d00e      	beq.n	8003500 <HAL_TIM_ConfigClockSource+0x94>
 80034e2:	d804      	bhi.n	80034ee <HAL_TIM_ConfigClockSource+0x82>
 80034e4:	2b50      	cmp	r3, #80	; 0x50
 80034e6:	d036      	beq.n	8003556 <HAL_TIM_ConfigClockSource+0xea>
 80034e8:	2b60      	cmp	r3, #96	; 0x60
 80034ea:	d044      	beq.n	8003576 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 80034ec:	e06d      	b.n	80035ca <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80034ee:	2280      	movs	r2, #128	; 0x80
 80034f0:	0152      	lsls	r2, r2, #5
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d068      	beq.n	80035c8 <HAL_TIM_ConfigClockSource+0x15c>
 80034f6:	2280      	movs	r2, #128	; 0x80
 80034f8:	0192      	lsls	r2, r2, #6
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d017      	beq.n	800352e <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80034fe:	e064      	b.n	80035ca <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6818      	ldr	r0, [r3, #0]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	6899      	ldr	r1, [r3, #8]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f000 f938 	bl	8003784 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2277      	movs	r2, #119	; 0x77
 8003520:	4313      	orrs	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	609a      	str	r2, [r3, #8]
      break;
 800352c:	e04d      	b.n	80035ca <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6818      	ldr	r0, [r3, #0]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6899      	ldr	r1, [r3, #8]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f000 f921 	bl	8003784 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2180      	movs	r1, #128	; 0x80
 800354e:	01c9      	lsls	r1, r1, #7
 8003550:	430a      	orrs	r2, r1
 8003552:	609a      	str	r2, [r3, #8]
      break;
 8003554:	e039      	b.n	80035ca <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6818      	ldr	r0, [r3, #0]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	6859      	ldr	r1, [r3, #4]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	001a      	movs	r2, r3
 8003564:	f000 f894 	bl	8003690 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2150      	movs	r1, #80	; 0x50
 800356e:	0018      	movs	r0, r3
 8003570:	f000 f8ee 	bl	8003750 <TIM_ITRx_SetConfig>
      break;
 8003574:	e029      	b.n	80035ca <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6818      	ldr	r0, [r3, #0]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	6859      	ldr	r1, [r3, #4]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	001a      	movs	r2, r3
 8003584:	f000 f8b2 	bl	80036ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2160      	movs	r1, #96	; 0x60
 800358e:	0018      	movs	r0, r3
 8003590:	f000 f8de 	bl	8003750 <TIM_ITRx_SetConfig>
      break;
 8003594:	e019      	b.n	80035ca <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6818      	ldr	r0, [r3, #0]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	6859      	ldr	r1, [r3, #4]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	001a      	movs	r2, r3
 80035a4:	f000 f874 	bl	8003690 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2140      	movs	r1, #64	; 0x40
 80035ae:	0018      	movs	r0, r3
 80035b0:	f000 f8ce 	bl	8003750 <TIM_ITRx_SetConfig>
      break;
 80035b4:	e009      	b.n	80035ca <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	0019      	movs	r1, r3
 80035c0:	0010      	movs	r0, r2
 80035c2:	f000 f8c5 	bl	8003750 <TIM_ITRx_SetConfig>
        break;
 80035c6:	e000      	b.n	80035ca <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80035c8:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2239      	movs	r2, #57	; 0x39
 80035ce:	2101      	movs	r1, #1
 80035d0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2238      	movs	r2, #56	; 0x38
 80035d6:	2100      	movs	r1, #0
 80035d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	0018      	movs	r0, r3
 80035de:	46bd      	mov	sp, r7
 80035e0:	b004      	add	sp, #16
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	ffff00ff 	.word	0xffff00ff

080035e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	2380      	movs	r3, #128	; 0x80
 80035fc:	05db      	lsls	r3, r3, #23
 80035fe:	429a      	cmp	r2, r3
 8003600:	d007      	beq.n	8003612 <TIM_Base_SetConfig+0x2a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a1f      	ldr	r2, [pc, #124]	; (8003684 <TIM_Base_SetConfig+0x9c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d003      	beq.n	8003612 <TIM_Base_SetConfig+0x2a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a1e      	ldr	r2, [pc, #120]	; (8003688 <TIM_Base_SetConfig+0xa0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d108      	bne.n	8003624 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2270      	movs	r2, #112	; 0x70
 8003616:	4393      	bics	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	4313      	orrs	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	2380      	movs	r3, #128	; 0x80
 8003628:	05db      	lsls	r3, r3, #23
 800362a:	429a      	cmp	r2, r3
 800362c:	d007      	beq.n	800363e <TIM_Base_SetConfig+0x56>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a14      	ldr	r2, [pc, #80]	; (8003684 <TIM_Base_SetConfig+0x9c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d003      	beq.n	800363e <TIM_Base_SetConfig+0x56>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a13      	ldr	r2, [pc, #76]	; (8003688 <TIM_Base_SetConfig+0xa0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d108      	bne.n	8003650 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4a12      	ldr	r2, [pc, #72]	; (800368c <TIM_Base_SetConfig+0xa4>)
 8003642:	4013      	ands	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4313      	orrs	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2280      	movs	r2, #128	; 0x80
 8003654:	4393      	bics	r3, r2
 8003656:	001a      	movs	r2, r3
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	4313      	orrs	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	615a      	str	r2, [r3, #20]
}
 800367c:	46c0      	nop			; (mov r8, r8)
 800367e:	46bd      	mov	sp, r7
 8003680:	b004      	add	sp, #16
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40010800 	.word	0x40010800
 8003688:	40011400 	.word	0x40011400
 800368c:	fffffcff 	.word	0xfffffcff

08003690 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	2201      	movs	r2, #1
 80036a8:	4393      	bics	r3, r2
 80036aa:	001a      	movs	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	22f0      	movs	r2, #240	; 0xf0
 80036ba:	4393      	bics	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	220a      	movs	r2, #10
 80036cc:	4393      	bics	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	621a      	str	r2, [r3, #32]
}
 80036e4:	46c0      	nop			; (mov r8, r8)
 80036e6:	46bd      	mov	sp, r7
 80036e8:	b006      	add	sp, #24
 80036ea:	bd80      	pop	{r7, pc}

080036ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	2210      	movs	r2, #16
 80036fe:	4393      	bics	r3, r2
 8003700:	001a      	movs	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	4a0d      	ldr	r2, [pc, #52]	; (800374c <TIM_TI2_ConfigInputStage+0x60>)
 8003716:	4013      	ands	r3, r2
 8003718:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	031b      	lsls	r3, r3, #12
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	4313      	orrs	r3, r2
 8003722:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	22a0      	movs	r2, #160	; 0xa0
 8003728:	4393      	bics	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4313      	orrs	r3, r2
 8003734:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	621a      	str	r2, [r3, #32]
}
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b006      	add	sp, #24
 8003748:	bd80      	pop	{r7, pc}
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	ffff0fff 	.word	0xffff0fff

08003750 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2270      	movs	r2, #112	; 0x70
 8003764:	4393      	bics	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4313      	orrs	r3, r2
 800376e:	2207      	movs	r2, #7
 8003770:	4313      	orrs	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	609a      	str	r2, [r3, #8]
}
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	46bd      	mov	sp, r7
 800377e:	b004      	add	sp, #16
 8003780:	bd80      	pop	{r7, pc}
	...

08003784 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	4a09      	ldr	r2, [pc, #36]	; (80037c0 <TIM_ETR_SetConfig+0x3c>)
 800379c:	4013      	ands	r3, r2
 800379e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	021a      	lsls	r2, r3, #8
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	431a      	orrs	r2, r3
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	609a      	str	r2, [r3, #8]
}
 80037b8:	46c0      	nop			; (mov r8, r8)
 80037ba:	46bd      	mov	sp, r7
 80037bc:	b006      	add	sp, #24
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	ffff00ff 	.word	0xffff00ff

080037c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2238      	movs	r2, #56	; 0x38
 80037d2:	5c9b      	ldrb	r3, [r3, r2]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d101      	bne.n	80037dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037d8:	2302      	movs	r3, #2
 80037da:	e042      	b.n	8003862 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2238      	movs	r2, #56	; 0x38
 80037e0:	2101      	movs	r1, #1
 80037e2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2239      	movs	r2, #57	; 0x39
 80037e8:	2102      	movs	r1, #2
 80037ea:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2270      	movs	r2, #112	; 0x70
 8003800:	4393      	bics	r3, r2
 8003802:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	2380      	movs	r3, #128	; 0x80
 800381c:	05db      	lsls	r3, r3, #23
 800381e:	429a      	cmp	r2, r3
 8003820:	d009      	beq.n	8003836 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a11      	ldr	r2, [pc, #68]	; (800386c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d004      	beq.n	8003836 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a0f      	ldr	r2, [pc, #60]	; (8003870 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d10c      	bne.n	8003850 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2280      	movs	r2, #128	; 0x80
 800383a:	4393      	bics	r3, r2
 800383c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	4313      	orrs	r3, r2
 8003846:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2239      	movs	r2, #57	; 0x39
 8003854:	2101      	movs	r1, #1
 8003856:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2238      	movs	r2, #56	; 0x38
 800385c:	2100      	movs	r1, #0
 800385e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	0018      	movs	r0, r3
 8003864:	46bd      	mov	sp, r7
 8003866:	b004      	add	sp, #16
 8003868:	bd80      	pop	{r7, pc}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	40010800 	.word	0x40010800
 8003870:	40011400 	.word	0x40011400

08003874 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e044      	b.n	8003910 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800388a:	2b00      	cmp	r3, #0
 800388c:	d107      	bne.n	800389e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2274      	movs	r2, #116	; 0x74
 8003892:	2100      	movs	r1, #0
 8003894:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	0018      	movs	r0, r3
 800389a:	f7fe f94f 	bl	8001b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2224      	movs	r2, #36	; 0x24
 80038a2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2101      	movs	r1, #1
 80038b0:	438a      	bics	r2, r1
 80038b2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	0018      	movs	r0, r3
 80038b8:	f000 f830 	bl	800391c <UART_SetConfig>
 80038bc:	0003      	movs	r3, r0
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d101      	bne.n	80038c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e024      	b.n	8003910 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	0018      	movs	r0, r3
 80038d2:	f000 fa85 	bl	8003de0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	490d      	ldr	r1, [pc, #52]	; (8003918 <HAL_UART_Init+0xa4>)
 80038e2:	400a      	ands	r2, r1
 80038e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	212a      	movs	r1, #42	; 0x2a
 80038f2:	438a      	bics	r2, r1
 80038f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2101      	movs	r1, #1
 8003902:	430a      	orrs	r2, r1
 8003904:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	0018      	movs	r0, r3
 800390a:	f000 fb1d 	bl	8003f48 <UART_CheckIdleState>
 800390e:	0003      	movs	r3, r0
}
 8003910:	0018      	movs	r0, r3
 8003912:	46bd      	mov	sp, r7
 8003914:	b002      	add	sp, #8
 8003916:	bd80      	pop	{r7, pc}
 8003918:	ffffb7ff 	.word	0xffffb7ff

0800391c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800391c:	b5b0      	push	{r4, r5, r7, lr}
 800391e:	b08e      	sub	sp, #56	; 0x38
 8003920:	af00      	add	r7, sp, #0
 8003922:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003924:	231a      	movs	r3, #26
 8003926:	2218      	movs	r2, #24
 8003928:	4694      	mov	ip, r2
 800392a:	44bc      	add	ip, r7
 800392c:	4463      	add	r3, ip
 800392e:	2200      	movs	r2, #0
 8003930:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	431a      	orrs	r2, r3
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	431a      	orrs	r2, r3
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	4313      	orrs	r3, r2
 8003948:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4aba      	ldr	r2, [pc, #744]	; (8003c3c <UART_SetConfig+0x320>)
 8003952:	4013      	ands	r3, r2
 8003954:	0019      	movs	r1, r3
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800395c:	430a      	orrs	r2, r1
 800395e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4ab6      	ldr	r2, [pc, #728]	; (8003c40 <UART_SetConfig+0x324>)
 8003968:	4013      	ands	r3, r2
 800396a:	0019      	movs	r1, r3
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4ab0      	ldr	r2, [pc, #704]	; (8003c44 <UART_SetConfig+0x328>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d004      	beq.n	8003992 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800398e:	4313      	orrs	r3, r2
 8003990:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	4aab      	ldr	r2, [pc, #684]	; (8003c48 <UART_SetConfig+0x32c>)
 800399a:	4013      	ands	r3, r2
 800399c:	0019      	movs	r1, r3
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039a4:	430a      	orrs	r2, r1
 80039a6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4aa7      	ldr	r2, [pc, #668]	; (8003c4c <UART_SetConfig+0x330>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d137      	bne.n	8003a22 <UART_SetConfig+0x106>
 80039b2:	4ba7      	ldr	r3, [pc, #668]	; (8003c50 <UART_SetConfig+0x334>)
 80039b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b6:	220c      	movs	r2, #12
 80039b8:	4013      	ands	r3, r2
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d018      	beq.n	80039f0 <UART_SetConfig+0xd4>
 80039be:	d802      	bhi.n	80039c6 <UART_SetConfig+0xaa>
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <UART_SetConfig+0xb4>
 80039c4:	e024      	b.n	8003a10 <UART_SetConfig+0xf4>
 80039c6:	2b08      	cmp	r3, #8
 80039c8:	d00a      	beq.n	80039e0 <UART_SetConfig+0xc4>
 80039ca:	2b0c      	cmp	r3, #12
 80039cc:	d018      	beq.n	8003a00 <UART_SetConfig+0xe4>
 80039ce:	e01f      	b.n	8003a10 <UART_SetConfig+0xf4>
 80039d0:	231b      	movs	r3, #27
 80039d2:	2218      	movs	r2, #24
 80039d4:	4694      	mov	ip, r2
 80039d6:	44bc      	add	ip, r7
 80039d8:	4463      	add	r3, ip
 80039da:	2200      	movs	r2, #0
 80039dc:	701a      	strb	r2, [r3, #0]
 80039de:	e06e      	b.n	8003abe <UART_SetConfig+0x1a2>
 80039e0:	231b      	movs	r3, #27
 80039e2:	2218      	movs	r2, #24
 80039e4:	4694      	mov	ip, r2
 80039e6:	44bc      	add	ip, r7
 80039e8:	4463      	add	r3, ip
 80039ea:	2202      	movs	r2, #2
 80039ec:	701a      	strb	r2, [r3, #0]
 80039ee:	e066      	b.n	8003abe <UART_SetConfig+0x1a2>
 80039f0:	231b      	movs	r3, #27
 80039f2:	2218      	movs	r2, #24
 80039f4:	4694      	mov	ip, r2
 80039f6:	44bc      	add	ip, r7
 80039f8:	4463      	add	r3, ip
 80039fa:	2204      	movs	r2, #4
 80039fc:	701a      	strb	r2, [r3, #0]
 80039fe:	e05e      	b.n	8003abe <UART_SetConfig+0x1a2>
 8003a00:	231b      	movs	r3, #27
 8003a02:	2218      	movs	r2, #24
 8003a04:	4694      	mov	ip, r2
 8003a06:	44bc      	add	ip, r7
 8003a08:	4463      	add	r3, ip
 8003a0a:	2208      	movs	r2, #8
 8003a0c:	701a      	strb	r2, [r3, #0]
 8003a0e:	e056      	b.n	8003abe <UART_SetConfig+0x1a2>
 8003a10:	231b      	movs	r3, #27
 8003a12:	2218      	movs	r2, #24
 8003a14:	4694      	mov	ip, r2
 8003a16:	44bc      	add	ip, r7
 8003a18:	4463      	add	r3, ip
 8003a1a:	2210      	movs	r2, #16
 8003a1c:	701a      	strb	r2, [r3, #0]
 8003a1e:	46c0      	nop			; (mov r8, r8)
 8003a20:	e04d      	b.n	8003abe <UART_SetConfig+0x1a2>
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a87      	ldr	r2, [pc, #540]	; (8003c44 <UART_SetConfig+0x328>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d141      	bne.n	8003ab0 <UART_SetConfig+0x194>
 8003a2c:	4b88      	ldr	r3, [pc, #544]	; (8003c50 <UART_SetConfig+0x334>)
 8003a2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a30:	23c0      	movs	r3, #192	; 0xc0
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	4013      	ands	r3, r2
 8003a36:	2280      	movs	r2, #128	; 0x80
 8003a38:	00d2      	lsls	r2, r2, #3
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d01f      	beq.n	8003a7e <UART_SetConfig+0x162>
 8003a3e:	2280      	movs	r2, #128	; 0x80
 8003a40:	00d2      	lsls	r2, r2, #3
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d802      	bhi.n	8003a4c <UART_SetConfig+0x130>
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d009      	beq.n	8003a5e <UART_SetConfig+0x142>
 8003a4a:	e028      	b.n	8003a9e <UART_SetConfig+0x182>
 8003a4c:	2280      	movs	r2, #128	; 0x80
 8003a4e:	0112      	lsls	r2, r2, #4
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00c      	beq.n	8003a6e <UART_SetConfig+0x152>
 8003a54:	22c0      	movs	r2, #192	; 0xc0
 8003a56:	0112      	lsls	r2, r2, #4
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d018      	beq.n	8003a8e <UART_SetConfig+0x172>
 8003a5c:	e01f      	b.n	8003a9e <UART_SetConfig+0x182>
 8003a5e:	231b      	movs	r3, #27
 8003a60:	2218      	movs	r2, #24
 8003a62:	4694      	mov	ip, r2
 8003a64:	44bc      	add	ip, r7
 8003a66:	4463      	add	r3, ip
 8003a68:	2200      	movs	r2, #0
 8003a6a:	701a      	strb	r2, [r3, #0]
 8003a6c:	e027      	b.n	8003abe <UART_SetConfig+0x1a2>
 8003a6e:	231b      	movs	r3, #27
 8003a70:	2218      	movs	r2, #24
 8003a72:	4694      	mov	ip, r2
 8003a74:	44bc      	add	ip, r7
 8003a76:	4463      	add	r3, ip
 8003a78:	2202      	movs	r2, #2
 8003a7a:	701a      	strb	r2, [r3, #0]
 8003a7c:	e01f      	b.n	8003abe <UART_SetConfig+0x1a2>
 8003a7e:	231b      	movs	r3, #27
 8003a80:	2218      	movs	r2, #24
 8003a82:	4694      	mov	ip, r2
 8003a84:	44bc      	add	ip, r7
 8003a86:	4463      	add	r3, ip
 8003a88:	2204      	movs	r2, #4
 8003a8a:	701a      	strb	r2, [r3, #0]
 8003a8c:	e017      	b.n	8003abe <UART_SetConfig+0x1a2>
 8003a8e:	231b      	movs	r3, #27
 8003a90:	2218      	movs	r2, #24
 8003a92:	4694      	mov	ip, r2
 8003a94:	44bc      	add	ip, r7
 8003a96:	4463      	add	r3, ip
 8003a98:	2208      	movs	r2, #8
 8003a9a:	701a      	strb	r2, [r3, #0]
 8003a9c:	e00f      	b.n	8003abe <UART_SetConfig+0x1a2>
 8003a9e:	231b      	movs	r3, #27
 8003aa0:	2218      	movs	r2, #24
 8003aa2:	4694      	mov	ip, r2
 8003aa4:	44bc      	add	ip, r7
 8003aa6:	4463      	add	r3, ip
 8003aa8:	2210      	movs	r2, #16
 8003aaa:	701a      	strb	r2, [r3, #0]
 8003aac:	46c0      	nop			; (mov r8, r8)
 8003aae:	e006      	b.n	8003abe <UART_SetConfig+0x1a2>
 8003ab0:	231b      	movs	r3, #27
 8003ab2:	2218      	movs	r2, #24
 8003ab4:	4694      	mov	ip, r2
 8003ab6:	44bc      	add	ip, r7
 8003ab8:	4463      	add	r3, ip
 8003aba:	2210      	movs	r2, #16
 8003abc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a60      	ldr	r2, [pc, #384]	; (8003c44 <UART_SetConfig+0x328>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d000      	beq.n	8003aca <UART_SetConfig+0x1ae>
 8003ac8:	e085      	b.n	8003bd6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003aca:	231b      	movs	r3, #27
 8003acc:	2218      	movs	r2, #24
 8003ace:	4694      	mov	ip, r2
 8003ad0:	44bc      	add	ip, r7
 8003ad2:	4463      	add	r3, ip
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d00d      	beq.n	8003af6 <UART_SetConfig+0x1da>
 8003ada:	dc02      	bgt.n	8003ae2 <UART_SetConfig+0x1c6>
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d005      	beq.n	8003aec <UART_SetConfig+0x1d0>
 8003ae0:	e01d      	b.n	8003b1e <UART_SetConfig+0x202>
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d012      	beq.n	8003b0c <UART_SetConfig+0x1f0>
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d015      	beq.n	8003b16 <UART_SetConfig+0x1fa>
 8003aea:	e018      	b.n	8003b1e <UART_SetConfig+0x202>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aec:	f7ff fae6 	bl	80030bc <HAL_RCC_GetPCLK1Freq>
 8003af0:	0003      	movs	r3, r0
 8003af2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003af4:	e01d      	b.n	8003b32 <UART_SetConfig+0x216>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003af6:	4b56      	ldr	r3, [pc, #344]	; (8003c50 <UART_SetConfig+0x334>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2210      	movs	r2, #16
 8003afc:	4013      	ands	r3, r2
 8003afe:	d002      	beq.n	8003b06 <UART_SetConfig+0x1ea>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003b00:	4b54      	ldr	r3, [pc, #336]	; (8003c54 <UART_SetConfig+0x338>)
 8003b02:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003b04:	e015      	b.n	8003b32 <UART_SetConfig+0x216>
          pclk = (uint32_t) HSI_VALUE;
 8003b06:	4b54      	ldr	r3, [pc, #336]	; (8003c58 <UART_SetConfig+0x33c>)
 8003b08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b0a:	e012      	b.n	8003b32 <UART_SetConfig+0x216>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b0c:	f7ff fa2a 	bl	8002f64 <HAL_RCC_GetSysClockFreq>
 8003b10:	0003      	movs	r3, r0
 8003b12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b14:	e00d      	b.n	8003b32 <UART_SetConfig+0x216>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b16:	2380      	movs	r3, #128	; 0x80
 8003b18:	021b      	lsls	r3, r3, #8
 8003b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b1c:	e009      	b.n	8003b32 <UART_SetConfig+0x216>
      default:
        pclk = 0U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003b22:	231a      	movs	r3, #26
 8003b24:	2218      	movs	r2, #24
 8003b26:	4694      	mov	ip, r2
 8003b28:	44bc      	add	ip, r7
 8003b2a:	4463      	add	r3, ip
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	701a      	strb	r2, [r3, #0]
        break;
 8003b30:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d100      	bne.n	8003b3a <UART_SetConfig+0x21e>
 8003b38:	e138      	b.n	8003dac <UART_SetConfig+0x490>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	0013      	movs	r3, r2
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	189b      	adds	r3, r3, r2
 8003b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d305      	bcc.n	8003b56 <UART_SetConfig+0x23a>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d907      	bls.n	8003b66 <UART_SetConfig+0x24a>
      {
        ret = HAL_ERROR;
 8003b56:	231a      	movs	r3, #26
 8003b58:	2218      	movs	r2, #24
 8003b5a:	4694      	mov	ip, r2
 8003b5c:	44bc      	add	ip, r7
 8003b5e:	4463      	add	r3, ip
 8003b60:	2201      	movs	r2, #1
 8003b62:	701a      	strb	r2, [r3, #0]
 8003b64:	e122      	b.n	8003dac <UART_SetConfig+0x490>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b68:	613b      	str	r3, [r7, #16]
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	617b      	str	r3, [r7, #20]
 8003b6e:	6939      	ldr	r1, [r7, #16]
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	000b      	movs	r3, r1
 8003b74:	0e1b      	lsrs	r3, r3, #24
 8003b76:	0010      	movs	r0, r2
 8003b78:	0205      	lsls	r5, r0, #8
 8003b7a:	431d      	orrs	r5, r3
 8003b7c:	000b      	movs	r3, r1
 8003b7e:	021c      	lsls	r4, r3, #8
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	085b      	lsrs	r3, r3, #1
 8003b86:	60bb      	str	r3, [r7, #8]
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	68b8      	ldr	r0, [r7, #8]
 8003b8e:	68f9      	ldr	r1, [r7, #12]
 8003b90:	1900      	adds	r0, r0, r4
 8003b92:	4169      	adcs	r1, r5
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	603b      	str	r3, [r7, #0]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	607b      	str	r3, [r7, #4]
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f7fc fb3d 	bl	8000220 <__aeabi_uldivmod>
 8003ba6:	0003      	movs	r3, r0
 8003ba8:	000c      	movs	r4, r1
 8003baa:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bae:	4a2b      	ldr	r2, [pc, #172]	; (8003c5c <UART_SetConfig+0x340>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d908      	bls.n	8003bc6 <UART_SetConfig+0x2aa>
 8003bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb6:	4a2a      	ldr	r2, [pc, #168]	; (8003c60 <UART_SetConfig+0x344>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d804      	bhi.n	8003bc6 <UART_SetConfig+0x2aa>
        {
          huart->Instance->BRR = usartdiv;
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bc2:	60da      	str	r2, [r3, #12]
 8003bc4:	e0f2      	b.n	8003dac <UART_SetConfig+0x490>
        }
        else
        {
          ret = HAL_ERROR;
 8003bc6:	231a      	movs	r3, #26
 8003bc8:	2218      	movs	r2, #24
 8003bca:	4694      	mov	ip, r2
 8003bcc:	44bc      	add	ip, r7
 8003bce:	4463      	add	r3, ip
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	701a      	strb	r2, [r3, #0]
 8003bd4:	e0ea      	b.n	8003dac <UART_SetConfig+0x490>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	69da      	ldr	r2, [r3, #28]
 8003bda:	2380      	movs	r3, #128	; 0x80
 8003bdc:	021b      	lsls	r3, r3, #8
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d000      	beq.n	8003be4 <UART_SetConfig+0x2c8>
 8003be2:	e08a      	b.n	8003cfa <UART_SetConfig+0x3de>
  {
    switch (clocksource)
 8003be4:	231b      	movs	r3, #27
 8003be6:	2218      	movs	r2, #24
 8003be8:	4694      	mov	ip, r2
 8003bea:	44bc      	add	ip, r7
 8003bec:	4463      	add	r3, ip
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d839      	bhi.n	8003c68 <UART_SetConfig+0x34c>
 8003bf4:	009a      	lsls	r2, r3, #2
 8003bf6:	4b1b      	ldr	r3, [pc, #108]	; (8003c64 <UART_SetConfig+0x348>)
 8003bf8:	18d3      	adds	r3, r2, r3
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bfe:	f7ff fa5d 	bl	80030bc <HAL_RCC_GetPCLK1Freq>
 8003c02:	0003      	movs	r3, r0
 8003c04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c06:	e039      	b.n	8003c7c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c08:	f7ff fa6e 	bl	80030e8 <HAL_RCC_GetPCLK2Freq>
 8003c0c:	0003      	movs	r3, r0
 8003c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c10:	e034      	b.n	8003c7c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c12:	4b0f      	ldr	r3, [pc, #60]	; (8003c50 <UART_SetConfig+0x334>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2210      	movs	r2, #16
 8003c18:	4013      	ands	r3, r2
 8003c1a:	d002      	beq.n	8003c22 <UART_SetConfig+0x306>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003c1c:	4b0d      	ldr	r3, [pc, #52]	; (8003c54 <UART_SetConfig+0x338>)
 8003c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003c20:	e02c      	b.n	8003c7c <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 8003c22:	4b0d      	ldr	r3, [pc, #52]	; (8003c58 <UART_SetConfig+0x33c>)
 8003c24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c26:	e029      	b.n	8003c7c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c28:	f7ff f99c 	bl	8002f64 <HAL_RCC_GetSysClockFreq>
 8003c2c:	0003      	movs	r3, r0
 8003c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c30:	e024      	b.n	8003c7c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c32:	2380      	movs	r3, #128	; 0x80
 8003c34:	021b      	lsls	r3, r3, #8
 8003c36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c38:	e020      	b.n	8003c7c <UART_SetConfig+0x360>
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	efff69f3 	.word	0xefff69f3
 8003c40:	ffffcfff 	.word	0xffffcfff
 8003c44:	40004800 	.word	0x40004800
 8003c48:	fffff4ff 	.word	0xfffff4ff
 8003c4c:	40004400 	.word	0x40004400
 8003c50:	40021000 	.word	0x40021000
 8003c54:	003d0900 	.word	0x003d0900
 8003c58:	00f42400 	.word	0x00f42400
 8003c5c:	000002ff 	.word	0x000002ff
 8003c60:	000fffff 	.word	0x000fffff
 8003c64:	080041ec 	.word	0x080041ec
      default:
        pclk = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003c6c:	231a      	movs	r3, #26
 8003c6e:	2218      	movs	r2, #24
 8003c70:	4694      	mov	ip, r2
 8003c72:	44bc      	add	ip, r7
 8003c74:	4463      	add	r3, ip
 8003c76:	2201      	movs	r2, #1
 8003c78:	701a      	strb	r2, [r3, #0]
        break;
 8003c7a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d100      	bne.n	8003c84 <UART_SetConfig+0x368>
 8003c82:	e093      	b.n	8003dac <UART_SetConfig+0x490>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c86:	005a      	lsls	r2, r3, #1
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	085b      	lsrs	r3, r3, #1
 8003c8e:	18d2      	adds	r2, r2, r3
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	0019      	movs	r1, r3
 8003c96:	0010      	movs	r0, r2
 8003c98:	f7fc fa36 	bl	8000108 <__udivsi3>
 8003c9c:	0003      	movs	r3, r0
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca4:	2b0f      	cmp	r3, #15
 8003ca6:	d920      	bls.n	8003cea <UART_SetConfig+0x3ce>
 8003ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003caa:	4a48      	ldr	r2, [pc, #288]	; (8003dcc <UART_SetConfig+0x4b0>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d81c      	bhi.n	8003cea <UART_SetConfig+0x3ce>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	200e      	movs	r0, #14
 8003cb6:	2418      	movs	r4, #24
 8003cb8:	193b      	adds	r3, r7, r4
 8003cba:	181b      	adds	r3, r3, r0
 8003cbc:	210f      	movs	r1, #15
 8003cbe:	438a      	bics	r2, r1
 8003cc0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc4:	085b      	lsrs	r3, r3, #1
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2207      	movs	r2, #7
 8003cca:	4013      	ands	r3, r2
 8003ccc:	b299      	uxth	r1, r3
 8003cce:	193b      	adds	r3, r7, r4
 8003cd0:	181b      	adds	r3, r3, r0
 8003cd2:	193a      	adds	r2, r7, r4
 8003cd4:	1812      	adds	r2, r2, r0
 8003cd6:	8812      	ldrh	r2, [r2, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	193a      	adds	r2, r7, r4
 8003ce2:	1812      	adds	r2, r2, r0
 8003ce4:	8812      	ldrh	r2, [r2, #0]
 8003ce6:	60da      	str	r2, [r3, #12]
 8003ce8:	e060      	b.n	8003dac <UART_SetConfig+0x490>
      }
      else
      {
        ret = HAL_ERROR;
 8003cea:	231a      	movs	r3, #26
 8003cec:	2218      	movs	r2, #24
 8003cee:	4694      	mov	ip, r2
 8003cf0:	44bc      	add	ip, r7
 8003cf2:	4463      	add	r3, ip
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	701a      	strb	r2, [r3, #0]
 8003cf8:	e058      	b.n	8003dac <UART_SetConfig+0x490>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cfa:	231b      	movs	r3, #27
 8003cfc:	2218      	movs	r2, #24
 8003cfe:	4694      	mov	ip, r2
 8003d00:	44bc      	add	ip, r7
 8003d02:	4463      	add	r3, ip
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d822      	bhi.n	8003d50 <UART_SetConfig+0x434>
 8003d0a:	009a      	lsls	r2, r3, #2
 8003d0c:	4b30      	ldr	r3, [pc, #192]	; (8003dd0 <UART_SetConfig+0x4b4>)
 8003d0e:	18d3      	adds	r3, r2, r3
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d14:	f7ff f9d2 	bl	80030bc <HAL_RCC_GetPCLK1Freq>
 8003d18:	0003      	movs	r3, r0
 8003d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d1c:	e022      	b.n	8003d64 <UART_SetConfig+0x448>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d1e:	f7ff f9e3 	bl	80030e8 <HAL_RCC_GetPCLK2Freq>
 8003d22:	0003      	movs	r3, r0
 8003d24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d26:	e01d      	b.n	8003d64 <UART_SetConfig+0x448>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d28:	4b2a      	ldr	r3, [pc, #168]	; (8003dd4 <UART_SetConfig+0x4b8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2210      	movs	r2, #16
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d002      	beq.n	8003d38 <UART_SetConfig+0x41c>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003d32:	4b29      	ldr	r3, [pc, #164]	; (8003dd8 <UART_SetConfig+0x4bc>)
 8003d34:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003d36:	e015      	b.n	8003d64 <UART_SetConfig+0x448>
          pclk = (uint32_t) HSI_VALUE;
 8003d38:	4b28      	ldr	r3, [pc, #160]	; (8003ddc <UART_SetConfig+0x4c0>)
 8003d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d3c:	e012      	b.n	8003d64 <UART_SetConfig+0x448>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d3e:	f7ff f911 	bl	8002f64 <HAL_RCC_GetSysClockFreq>
 8003d42:	0003      	movs	r3, r0
 8003d44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d46:	e00d      	b.n	8003d64 <UART_SetConfig+0x448>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d48:	2380      	movs	r3, #128	; 0x80
 8003d4a:	021b      	lsls	r3, r3, #8
 8003d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d4e:	e009      	b.n	8003d64 <UART_SetConfig+0x448>
      default:
        pclk = 0U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003d54:	231a      	movs	r3, #26
 8003d56:	2218      	movs	r2, #24
 8003d58:	4694      	mov	ip, r2
 8003d5a:	44bc      	add	ip, r7
 8003d5c:	4463      	add	r3, ip
 8003d5e:	2201      	movs	r2, #1
 8003d60:	701a      	strb	r2, [r3, #0]
        break;
 8003d62:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d020      	beq.n	8003dac <UART_SetConfig+0x490>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	085a      	lsrs	r2, r3, #1
 8003d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d72:	18d2      	adds	r2, r2, r3
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	0019      	movs	r1, r3
 8003d7a:	0010      	movs	r0, r2
 8003d7c:	f7fc f9c4 	bl	8000108 <__udivsi3>
 8003d80:	0003      	movs	r3, r0
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d88:	2b0f      	cmp	r3, #15
 8003d8a:	d908      	bls.n	8003d9e <UART_SetConfig+0x482>
 8003d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8e:	4a0f      	ldr	r2, [pc, #60]	; (8003dcc <UART_SetConfig+0x4b0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d804      	bhi.n	8003d9e <UART_SetConfig+0x482>
      {
        huart->Instance->BRR = usartdiv;
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d9a:	60da      	str	r2, [r3, #12]
 8003d9c:	e006      	b.n	8003dac <UART_SetConfig+0x490>
      }
      else
      {
        ret = HAL_ERROR;
 8003d9e:	231a      	movs	r3, #26
 8003da0:	2218      	movs	r2, #24
 8003da2:	4694      	mov	ip, r2
 8003da4:	44bc      	add	ip, r7
 8003da6:	4463      	add	r3, ip
 8003da8:	2201      	movs	r2, #1
 8003daa:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	2200      	movs	r2, #0
 8003db0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	2200      	movs	r2, #0
 8003db6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003db8:	231a      	movs	r3, #26
 8003dba:	2218      	movs	r2, #24
 8003dbc:	4694      	mov	ip, r2
 8003dbe:	44bc      	add	ip, r7
 8003dc0:	4463      	add	r3, ip
 8003dc2:	781b      	ldrb	r3, [r3, #0]
}
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	b00e      	add	sp, #56	; 0x38
 8003dca:	bdb0      	pop	{r4, r5, r7, pc}
 8003dcc:	0000ffff 	.word	0x0000ffff
 8003dd0:	08004210 	.word	0x08004210
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	003d0900 	.word	0x003d0900
 8003ddc:	00f42400 	.word	0x00f42400

08003de0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	2201      	movs	r2, #1
 8003dee:	4013      	ands	r3, r2
 8003df0:	d00b      	beq.n	8003e0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	4a4a      	ldr	r2, [pc, #296]	; (8003f24 <UART_AdvFeatureConfig+0x144>)
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	0019      	movs	r1, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	2202      	movs	r2, #2
 8003e10:	4013      	ands	r3, r2
 8003e12:	d00b      	beq.n	8003e2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	4a43      	ldr	r2, [pc, #268]	; (8003f28 <UART_AdvFeatureConfig+0x148>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	0019      	movs	r1, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	2204      	movs	r2, #4
 8003e32:	4013      	ands	r3, r2
 8003e34:	d00b      	beq.n	8003e4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	4a3b      	ldr	r2, [pc, #236]	; (8003f2c <UART_AdvFeatureConfig+0x14c>)
 8003e3e:	4013      	ands	r3, r2
 8003e40:	0019      	movs	r1, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	2208      	movs	r2, #8
 8003e54:	4013      	ands	r3, r2
 8003e56:	d00b      	beq.n	8003e70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	4a34      	ldr	r2, [pc, #208]	; (8003f30 <UART_AdvFeatureConfig+0x150>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	0019      	movs	r1, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	2210      	movs	r2, #16
 8003e76:	4013      	ands	r3, r2
 8003e78:	d00b      	beq.n	8003e92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	4a2c      	ldr	r2, [pc, #176]	; (8003f34 <UART_AdvFeatureConfig+0x154>)
 8003e82:	4013      	ands	r3, r2
 8003e84:	0019      	movs	r1, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	2220      	movs	r2, #32
 8003e98:	4013      	ands	r3, r2
 8003e9a:	d00b      	beq.n	8003eb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	4a25      	ldr	r2, [pc, #148]	; (8003f38 <UART_AdvFeatureConfig+0x158>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	0019      	movs	r1, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	2240      	movs	r2, #64	; 0x40
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d01d      	beq.n	8003efa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	4a1d      	ldr	r2, [pc, #116]	; (8003f3c <UART_AdvFeatureConfig+0x15c>)
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	0019      	movs	r1, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eda:	2380      	movs	r3, #128	; 0x80
 8003edc:	035b      	lsls	r3, r3, #13
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d10b      	bne.n	8003efa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	4a15      	ldr	r2, [pc, #84]	; (8003f40 <UART_AdvFeatureConfig+0x160>)
 8003eea:	4013      	ands	r3, r2
 8003eec:	0019      	movs	r1, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	2280      	movs	r2, #128	; 0x80
 8003f00:	4013      	ands	r3, r2
 8003f02:	d00b      	beq.n	8003f1c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	4a0e      	ldr	r2, [pc, #56]	; (8003f44 <UART_AdvFeatureConfig+0x164>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	0019      	movs	r1, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	605a      	str	r2, [r3, #4]
  }
}
 8003f1c:	46c0      	nop			; (mov r8, r8)
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	b002      	add	sp, #8
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	fffdffff 	.word	0xfffdffff
 8003f28:	fffeffff 	.word	0xfffeffff
 8003f2c:	fffbffff 	.word	0xfffbffff
 8003f30:	ffff7fff 	.word	0xffff7fff
 8003f34:	ffffefff 	.word	0xffffefff
 8003f38:	ffffdfff 	.word	0xffffdfff
 8003f3c:	ffefffff 	.word	0xffefffff
 8003f40:	ff9fffff 	.word	0xff9fffff
 8003f44:	fff7ffff 	.word	0xfff7ffff

08003f48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af02      	add	r7, sp, #8
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2280      	movs	r2, #128	; 0x80
 8003f54:	2100      	movs	r1, #0
 8003f56:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f58:	f7fe f8b4 	bl	80020c4 <HAL_GetTick>
 8003f5c:	0003      	movs	r3, r0
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2208      	movs	r2, #8
 8003f68:	4013      	ands	r3, r2
 8003f6a:	2b08      	cmp	r3, #8
 8003f6c:	d10d      	bne.n	8003f8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	2380      	movs	r3, #128	; 0x80
 8003f72:	0399      	lsls	r1, r3, #14
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	4b18      	ldr	r3, [pc, #96]	; (8003fd8 <UART_CheckIdleState+0x90>)
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	0013      	movs	r3, r2
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f000 f82d 	bl	8003fdc <UART_WaitOnFlagUntilTimeout>
 8003f82:	1e03      	subs	r3, r0, #0
 8003f84:	d001      	beq.n	8003f8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e022      	b.n	8003fd0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2204      	movs	r2, #4
 8003f92:	4013      	ands	r3, r2
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	d10d      	bne.n	8003fb4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	2380      	movs	r3, #128	; 0x80
 8003f9c:	03d9      	lsls	r1, r3, #15
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	4b0d      	ldr	r3, [pc, #52]	; (8003fd8 <UART_CheckIdleState+0x90>)
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	0013      	movs	r3, r2
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f000 f818 	bl	8003fdc <UART_WaitOnFlagUntilTimeout>
 8003fac:	1e03      	subs	r3, r0, #0
 8003fae:	d001      	beq.n	8003fb4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e00d      	b.n	8003fd0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2274      	movs	r2, #116	; 0x74
 8003fca:	2100      	movs	r1, #0
 8003fcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	b004      	add	sp, #16
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	01ffffff 	.word	0x01ffffff

08003fdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	603b      	str	r3, [r7, #0]
 8003fe8:	1dfb      	adds	r3, r7, #7
 8003fea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fec:	e05e      	b.n	80040ac <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	d05b      	beq.n	80040ac <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff4:	f7fe f866 	bl	80020c4 <HAL_GetTick>
 8003ff8:	0002      	movs	r2, r0
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	429a      	cmp	r2, r3
 8004002:	d302      	bcc.n	800400a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d11b      	bne.n	8004042 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	492f      	ldr	r1, [pc, #188]	; (80040d4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004016:	400a      	ands	r2, r1
 8004018:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2101      	movs	r1, #1
 8004026:	438a      	bics	r2, r1
 8004028:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2220      	movs	r2, #32
 800402e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2220      	movs	r2, #32
 8004034:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2274      	movs	r2, #116	; 0x74
 800403a:	2100      	movs	r1, #0
 800403c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e044      	b.n	80040cc <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2204      	movs	r2, #4
 800404a:	4013      	ands	r3, r2
 800404c:	d02e      	beq.n	80040ac <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	69da      	ldr	r2, [r3, #28]
 8004054:	2380      	movs	r3, #128	; 0x80
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	401a      	ands	r2, r3
 800405a:	2380      	movs	r3, #128	; 0x80
 800405c:	011b      	lsls	r3, r3, #4
 800405e:	429a      	cmp	r2, r3
 8004060:	d124      	bne.n	80040ac <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2280      	movs	r2, #128	; 0x80
 8004068:	0112      	lsls	r2, r2, #4
 800406a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4917      	ldr	r1, [pc, #92]	; (80040d4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004078:	400a      	ands	r2, r1
 800407a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2101      	movs	r1, #1
 8004088:	438a      	bics	r2, r1
 800408a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2220      	movs	r2, #32
 8004090:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2220      	movs	r2, #32
 8004096:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2280      	movs	r2, #128	; 0x80
 800409c:	2120      	movs	r1, #32
 800409e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2274      	movs	r2, #116	; 0x74
 80040a4:	2100      	movs	r1, #0
 80040a6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e00f      	b.n	80040cc <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	4013      	ands	r3, r2
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	425a      	negs	r2, r3
 80040bc:	4153      	adcs	r3, r2
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	001a      	movs	r2, r3
 80040c2:	1dfb      	adds	r3, r7, #7
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d091      	beq.n	8003fee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	0018      	movs	r0, r3
 80040ce:	46bd      	mov	sp, r7
 80040d0:	b004      	add	sp, #16
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	fffffe5f 	.word	0xfffffe5f

080040d8 <__libc_init_array>:
 80040d8:	b570      	push	{r4, r5, r6, lr}
 80040da:	2600      	movs	r6, #0
 80040dc:	4d0c      	ldr	r5, [pc, #48]	; (8004110 <__libc_init_array+0x38>)
 80040de:	4c0d      	ldr	r4, [pc, #52]	; (8004114 <__libc_init_array+0x3c>)
 80040e0:	1b64      	subs	r4, r4, r5
 80040e2:	10a4      	asrs	r4, r4, #2
 80040e4:	42a6      	cmp	r6, r4
 80040e6:	d109      	bne.n	80040fc <__libc_init_array+0x24>
 80040e8:	2600      	movs	r6, #0
 80040ea:	f000 f821 	bl	8004130 <_init>
 80040ee:	4d0a      	ldr	r5, [pc, #40]	; (8004118 <__libc_init_array+0x40>)
 80040f0:	4c0a      	ldr	r4, [pc, #40]	; (800411c <__libc_init_array+0x44>)
 80040f2:	1b64      	subs	r4, r4, r5
 80040f4:	10a4      	asrs	r4, r4, #2
 80040f6:	42a6      	cmp	r6, r4
 80040f8:	d105      	bne.n	8004106 <__libc_init_array+0x2e>
 80040fa:	bd70      	pop	{r4, r5, r6, pc}
 80040fc:	00b3      	lsls	r3, r6, #2
 80040fe:	58eb      	ldr	r3, [r5, r3]
 8004100:	4798      	blx	r3
 8004102:	3601      	adds	r6, #1
 8004104:	e7ee      	b.n	80040e4 <__libc_init_array+0xc>
 8004106:	00b3      	lsls	r3, r6, #2
 8004108:	58eb      	ldr	r3, [r5, r3]
 800410a:	4798      	blx	r3
 800410c:	3601      	adds	r6, #1
 800410e:	e7f2      	b.n	80040f6 <__libc_init_array+0x1e>
 8004110:	0800423c 	.word	0x0800423c
 8004114:	0800423c 	.word	0x0800423c
 8004118:	0800423c 	.word	0x0800423c
 800411c:	08004240 	.word	0x08004240

08004120 <memset>:
 8004120:	0003      	movs	r3, r0
 8004122:	1812      	adds	r2, r2, r0
 8004124:	4293      	cmp	r3, r2
 8004126:	d100      	bne.n	800412a <memset+0xa>
 8004128:	4770      	bx	lr
 800412a:	7019      	strb	r1, [r3, #0]
 800412c:	3301      	adds	r3, #1
 800412e:	e7f9      	b.n	8004124 <memset+0x4>

08004130 <_init>:
 8004130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004132:	46c0      	nop			; (mov r8, r8)
 8004134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004136:	bc08      	pop	{r3}
 8004138:	469e      	mov	lr, r3
 800413a:	4770      	bx	lr

0800413c <_fini>:
 800413c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413e:	46c0      	nop			; (mov r8, r8)
 8004140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004142:	bc08      	pop	{r3}
 8004144:	469e      	mov	lr, r3
 8004146:	4770      	bx	lr
